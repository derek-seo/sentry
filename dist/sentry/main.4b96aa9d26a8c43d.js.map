{"version":3,"mappings":"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","names":["value","createImpl","ctorFunc","instance","Error","call","stack","prototype","Object","create","constructor","UnsubscriptionError","createErrorClass","_super","errors","this","message","length","map","err","i","toString","join","name","arr","item","index","indexOf","splice","initialTeardown","unsubscribe","closed","_parentage","Array","isArray","parent","remove","isFunction","e","_teardowns","teardown","execTeardown","push","add","Subscription","_hasParent","_addParent","n","_a","includes","_removeParent","arrRemove","empty","EMPTY_SUBSCRIPTION","EMPTY","config","onUnhandledError","onStoppedNotification","Promise","undefined","useDeprecatedSynchronousErrorHandling","useDeprecatedNextContext","timeoutProvider","setTimeout","args","delegate","clearTimeout","handle","COMPLETE_NOTIFICATION","createNotification","kind","error","context","cb","isRoot","errorThrown","destination","super","isSubscription","EMPTY_OBSERVER","next","complete","SafeSubscriber","isStopped","handleStoppedNotification","nextNotification","_next","errorNotification","_error","_complete","Subscriber","observerOrNext","bind","r","wrapForErrorHandling","noop","defaultErrorHandler","handler","captureError","reportUnhandledError","notification","subscriber","observable","Symbol","x","Observable","subscribe","_subscribe","lift","operator","source","isObserver","isSubscriber","errorContext","_trySubscribe","sink","forEach","promiseCtor","getPromiseCtor","resolve","reject","subscription","Symbol_observable","pipe","operations","fns","identity","input","reduce","prev","fn","pipeFromArray","toPromise","t","ObjectUnsubscribedError","Subject","subject","AnonymousSubject","_throwIfClosed","copy","observers","slice","observer","hasError","thrownError","shift","observed","_checkFinalizedStatuses","_innerSubscribe","asObservable","_b","init","hasLift","liftedSource","TypeError","onNext","onComplete","onError","onFinalize","project","thisArg","operate","OperatorSubscriber","s","o","d","u","v","f","a","yd","isArrayLike","then","obj","asyncIterator","iterator","getSymbolIterator","Symbol_iterator","readableStream","reader","getReader","done","Er","read","releaseLock","isInteropObservable","obs","fromInteropObservable","array","fromArrayLike","isPromise","promise","fromPromise","isAsyncIterable","fromAsyncIterable","isIterable","iterable","fromIterable","isReadableStreamLike","readableStreamLikeToAsyncGenerator","fromReadableStreamLike","createInvalidObservableTypeError","asyncIterable","l","c","asyncIterable_1","asyncIterable_1_1","process","catch","parentSubscription","scheduler","work","delay","repeat","scheduleSubscription","schedule","resultSelector","concurrent","Infinity","mergeMap","b","ii","innerFrom","onBeforeNext","expand","innerSubScheduler","additionalTeardown","buffer","active","isComplete","checkComplete","outerNext","doInnerSub","innerComplete","innerValue","bufferedValue","executeSchedule","mergeInternals","isScheduler","last","pop","result","subscribeOn","observeOn","scheduleObservable","scheduleArray","schedulePromise","scheduleAsyncIterable","return","scheduleIterable","scheduleReadableStreamLike","scheduled","count","seen","reset","on","take","objWithPropertyToExtract","key","getClosureSafeProperty","target","hasOwnProperty","token","stringify","overriddenName","res","newLineIndex","substring","before","after","__forward_ref__","forwardRefFn","forwardRef","type","isForwardRef","code","Math","abs","formatRuntimeError","String","renderStringify","injectorName","injectorDetails","RuntimeError","stringifyForError","msg","actual","expected","comparison","opts","providedIn","factory","options","providers","imports","getOwnDefinition","NG_PROV_DEF","NG_INJECTABLE_DEF","field","NG_INJ_DEF","NG_INJECTOR_DEF","ɵprov","ɵinj","ngInjectableDef","ngInjectorDef","InjectFlags","be","_injectImplementation","impl","previous","notFoundValue","flags","injectableDef","getInjectableDef","Optional","throwProviderNotFoundError","ChangeDetectionStrategy","an","ViewEncapsulation","__globalThis","globalThis","__window","window","__self","self","WorkerGlobalScope","_global","global","EMPTY_OBJ","EMPTY_ARRAY","NG_COMP_DEF","ɵcmp","NG_DIR_DEF","ɵdir","NG_PIPE_DEF","ɵpipe","NG_MOD_DEF","ɵmod","NG_FACTORY_DEF","ɵfac","NG_ELEMENT_ID","__NG_ELEMENT_ID__","_renderCompCount","componentDefinition","noSideEffects","declaredInputs","def","providersResolver","decls","vars","template","consts","ngContentSelectors","hostBindings","hostVars","hostAttrs","contentQueries","inputs","outputs","exportAs","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","selectors","viewQuery","features","data","encapsulation","Emulated","id","styles","_","setInput","schemas","tView","directiveTypes","directives","feature","pipeTypes","pipes","invertObject","extractDirectiveDef","extractPipeDef","getComponentDef","getDirectiveDef","getPipeDef","autoRegisterModuleById","bootstrap","declarations","exports","transitiveCompileScopes","scope","ngModuleDef","getNgModuleDef","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineDirective","ɵɵdefineComponent","pipeDef","pure","onDestroy","ngOnDestroy","throwNotFound","tNode","previousValue","currentValue","firstChange","isFirstChange","NgOnChangesFeatureImpl","definition","ngOnChanges","ngOnChangesSetInput","rememberChangeHistoryAndInvokeOnChangesHook","simpleChangesStore","getSimpleChangesStore","current","privateName","store","SIMPLE_CHANGES_STORE","setSimpleChangesStore","previousChange","SimpleChange","ɵɵNgOnChangesFeature","ngInherit","SVG_NAMESPACE","MATH_ML_NAMESPACE","DOCUMENT","document","renderer","listen","domRendererFactory3","createRenderer","hostElement","rendererType","getDocument","lView","unwrapRNode","view","nodeIndex","hostView","slotValue","isLView","lContainer","amount","viewOrContainer","instructionState","lFrame","createLFrame","bindingsEnabled","isInCheckNoChangesMode","viewToRestore","contextLView","currentTNode","getCurrentTNodePlaceholderOk","isParent","mode","bindingRootIndex","bindingStartIndex","bindingIndex","isInI18nBlock","inI18n","currentDirectiveIndex","setCurrentDirectiveIndex","tData","currentQueryIndex","declTNode","SkipSelf","parentTNode","parentLView","Host","getDeclarationTNode","allocLFrame","newView","newLFrame","firstChild","currentLFrame","childLFrame","child","selectedIndex","elementDepthCount","currentNamespace","oldLFrame","leaveDI","leaveViewLight","getTNode","namespaceHTMLInternal","directiveStart","end","directiveEnd","lifecycleHooks","directiveDef","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","hooks","callHooks","initPhase","currentView","currentNodeIndex","nodeIndexLimit","max","lastNodeIndexFound","callHook","isInitHook","hook","directive","isViewProvider","injectImplementation","canSeeViewProviders","injectImpl","native","attrs","isProc","isProceduralRenderer","namespaceURI","attrName","attrVal","setAttribute","setAttributeNS","isAnimationProp","setProperty","marker","charCodeAt","dst","src","srcMarker","mergeHostAttribute","key1","key2","markerInsertPosition","dstValue","parentLocation","location","startView","viewOffset","getParentInjectorViewOffset","parentView","includeViewProviders","oldValue","nextNgElementId","existingInjectorIndex","getInjectorIndex","firstCreatePass","injectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","hasParentInjector","parentIndex","getParentInjectorIndex","getParentInjectorView","parentData","footer","declarationViewOffset","lViewCursor","tViewType","bloomHash","bloomAdd","Self","moduleInjector","previousInjectImplementation","setInjectImplementation","get","injectRootLimpMode","notFoundValueOrThrow","Default","tokenId","createNodeInjector","bloomHashBitOrFactory","enterDI","lookupTokenUsingModuleInjector","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","NOT_FOUND","NodeInjector","getCurrentTNode","getLView","currentTView","injectableIdx","locateDirectiveOrProvider","isComponentHost","getNodeInjectable","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","endIndex","providerTokenOrDef","dirDef","isComponentDef","NodeInjectorFactory","isFactory","resolving","path","depPath","throwCyclicDependencyError","previousIncludeViewProviders","setIncludeViewProviders","directiveIndex","ngOnInit","ngDoCheck","wrappedOnChanges","preOrderHooks","preOrderCheckHooks","registerPreOrderHooks","injectorView","isFirstHostTNode","_tNode","_lView","getOrCreateInjectable","ownConstructor","ownFactory","getFactoryOf","objectPrototype","getPrototypeOf","resolveForwardRef","getFactoryDef","attrNameToInject","classes","attrsLength","isNameOnlyAttributeMarker","injectAttributeImpl","ANNOTATIONS","PARAMETERS","PROP_METADATA","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","annotationInstance","cls","defineProperty","ngMetadataName","annotationCls","values","propName","ParamDecoratorFactory","apply","ParamDecorator","annotation","unusedKey","parameters","PropDecoratorFactory","decoratorInstance","meta","unshift","Attribute","makeParamDecorator","attributeName","ɵɵinjectAttribute","_desc","ɵɵdefineInjectable","ANALYZE_FOR_ENTRY_COMPONENTS","InjectionToken","request","globalNg","ng","ɵcompilerFacade","Type","Function","list","flatten","deepForEach","size","keyValueArray","keyValueArrayIndexOf","value1","value2","arrayInsert2","start","middle","_arrayIndexOfSorted","ES5_DELEGATE_CTOR","ES2015_INHERITED_CLASS","ES2015_INHERITED_CLASS_WITH_CTOR","ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR","reflect","_reflect","Reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","paramAnnotations","newArray","concat","_ownParameters","parentCtor","typeStr","test","isDelegateCtor","tsickleCtorParams","ctorParameters","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","isType","getParentCtor","_ownAnnotations","typeOrFunc","annotations","ownAnnotations","_ownPropMetadata","propMetadata","propDecorators","keys","prop","parentPropMetadata","ownPropMetadata","hasLifecycleHook","lcProperty","guards","getter","setter","method","importUri","filePath","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","decoratorType","ctor","parentProto","THROW_IF_NOT_FOUND","DI_DECORATOR_FLAG","NG_TEMP_TOKEN_PATH","NEW_LINE","SOURCE","USE_VALUE","provide","useValue","_currentInjector","injector","former","getInjectImplementation","injectInjectorOnly","types","arg","j","flag","getInjectFlag","ɵɵinject","decorator","Inject","attachInjectFlag","policy","ReflectionCapabilities","convertDependencies","getReflect","deps","dep","attribute","host","optional","skipSelf","param","proto","reflectDependency","trustedTypes","createPolicy","createHTML","createScript","createScriptURL","html","script","url","changingThisBreaksApplicationSecurity","SafeValueImpl","actualType","getTypeName","getSanitizationBypassType","defaultDoc","inertDocumentHelper","InertDocumentHelper","DOMParser","parseFromString","trustedHTMLFromString","isDOMParserAvailable","DOMParserHelper","getInertBodyElement","body","removeChild","inertDocument","implementation","createHTMLDocument","inertHtml","createElement","appendChild","inertBodyElement","templateEl","innerHTML","inertBody","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","removeAttribute","childNode","nodeType","Node","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","match","srcset","split","_sanitizeUrl","trim","tags","sets","VOID_ELEMENTS","tagSet","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","VALID_ELEMENTS","merge","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","sanitizeChildren","traverseContent","startElement","TEXT_NODE","chars","nodeValue","sanitizedSomething","endElement","checkClobberedElement","parentNode","buf","element","tagName","nodeName","toLowerCase","elAttr","lower","sanitizeSrcset","encodeEntities","node","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","replace","inertBodyHelper","isTemplateElement","content","SecurityContext","Qe","unsafeHtml","sanitizer","getSanitizer","trustedHTMLFromStringBypass","sanitize","HTML","allowSanitizationBypassAndThrow","unwrapSafeValue","unsafeHtmlInput","getInertBodyHelper","mXSSAttempts","parsedHtml","SanitizingHtmlSerializer","getTemplateContent","safeHtml","_sanitizeHtml","unsafeStyle","STYLE","unsafeUrl","URL","unsafeResourceUrl","trustedScriptURLFromStringBypass","RESOURCE_URL","unsafeScript","trustedScriptFromStringBypass","SCRIPT","trustedScriptURLFromString","tag","ɵɵsanitizeResourceUrl","ɵɵsanitizeUrl","getUrlSanitizer","MONKEY_PATCH_KEY_NAME","readPatchedData","ERROR_ORIGINAL_ERROR","console","handleError","originalError","_findOriginalError","errorLogger","ERROR_LOGGER","defaultErrorLogger","getErrorLogger","_console","getOriginalError","COMMENT_DISALLOWED","COMMENT_DELIMITER","defaultScheduler","requestAnimationFrame","ownerDocument","defaultView","RendererStyleFlags2","Wt","_icuContainerIterate","tIcuContainerNode","isLContainer","getNearestLContainer","container","action","lNodeToHandle","beforeNode","isComponent","rNode","nativeAppendChild","nativeInsertBefore","nativeRemoveNode","destroyNode","parentRElement","anchor","applyToElementOrContainer","applyView","applyContainer","createText","createTextNode","setValue","textContent","createComment","text","escapeCommentText","namespace","createElementNS","declarationContainer","movedViews","declarationViewIndex","insertionLContainer","updateTransplantedViewCount","removeIndex","indexInContainer","viewToDetach","declarationLContainer","detachMovedView","removedLView","removeFromArray","removeViewFromContainer","lQueries","detachView","rootView","lViewOrLContainer","cleanUpView","firstView","destroyViewTree","toCall","callContext","executeOnDestroys","tCleanup","cleanup","lCleanup","lastLCleanupIndex","idxOrTargetGetter","listener","useCaptureOrSubIdx","removeEventListener","processCleanups","destroy","getClosestRElement","None","getNativeByTNode","isMove","insertBefore","_getInsertInFrontOfRNodeWithI18n","_processI18nInsertBefore","getInsertInFrontOfRNodeWithNoI18n","getInsertInFrontOfRNodeWithI18n","processI18nInsertBefore","childRNode","childTNode","parentRNode","getParentRElement","anchorNode","getInsertInFrontOfRNode","nativeAppendOrInsertBefore","tNodeType","getBeforeNodeForView","elIcuContainerChild","getFirstNativeNode","rNodeOrLContainer","nextRNode","projectionNodes","getProjectionNodes","getLViewParent","componentView","projection","viewIndexInContainer","nextViewIndex","firstTNodeOfView","isHostElement","nativeParent","nativeParentNode","nativeRemoveChild","isProjection","rawSlotValue","attachPatchData","applyNodes","icuContainerIterate","applyProjectionRecursive","projectionNext","tProjectionNode","componentLView","nodeToProjectOrRNodes","componentNode","newValue","style","cssText","className","classToSearch","startingIndex","foundIndex","NG_TEMPLATE_SELECTOR","cssClassToMatch","isProjectionMode","classIndexOf","currentSelector","selector","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","hasTagAndTypeMatch","isPositive","selectorAttrValue","isCssClassMatching","attrIndexInNode","findAttrIndexInNode","isInlineTemplate","nodeAttrValue","compareAgainstClassName","bindingsMode","maybeAttrName","attr","matchTemplateAttribute","isNodeMatchingSelector","selectorListLoop","currentSelectorInList","isNegativeMode","chunk","currentChunk","valueOrMarker","attrValue","maybeWrapInNotSelector","NO_CHANGE","delta","selectIndexInternal","getTView","getSelectedIndex","checkNoChangesMode","executeCheckHooks","executeInitAndCheckHooks","setSelectedIndex","tStylingRange","queryStartIdx","directiveDefIdx","setCurrentQueryIndex","tHostNode","rendererFactory","resetPreOrderHookFlags","createTNodeAtIndex","getCurrentParentTNode","setCurrentTNode","isCurrentTNodeParent","tParent","insertBeforeIndex","directiveStylingLast","propertyBindings","mergedAttrs","localNames","initialInputs","tViews","stylesWithoutHost","residualStyles","classesWithoutHost","residualClasses","classBindings","styleBindings","createTNode","numSlotsToAlloc","initialValue","allocIdx","enterView","executeViewQueryFn","templateFn","executeTemplate","staticContentQueries","refreshContentQueries","staticViewQueries","components","hostLView","renderComponent","renderChildComponents","incompleteFirstPass","leaveView","isInCheckNoChangesPass","setBindingIndex","hooksInitPhaseCompleted","incrementInitPhaseFlags","getFirstLContainer","getNextLContainer","movedLView","markTransplantedViewsForRefresh","embeddedLView","embeddedTView","viewAttachedToChangeDetector","refreshView","refreshEmbeddedViews","hostBindingOpCodes","opCode","directiveIdx","bindingRootIndx","hostBindingFn","setBindingRootForHostBindings","processHostBindingOpCodes","refreshComponent","refreshChildComponents","firstUpdatePass","normalExecutionPath","creationModeIsActive","isCreationMode","begin","renderView","rf","prevSelectedIndex","isUpdatePhase","isContentQueryHost","getBindingsEnabled","getOrCreateNodeInjectorForNode","addComponentLogic","setInputsFromAttrs","getComponentLViewByIndex","instantiateAllDirectives","elementIndex","getCurrentDirectiveIndex","dirIndex","invokeHostBindingsInCreationMode","invokeDirectivesHostBindings","viewData","localRefExtractor","localIndex","createTView","constsOrFactory","initialViewLength","createViewBlueprint","queries","fill","expandoStartIndex","directiveRegistry","pipeRegistry","cleanupFn","getOrCreateLViewCleanup","getOrCreateTViewCleanup","inputAliasMap","propStore","internalName","nativeOnly","dataValue","inputData","setInputsForProperty","viewIndex","childComponentLView","markDirtyIfOnPush","mapPropName","localRefs","hasDirectives","registry","matches","isNodeMatchingSelectorList","diPublicInInjector","markAsComponentHost","findDirectiveDefMatches","exportsMap","initTNodeFlags","preOrderHooksFound","preOrderCheckHooksFound","allocExpando","mergeHostAttrs","configureViewWithDirective","saveNameToExportMap","lifeCycleHooks","tViewData","tNodeAttrs","inputsFromAttrs","inputsStore","outputsStore","directiveInputs","generateInitialInputs","generatePropertyAliases","initializeInputAndOutputAliases","cacheMatchingLocalNames","directiveVarsIdx","elementIndx","lastSelectedElementIdx","hostTNode","numberOfDirectives","directiveFactory","nodeInjectorFactory","registerHostBindingOpCodes","getOrCreateTComponentView","addToViewTree","createLView","setElementAttribute","strValue","initialInputData","inputsToStore","hostNative","componentHostIdx","refreshContainsDirtyView","componentTView","syncViewWithBlueprint","isRootView","rootContext","rootComponent","readPatchedLView","renderComponentOrTemplate","tickRootContext","viewQueryFn","component","CLEAN_PROMISE","currentDef","unwrapLView","errorHandler","ErrorHandler","getNativeByIndex","updateTextNode","writeToHost","concatStringsWithSpace","INJECTOR","INJECTOR_SCOPE","NOT_YET","CIRCULAR","NULL_INJECTOR","NullInjector","defType","additionalProviders","createInjectorWithoutInjectorInstances","_resolveInjectorDefTypes","R3Injector","getNullInjector","Map","Set","dedupStack","provider","processProvider","injectorDef","processInjectorType","records","set","makeRecord","record","destroyed","_destroyed","assertNotDestroyed","service","clear","injectorDefTypes","previousInjector","setCurrentInjector","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","injectorErrorName","tokenPath","charAt","substr","parts","JSON","formatError","NG_TOKEN_PATH","catchInjectorError","tokens","defOrWrappedDef","parents","getInjectorDef","ngModule","isDuplicate","importTypesWithProviders","imported","defProviders","injectorType","ngModuleType","isTypeProvider","isValueProvider","providerToFactory","providerToRecord","multi","multiRecord","injectArgs","hasOnDestroy","has","paramLength","inheritedInjectableDef","typeName","warn","getInheritedInjectableDef","getUndecoratedInjectableFactory","unwrappedProvider","useFactory","isFactoryProvider","useExisting","isExistingProvider","classRef","useClass","hasDeps","Injector","createInjector","registerPostOrderHooks","superType","getSuperType","shouldInheritFields","inheritanceChain","superDef","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","fillProperties","animation","defData","ɵɵInheritDefinitionFeature","mergeHostAttrsAcrossInheritance","prevViewQuery","ctx","prevContentQueries","prevHostBindings","COPY_DIRECTIVE_FIELDS","COPY_COMPONENT_FIELDS","defAny","_symbolIterator","getOwnPropertyNames","entries","isJsObject","is","exp1","exp2","different","bindingUpdated","exp3","bindingUpdated2","exp4","nextBindingIndex","elementAttributeInternal","getSelectedTNode","ɵɵattribute","isBindingUpdated","getBindingIndex","prefix","v0","suffix","i0","v1","incrementBindingIndex","i1","v2","bindingUpdated3","i2","v3","bindingUpdated4","i3","v4","i4","v5","i5","v6","i6","v7","interpolatedValue","interpolation1","ɵɵattributeInterpolate1","interpolation2","ɵɵattributeInterpolate2","interpolation3","ɵɵattributeInterpolate3","interpolation4","ɵɵattributeInterpolate4","interpolation5","ɵɵattributeInterpolate5","interpolation6","ɵɵattributeInterpolate6","interpolation7","ɵɵattributeInterpolate7","interpolation8","ɵɵattributeInterpolate8","interpolated","interpolationV","ɵɵattributeInterpolateV","attrsIndex","localRefsIndex","adjustedIndex","tViewConsts","getOrCreateTNode","getConstant","resolveDirectives","templateFirstCreatePass","comment","createLContainer","isDirectiveHost","createDirectivesInstances","saveResolvedLocalsInData","load","getContextLView","angularCoreDiEnv","ɵɵdefineInjector","ɵɵinvalidFactoryDep","Injectable","makeDecorator","ngFactoryDef","compiler","compileInjectable","srcMeta","compilerMeta","typeArgumentCount","isUseClassProvider","isUseFactoryProvider","KC","Mg","isUseExistingProvider","getInjectableMetadata","getCompilerFacade","compileFactory","reflectDependencies","FactoryTarget","configurable","elementPropertyInternal","ɵɵproperty","isClassBased","property","createElementNode","getNamespace","computeStaticStyling","elementStart","elementStartFirstCreatePass","setUpAttributes","writeDirectClass","writeDirectStyle","getElementDepthCount","increaseElementDepthCount","executeContentQueries","setCurrentTNodeAsNotParent","decreaseElementDepthCount","elementEnd","hasClassInput","setDirectiveInputsWhichShadowsStyling","hasStyleInput","ɵɵelementStart","ɵɵelementEnd","elementContainerStartFirstCreatePass","ɵɵelementContainerStart","ɵɵelementContainerEnd","isObservable","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","ɵɵlistener","loadComponentRenderer","getCurrentDirectiveDef","ɵɵsyntheticHostListener","isTNodeDirectiveHost","processOutputs","lCleanupIndex","existingListener","tNodeIdx","cleanupEventName","listenerIdxInLCleanup","findExistingListener","__ngLastListenerFn__","__ngNextListenerFn__","wrapListener","addEventListener","propsLength","directiveInstance","idx","profiler","wrapWithPreventDefault","markViewDirty","executeListenerWithErrorHandling","nextListenerFn","wrapListenerIn_markDirtyAndPreventDefault","preventDefault","returnValue","level","nestingLevel","walkUpViews","nextContextImpl","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","ngProjectAsAttrIdx","getProjectAsAttrValue","isSelectorInSelectorList","projectionHeads","tails","componentChild","slotIndex","matchingProjectionSlotIndex","selectorIndex","applyProjection","ɵɵpropertyInterpolate1","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate2","ɵɵpropertyInterpolate3","ɵɵpropertyInterpolate4","ɵɵpropertyInterpolate5","ɵɵpropertyInterpolate6","ɵɵpropertyInterpolate7","ɵɵpropertyInterpolate8","ɵɵpropertyInterpolateV","tStylingKey","isPrevDir","isClassBinding","tStylingAtIndex","isMap","cursor","getTStylingRangePrev","getTStylingRangeNext","foundDuplicate","tStyleRangeAtCursor","isStylingMatch","setTStylingRangeNextDuplicate","setTStylingRangePrevDuplicate","tStylingKeyCursor","parserState","textEnd","keyEnd","valueEnd","startIndex","consumeClassToken","consumeWhitespace","ch","consumeStyleKey","consumeSeparator","ch1","ch2","ch3","lastChIndex","consumeQuotedText","consumeStyleValue","separator","quoteCharCode","checkStylingProperty","ɵɵstyleProp","ɵɵclassProp","checkStylingMap","styleKeyValueArraySet","styleStringParser","resetParserState","parseStyleNext","parseStyle","getLastParsedKey","getLastParsedValue","keyValueArraySet","classStringParser","parseClassNameNext","parseClassName","stylingFirstUpdatePass","updateStyling","normalizeSuffix","stringParser","hasStylingInputShadow","isInHostBindings","staticPrefix","oldKeyValueArray","newKeyValueArray","oldIndex","newIndex","oldKey","newKey","setKey","updateStylingMap","styleKeyValueArray","unwrappedValue","toStylingKeyValueArray","isHostBindings","stylingKey","hostDirectiveDef","residual","collectStylingFromTAttrs","collectStylingFromDirectives","templateStylingKey","bindings","getTemplateHeadTStylingKey","setTemplateHeadTStylingKey","collectResidual","wrapInStaticStylingKey","tStylingKeyWithStatic","isHostBinding","tBindings","tmplHead","tmplTail","isKeyDuplicateOfStatic","staticKeyValueArray","previousNode","toTStylingRange","setTStylingRangeNext","setTStylingRangePrev","markDuplicates","markDuplicateOfResidualStyling","insertTStylingBinding","currentDirective","desiredMarker","currentMarker","tRange","isStylingValuePresent","getTStylingRangeNextDuplicate","findStylingValue","getTStylingRangePrevDuplicate","isProcedural","addClass","classList","removeClass","DashCase","removeStyle","removeProperty","isImportant","endsWith","Important","setStyle","applyStyling","isPrevDirection","rawKey","containsStatics","isStylingMap","valueAtLViewIndex","keyValueArrayGet","textNative","ɵɵtextInterpolate1","ɵɵtextInterpolate","textBindingInternal","ɵɵtextInterpolate2","ɵɵtextInterpolate3","ɵɵtextInterpolate4","ɵɵtextInterpolate5","ɵɵtextInterpolate6","ɵɵtextInterpolate7","ɵɵtextInterpolate8","ɵɵtextInterpolateV","ɵɵstyleMap","valueSuffix","ɵɵstylePropInterpolate1","ɵɵstylePropInterpolate2","ɵɵstylePropInterpolate3","ɵɵstylePropInterpolate4","ɵɵstylePropInterpolate5","ɵɵstylePropInterpolate6","ɵɵstylePropInterpolate7","ɵɵstylePropInterpolate8","ɵɵstylePropInterpolateV","ɵɵhostProperty","ɵɵsyntheticHostProperty","val","floor","LOCALE_DATA","locale","normalizedLocale","normalizeLocale","getLocaleData","parentLocale","localeEn","findLocaleData","LocaleDataIndex","PluralCase","common","locales","re","pluralMapping","DEFAULT_LOCALE_ID","ELEMENT_MARKER","ICU_MARKER","I18nCreateOpCode","LOCALE_ID","tNodeInsertBeforeIndex","i18nParent","anchorRNode","previousTNodes","newTNode","existingTNode","isI18nText","isNewTNodeCreatedBefore","getInsertBeforeIndex","setInsertBeforeIndex","setI18nHandling","addTNodeAndUpdateInsertBeforeIndex","tIcu","currentCase","currentCaseLViewIndex","mergedCode","changeMask","changeMaskCounter","mutableOpCodes","rootRNode","rootIdx","textNodeIndex","parentIdx","getParentFromIcuCreateOpCode","insertInFrontOf","refIdx","getRefFromIcuCreateOpCode","getTIcu","caseIndex","getCurrentICUCaseIndex","applyMutableOpCodes","anchorIdx","commentValue","commentNodeIndex","createCommentNode","elementNodeIndex","updateOpCodes","bindingsStartIndex","checkBit","skipCodes","sanitizeFn","tNodeOrTagName","rText","applyIcuSwitchCase","applyIcuUpdateCase","activeCaseIndex","mask","applyUpdateOpCodes","update","icuExpression","bindingValue","cases","resolvedCase","plural","getLocalePluralCase","parseInt","getPluralCase","getLocaleId","getCaseIndex","applyIcuSwitchCaseRemove","removeCodes","nodeOrIcuIndex","_stack","_removes","_index","removeOpCode","enterIcu","icuContainerIteratorNext","BINDING_REGEXP","ICU_REGEXP","NESTED_ICU","ICU_BLOCK_REGEXP","SUBTEMPLATE_REGEXP","PH_REGEXP","NGSP_UNICODE_REGEXP","rootTNode","existingTNodes","createOpCodes","isICU","i18nNodeIdx","SHIFT","APPEND_EAGERLY","COMMENT","loader","ensureIcuContainerVisitorLoaded","loadIcuContainerVisitor","throwError","assertEqual","setTNodeInsertBeforeIndex","hasBinding","createTNodeAndAddOpCode","generateBindingUpdateOpCodes","str","destinationNode","bindingStart","maskIndex","sizeIndex","textParts","textValue","toMaskBit","opCodes","min","tagMatched","inTemplate","exec","bindingMask","mainBinding","addUpdateIcuSwitch","setTIcu","valueArr","nestedIcus","icuIndex","parseIcuCase","addUpdateIcuUpdate","pattern","icuType","i18nParseTextIntoPartsAndICU","binding","pos","blocks","prevPos","braceStack","results","braces","lastIndex","block","parseICUBlock","caseName","unsafeCaseHtml","inertRootNode","walkIcuTree","sharedUpdateOpCodes","depth","currentNode","addCreateNodeAndAppend","lowerAttrName","addCreateAttribute","addRemoveNode","COMMENT_NODE","isNestedIcu","icuStart","addRemoveNestedIcu","appendToParentIdx","createAtIdx","icuCreateOpCode","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICU_PLACEHOLDERS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","messageIndex","subTemplateIndex","parentTNodeIndex","existingTNodeStack","isRootTemplateMessage","removeInnerTemplateTranslation","search","RegExp","getTranslationForTemplate","msgParts","replaceNgsp","part","i18nStartFirstCreatePassProcessTextNode","icuContainerTNode","isClosing","Number","createTNodePlaceholder","i18nStartFirstCreatePass","tI18n","isComment","appendNow","applyCreateOpCodes","setInI18nBlock","ɵɵi18nStart","ɵɵi18nEnd","previousElementIndex","countBindings","i18nAttributesFirstPass","setMaskBit","hasChange","ɵɵi18nExp","applyI18n","replacements","templateIdsStack","m","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_type","_idx","i18nPostprocess","lInjectablesBlueprint","resolveProvider","providerFactory","beginIndex","ɵɵdirectiveInject","existingFactoryIndex","registerDestroyHooksIfSupported","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","factoryFn","componentProviders","multiFactoryAdd","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","contextIndex","indexInFactory","providerIsTypeProvider","providerIsClassProvider","isClassProvider","existingCallbacksIndex","isComponentProvider","lData","multiResolve","factories","componentCount","multiProviders","viewProviders","processProvidersFn","resolveComponentFactory","ERROR_COMPONENT","noComponentFactoryError","ComponentFactoryResolver","_NullComponentFactoryResolver","createElementRef","ElementRef","nativeElement","injectElementRef","Sanitizer","full","major","minor","patch","VERSION","Version","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","lNode","lViewInAContainer","lViewFirstChildTNode","collectNativeNodes","nodesInSlot","_cdRefInjectingView","rootNodes","_appRef","_attachedToViewContainer","viewRefs","destroyLView","callback","storeCleanupWithContext","markForCheck","detach","reattach","detectChanges","detectChangesInternal","checkNoChanges","setIsInCheckNoChangesMode","checkNoChangesInternal","attachToViewContainerRef","detachFromAppRef","renderDetachView","attachToAppRef","appRef","ViewRef","_view","detectChangesInRootView","checkNoChangesInRootView","viewEngine_ComponentFactoryResolver","componentDef","ComponentFactory","nonMinified","templateName","SCHEDULER","viewEngine_ComponentFactory","componentType","selectorList","stringifyCSSSelector","stringifyCSSSelectorList","isBoundToModule","toRefArray","projectableNodes","rootSelectorOrNode","rootViewInjector","createChainedInjector","RendererFactory2","hostRenderer","elementName","hostRNode","elementOrSelector","selectRootElement","ShadowDom","rElement","querySelector","locateHostElement","rootFlags","playerHandler","clean","createRootContext","rootTView","rootLView","tElementNode","viewRenderer","createRootComponentView","extractAttrsAndClassesFromSelector","nodesforSlot","from","hostFeatures","instantiateRootComponent","createRootComponent","LifecycleHooksFeature","ComponentRef","_rootLView","changeDetectorRef","RootViewRef","modules","viewEngine_NgModuleRef","_parent","_bootstrapComponents","maybeUnwrapFn","_r3Injector","componentFactoryResolver","injectFlags","destroyCbs","viewEngine_NgModuleFactory","moduleType","visited","incoming","assertSameOrNotExisting","recurse","registerNgModuleType","parentInjector","NgModuleRef","slotOffset","pureFn","getBindingRoot","updateBinding","getBinding","exp","pureFunction1Internal","pureFunction2Internal","pureFunction3Internal","pureFunction4Internal","exp5","exp6","exp7","exp8","exps","pureFunctionVInternal","returnValueIndex","lastReturnValue","bindingRoot","getPureFunctionReturnValue","pipeName","pipeFactory","pipeInstance","isPure","transform","EventEmitter","isAsync","__isAsync","emit","nextFn","errorFn","completeFn","_c","_wrapInTimeout","_results","_emitDistinctChangesOnly","symbol","QueryList","symbolIterator","changes","_changes","filter","find","some","toArray","resultsTree","identityAccessor","dirty","newResultFlat","_changesDetected","valueA","valueB","arrayEquals","first","notifyOnChanges","setDirty","TemplateRef","injectTemplateRef","ViewEngineTemplateRef","R3TemplateRef","_declarationLView","_declarationTContainer","elementRef","createEmbeddedView","declarationViewLQueries","R3_ViewRef","createTemplateRef","ViewContainerRef","injectViewContainerRef","createContainerRef","VE_ViewContainerRef","R3ViewContainerRef","_lContainer","_hostTNode","_hostLView","getViewRefs","templateRef","viewRef","insert","createComponent","componentFactoryOrType","indexOrOptions","ngModuleRef","isComponentFactory","componentFactory","R3ComponentFactory","contextInjector","componentRef","viewAttachedToContainer","prevIdx","prevLContainer","prevVCRef","adjustedIdx","_adjustIndex","containerLength","addToArray","declaredComponentLView","insertedLContainer","trackMovedView","insertView","parentNativeNode","addViewToContainer","getOrCreateViewRefs","move","viewRefsArr","detachedView","R3ViewRef","commentNode","nativeNextSibling","queryList","clone","LQuery_","tQueries","noOfInheritedQueries","viewLQueries","tQuery","getByIndex","indexInDeclarationView","LQueries_","dirtyQueriesWithMatches","getTQuery","predicate","queriesForTemplateRef","childQueryIndex","tqueryClone","TQueries_","track","tquery","metadata","_declarationNodeIndex","isApplyingToNode","matchTNode","_appliesToNextNode","crossesNgTemplate","addMatch","TQuery_","declarationNodeIdx","matchTNodeWithReadOption","getIdxOfMatchingSelector","ViewEngine_TemplateRef","nodeMatchIdx","ViewEngine_ElementRef","directiveOrProviderIdx","matchIdx","matchingIdx","createResultByTNodeType","createSpecialToken","queryIndex","lQuery","tQueryMatches","matchedNodeIdx","createResultForNode","lViewResults","materializeViewResults","collectQueryResults","embeddedLViews","getCurrentQueryIndex","unwrapElementRef","createTQuery","TQueryMetadata_","createLQuery","tViewContentQueries","saveContentQueryAndDirectiveIndex","loadQueryInternal","angularCoreEnv","r3.ɵɵattribute","r3.ɵɵattributeInterpolate1","r3.ɵɵattributeInterpolate2","r3.ɵɵattributeInterpolate3","r3.ɵɵattributeInterpolate4","r3.ɵɵattributeInterpolate5","r3.ɵɵattributeInterpolate6","r3.ɵɵattributeInterpolate7","r3.ɵɵattributeInterpolate8","r3.ɵɵattributeInterpolateV","r3.ɵɵdefineComponent","r3.ɵɵdefineDirective","r3.ɵɵdefineNgModule","r3.ɵɵdefinePipe","r3.ɵɵdirectiveInject","r3.ɵɵgetInheritedFactory","r3.ɵɵinjectAttribute","r3.ɵɵinvalidFactory","r3.ɵɵtemplateRefExtractor","r3.ɵɵNgOnChangesFeature","r3.ɵɵProvidersFeature","r3.ɵɵCopyDefinitionFeature","r3.ɵɵInheritDefinitionFeature","r3.ɵɵnextContext","r3.ɵɵnamespaceHTML","r3.ɵɵnamespaceMathML","r3.ɵɵnamespaceSVG","r3.ɵɵenableBindings","r3.ɵɵdisableBindings","r3.ɵɵelementStart","r3.ɵɵelementEnd","r3.ɵɵelement","r3.ɵɵelementContainerStart","r3.ɵɵelementContainerEnd","r3.ɵɵelementContainer","r3.ɵɵpureFunction0","r3.ɵɵpureFunction1","r3.ɵɵpureFunction2","r3.ɵɵpureFunction3","r3.ɵɵpureFunction4","r3.ɵɵpureFunction5","r3.ɵɵpureFunction6","r3.ɵɵpureFunction7","r3.ɵɵpureFunction8","r3.ɵɵpureFunctionV","r3.ɵɵgetCurrentView","r3.ɵɵrestoreView","r3.ɵɵlistener","r3.ɵɵprojection","r3.ɵɵsyntheticHostProperty","r3.ɵɵsyntheticHostListener","r3.ɵɵpipeBind1","r3.ɵɵpipeBind2","r3.ɵɵpipeBind3","r3.ɵɵpipeBind4","r3.ɵɵpipeBindV","r3.ɵɵprojectionDef","r3.ɵɵhostProperty","r3.ɵɵproperty","r3.ɵɵpropertyInterpolate","r3.ɵɵpropertyInterpolate1","r3.ɵɵpropertyInterpolate2","r3.ɵɵpropertyInterpolate3","r3.ɵɵpropertyInterpolate4","r3.ɵɵpropertyInterpolate5","r3.ɵɵpropertyInterpolate6","r3.ɵɵpropertyInterpolate7","r3.ɵɵpropertyInterpolate8","r3.ɵɵpropertyInterpolateV","r3.ɵɵpipe","r3.ɵɵqueryRefresh","r3.ɵɵviewQuery","r3.ɵɵloadQuery","r3.ɵɵcontentQuery","r3.ɵɵreference","r3.ɵɵclassMap","r3.ɵɵclassMapInterpolate1","r3.ɵɵclassMapInterpolate2","r3.ɵɵclassMapInterpolate3","r3.ɵɵclassMapInterpolate4","r3.ɵɵclassMapInterpolate5","r3.ɵɵclassMapInterpolate6","r3.ɵɵclassMapInterpolate7","r3.ɵɵclassMapInterpolate8","r3.ɵɵclassMapInterpolateV","r3.ɵɵstyleMap","r3.ɵɵstyleMapInterpolate1","r3.ɵɵstyleMapInterpolate2","r3.ɵɵstyleMapInterpolate3","r3.ɵɵstyleMapInterpolate4","r3.ɵɵstyleMapInterpolate5","r3.ɵɵstyleMapInterpolate6","r3.ɵɵstyleMapInterpolate7","r3.ɵɵstyleMapInterpolate8","r3.ɵɵstyleMapInterpolateV","r3.ɵɵstyleProp","r3.ɵɵstylePropInterpolate1","r3.ɵɵstylePropInterpolate2","r3.ɵɵstylePropInterpolate3","r3.ɵɵstylePropInterpolate4","r3.ɵɵstylePropInterpolate5","r3.ɵɵstylePropInterpolate6","r3.ɵɵstylePropInterpolate7","r3.ɵɵstylePropInterpolate8","r3.ɵɵstylePropInterpolateV","r3.ɵɵclassProp","r3.ɵɵadvance","r3.ɵɵtemplate","r3.ɵɵtext","r3.ɵɵtextInterpolate","r3.ɵɵtextInterpolate1","r3.ɵɵtextInterpolate2","r3.ɵɵtextInterpolate3","r3.ɵɵtextInterpolate4","r3.ɵɵtextInterpolate5","r3.ɵɵtextInterpolate6","r3.ɵɵtextInterpolate7","r3.ɵɵtextInterpolate8","r3.ɵɵtextInterpolateV","r3.ɵɵi18n","r3.ɵɵi18nAttributes","r3.ɵɵi18nExp","r3.ɵɵi18nStart","r3.ɵɵi18nEnd","r3.ɵɵi18nApply","r3.ɵɵi18nPostprocess","r3.ɵɵresolveWindow","r3.ɵɵresolveDocument","r3.ɵɵresolveBody","r3.ɵɵsetComponentScope","r3.ɵɵsetNgModuleScope","sanitization.ɵɵsanitizeHtml","sanitization.ɵɵsanitizeStyle","sanitization.ɵɵsanitizeResourceUrl","sanitization.ɵɵsanitizeScript","sanitization.ɵɵsanitizeUrl","sanitization.ɵɵsanitizeUrlOrResourceUrl","sanitization.ɵɵtrustConstantHtml","sanitization.ɵɵtrustConstantResourceUrl","moduleQueue","isModuleWithProviders","ngDirectiveDef","getDirectiveMetadata","Directive","addDirectiveFactoryDef","compileDirective","sourceMapUrl","facade","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","typeSourceSpan","usesInheritance","extendsDirectlyFromObject","extractExportAs","viewQueries","isViewQuery","directiveMetadata","createParseSourceSpan","objPrototype","shouldAddAbstractDirective","addDirectiveDefToUndecoratedParents","splitByComma","propertyName","ann","convertToR3QueryPredicate","descendants","static","emitDistinctChangesOnly","isQueryAnn","queriesMeta","isInputAnnotation","convertToR3QueryMetadata","piece","LIFECYCLE_HOOKS","hookName","metadataName","dir","Input","makePropDecorator","bindingPropertyName","NgModule","allowDuplicateDeclarationsInRoot","compileNgModule","expandModuleWithProviders","compileInjector","compileNgModuleDefs","enqueueModuleForDelayedScoping","APP_INITIALIZER","ApplicationInitStatus","appInits","donePromise","rej","runInitializers","initialized","asyncInitPromises","initResult","observableAsPromise","all","APP_ID","APP_ID_RANDOM_PROVIDER","_randomChar","fromCharCode","random","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","Console","log","DEFAULT_CURRENCY_CODE","ngModuleFactory","componentFactories","Compiler","compileModuleSync","NgModuleFactoryR3","compileModuleAsync","compileModuleAndAllComponentsSync","declaration","ComponentFactoryR3","ModuleWithComponentFactories","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","Zone","scheduleMicroTask","enableLongStackTrace","shouldCoalesceEventChangeDetection","shouldCoalesceRunChangeDetection","assertZonePatched","_nesting","_outer","_inner","TaskTrackingZoneSpec","fork","longStackTraceZoneSpec","lastRequestAnimationFrameId","nativeRequestAnimationFrame","nativeCancelAnimationFrame","cancelAnimationFrame","unpatchedRequestAnimationFrame","__symbol__","unpatchedCancelAnimationFrame","getNativeRequestAnimationFrame","zone","delayChangeDetectionForEventsDelegate","isCheckStableRunning","fakeTopEventTask","root","scheduleEventTask","updateMicroTaskStatus","checkStable","invoke","delayChangeDetectionForEvents","properties","isAngularZone","onInvokeTask","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","onHasTask","hasTaskState","hasTask","change","_hasPendingMicrotasks","microTask","hasPendingMacrotasks","macroTask","onHandleError","runOutsideAngular","forkInnerZoneWithAngularBehavior","NgZone","isInAngularZone","run","runTask","EMPTY_PAYLOAD","cancelTask","runGuarded","hasPendingMicrotasks","isStable","onMicrotaskEmpty","onStable","onUnstable","Testability","_ngZone","_watchAngularEvents","taskTrackingZone","_didWork","_isZoneStable","assertNotInAngularZone","_runCallbacksIfReady","increasePendingRequestCount","_pendingCount","decreasePendingRequestCount","_callbacks","timeoutId","doneCb","pending","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","using","exactMatch","TestabilityRegistry","_testabilityGetter","addToWindow","registerApplication","testability","_applications","unregisterApplication","delete","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","_platform","_NoopGetTestability","ALLOW_MULTIPLE_PLATFORMS","parentPlatformFactory","desc","extraProviders","platform","getPlatform","injectedProviders","PlatformRef","inits","createPlatform","requiredToken","assertPlatform","_injector","bootstrapModuleFactory","moduleFactory","ngZone","ngZoneOption","extra","NoopNgZone","ngZoneEventCoalescing","ngZoneRunCoalescing","getNgZone","ngZoneInjector","moduleRef","exceptionHandler","_modules","_callAndReportToErrorHandler","initStatus","localeId","assertDefined","setLocaleId","_moduleDoBootstrap","bootstrapModule","compilerOptions","optionsReducer","R3NgModuleFactory","compileNgModuleFactory","ApplicationRef","ngDoBootstrap","_destroyListeners","module","objs","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_onMicrotaskEmptySubscription","tick","isCurrentlyStable","_stable","stableSub","unstableSub","assertInAngularZone","popScheduler","defaultValue","popNumber","sources","mergeAll","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","refCount","hasCompleted","hasErrored","cancelReset","resetAndUnsubscribe","conn","dest","handleReset","share","componentOrFactory","componentTypes","cf","compRef","NULL","testabilityRegistry","_loadComponent","_runningTick","_views","attachView","_bootstrapListeners","viewCount","_devMode","ChangeDetectorRef","injectChangeDetectorRef","isPipe","createViewRef","supports","isListLikeIterable","trackByFn","DefaultIterableDiffer","trackByIdentity","_trackByFn","forEachItem","_itHead","forEachOperation","nextIt","nextRemove","_removalsHead","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","offset","forEachPreviousItem","_previousItHead","_nextPrevious","forEachAddedItem","_additionsHead","_nextAdded","forEachMovedItem","_movesHead","_nextMoved","forEachRemovedItem","forEachIdentityChange","_identityChangesHead","_nextIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","iterateListLike","_truncate","isDirty","_additionsTail","_movesTail","_removalsTail","_identityChangesTail","previousRecord","_itTail","_prev","_remove","_unlinkedRecords","_reinsertAfter","_linkedRecords","_moveAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","nextRecord","_addToRemovals","_unlink","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_head","_tail","_nextDup","_prevDup","atOrAfterIndex","duplicates","_DuplicateItemRecordList","recordList","isEmpty","moveOffset","DefaultKeyValueDiffer","_changesHead","_mapHead","_previousMapHead","forEachChangedItem","_nextChanged","_appendAfter","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","_records","_changesTail","KeyValueChangeRecord_","_addToAdditions","_addToChanges","k","IterableDiffers","DefaultIterableDifferFactory","copied","defaultIterableDiffersFactory","getTypeNameForDebugging","KeyValueDiffers","DefaultKeyValueDifferFactory","defaultKeyValueDiffersFactory","kv","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","platformCore","createPlatformFactory","APPLICATION_MODULE_PROVIDERS","queue","$localize","getGlobalLocale","ApplicationModule","_DOM","PlatformLocation","historyGo","relativePosition","BrowserPlatformLocation","useBrowserPlatformLocation","LOCATION_INITIALIZED","_doc","_init","_history","history","getBaseHrefFromDOM","getDOM","getBaseHref","onPopState","getGlobalEventTarget","onHashChange","href","protocol","hostname","port","pathname","hash","newPath","pushState","state","title","supportsState","replaceState","forward","back","go","getState","createBrowserPlatformLocation","slashes","startsWith","pathEndIdx","params","LocationStrategy","platformLocation","PathLocationStrategy","origin","provideLocationStrategy","APP_BASE_HREF","_platformLocation","_baseHref","_removeListenerFns","prepareExternalUrl","internal","joinWithSlash","includeHash","normalizeQueryParams","queryParams","externalUrl","HashLocationStrategy","Location","platformStrategy","_platformStrategy","browserBaseHref","stripTrailingSlash","_stripIndexHtml","ev","_subject","normalize","isCurrentPathEqualTo","query","baseHref","_stripBaseHref","_notifyUrlChangeListeners","onUrlChange","_urlChangeListeners","_urlChangeSubscription","onThrow","onReturn","createLocation","Plural","Ze","ɵgetLocalePluralCase","NgLocaleLocalization","NgLocalization","getPluralCategory","Zero","One","Two","Few","Many","CommonModule","ViewportScroller","BrowserViewportScroller","setOffset","getScrollPosition","supportsScrolling","pageXOffset","pageYOffset","scrollToPosition","position","scrollTo","scrollToAnchor","elSelected","documentResult","getElementById","getElementsByName","createTreeWalker","createShadowRoot","attachShadow","treeWalker","NodeFilter","SHOW_ELEMENT","shadowRoot","findAnchorFromDocument","scrollToElement","attemptFocus","setHistoryScrollRestoration","scrollRestoration","supportScrollRestoration","rect","getBoundingClientRect","left","top","focusTarget","focus","activeElement","scrollRestorationDescriptor","getScrollRestorationProperty","writable","getOwnPropertyDescriptor","adapter","setRootDomAdapter","BrowserDomAdapter","onAndCancel","evt","dispatchEvent","doc","getDefaultDocument","createHtmlDocument","isElementNode","isShadowRoot","DocumentFragment","baseElement","getAttribute","getBaseElementHref","urlParsingNode","pathName","relativePath","resetBaseElement","getUserAgent","navigator","userAgent","getCookie","cookieStr","encodeURIComponent","cookie","eqIndex","cookieName","cookieValue","decodeURIComponent","parseCookieValue","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","transitionId","dom","querySelectorAll","setTestabilityGetter","BrowserGetTestability","testabilities","didWork","decrement","didWork_","parentElement","BrowserXhr","build","XMLHttpRequest","EVENT_MANAGER_PLUGINS","EventManager","plugins","p","manager","_plugins","reverse","plugin","_findPluginFor","addGlobalEventListener","getZone","_eventNameToPlugin","SharedStylesHost","addStyles","additions","_stylesSet","onStylesAdded","getAllStyles","DomSharedStylesHost","_hostNodes","head","_addStylesToHost","styleNodes","styleEl","addHost","hostNode","removeHost","styleNode","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","compId","flattenStyles","eventHandler","event","DomRendererFactory2","eventManager","sharedStylesHost","appId","defaultRenderer","DefaultDomRenderer2","rendererByCompId","EmulatedEncapsulationDomRenderer2","applyToHost","ShadowDomRenderer","newChild","refChild","oldChild","selectorOrNode","preserveContent","namespaceUri","removeAttributeNS","decoratePreventDefault","contentAttr","componentShortId","shimContentAttribute","hostAttr","shimHostAttribute","hostEl","nodeOrShadowRoot","DomEventsPlugin","EventManagerPlugin","MODIFIER_KEYS","_keyMap","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","O","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","metaKey","shiftKey","KeyEventsPlugin","parseEventName","parsedEvent","outsideHandler","eventCallback","fullKey","domEventName","_normalizeKey","modifierName","keyIdentifier","getEventKey","modifierGetter","getEventFullKey","keyName","platformBrowser","makeCurrent","ɵsetDocument","BROWSER_MODULE_PROVIDERS","BrowserModule","parentModule","_value","getValue","objectProto","getKeys","popResultSelector","observables","isPOJO","argsArgArrayOrObject","valueTransform","maybeSchedule","remainingFirstValues","hasFirstValue","combineLatestInit","createObject","callOrApply","mapOneOrManyArgs","execute","EmptyError","concatAll","observableFactory","_refCount","refCounter","sharedConnection","_connection","connect","subjectFactory","getSubject","_teardown","higherOrderRefCount","innerSubscriber","innerIndex","outerIndex","accumulator","seed","hasSeed","emitOnNext","emitBeforeComplete","hasState","scanInternals","arguments","handledResult","innerSub","syncUnsub","catchError","errorFactory","defaultErrorFactory","hasValue","hasDefaultValue","defaultIfEmpty","throwIfEmpty","tapObserver","isUnsub","finalize","RouterEvent","navigationTrigger","restoredState","urlAfterRedirects","reason","shouldActivate","route","snapshot","routeConfig","routerEvent","PRIMARY_OUTLET","getAll","ParamsAsMap","NAVIGATION_CANCELING_ERROR","segments","segmentGroup","pathMatch","hasChildren","posParams","segment","consumed","k1","k2","equalArraysOrString","aSorted","sort","bSorted","every","of","pathCompareMap","exact","containee","matrixParams","equalPath","matrixParamsMatch","numberOfChildren","children","equalSegmentGroups","subset","containsSegmentGroup","paramCompareMap","shallowEqual","ignored","paths","fragment","containsSegmentGroupHelper","containeePaths","containerPaths","containeeSegment","queryParamMap","_queryParamMap","convertToParamMap","DEFAULT_SERIALIZER","serialize","serializePaths","parameterMap","_parameterMap","serializePath","as","bs","parse","UrlParser","UrlTree","parseRootSegment","parseQueryParams","parseFragment","tree","serializeSegment","strParams","encodeUriQuery","serializeQueryParams","encodeURI","encodeUriFragment","DefaultUrlSerializer","primary","childOutlet","mapChildrenIntoArray","encodeUriString","decode","encodeUriSegment","serializeMatrixParams","SEGMENT_RE","QUERY_PARAM_RE","QUERY_PARAM_VALUE_RE","remaining","consumeOptional","peekStartsWith","UrlSegmentGroup","parseChildren","parseQueryParam","parseSegment","capture","parseParens","matchSegments","UrlSegment","parseMatrixParams","parseParam","valueMatch","matchQueryParams","matchUrlQueryParamValue","decodedKey","decodeQuery","decodedVal","currentVal","allowPrimary","outletName","_root","pathFromRoot","findNode","siblings","findPath","cc","outlet","Tree","setRouterState","urlTree","activated","ActivatedRouteSnapshot","RouterStateSnapshot","TreeNode","createEmptyStateSnapshot","emptyUrl","BehaviorSubject","emptyParams","emptyData","emptyQueryParams","ActivatedRoute","RouterState","futureSnapshot","_futureSnapshot","_routerState","paramMap","_paramMap","paramsInheritanceStrategy","inheritingStartingFrom","curr","_resolvedData","flattenInherited","urlSegment","lastPathIndex","_urlSegment","_lastPathIndex","_resolve","serializeNode","currentSnapshot","nextSnapshot","shallowEqualArrays","equalUrlParams","equalSegments","equalParamsAndUrlSegments","routeReuseStrategy","prevState","shouldReuseRoute","createNode","createOrReuseChildren","shouldAttach","detachedRouteHandle","retrieve","createActivatedRoute","command","outlets","segmentPath","oldSegmentGroup","newSegmentGroup","qp","replaceSegment","oldSegment","newSegment","isAbsolute","numberOfDoubleDots","commands","isMatrixParams","cmdWithOutlet","isCommandWithOutlets","toRoot","processChildren","updateSegmentGroupChildren","currentCommandIndex","currentPathIndex","noMatch","pathIndex","commandIndex","compare","prefixedWith","slicedCommands","g","createNewSegmentGroup","getOutlets","updateSegmentGroup","createNewSegmentChildren","futureState","currState","forwardEvent","activate","parentContexts","futureRoot","currRoot","deactivateChildRoutes","advanceActivatedRoute","activateChildRoutes","futureNode","currNode","contexts","nodeChildrenAsMap","futureChild","childOutletName","deactivateRoutes","childName","deactivateRouteAndItsChildren","parentContext","future","getContext","shouldDetach","detachAndStoreRouteSubtree","deactivateRouteAndOutlet","onOutletDeactivated","deactivate","attachRef","resolver","activateRoutes","ActivationEnd","ChildActivationEnd","getOrCreateContext","stored","onOutletReAttached","attach","_loadedConfig","parentLoadedConfig","cmpFactoryResolver","activateWith","routes","INITIAL_VALUE","switchMap","combineLatest","startWith","scan","acc","isPending","innerAcc","isUrlTree","ChildrenOutletContexts","onChildOutletCreated","onChildOutletDestroyed","OutletContext","RouterOutlet","changeDetector","isActivated","activatedRoute","_activatedRoute","activatedRouteData","cmp","detachEvents","ref","attachEvents","deactivateEvents","childContexts","OutletInjector","activateEvents","ɵEmptyOutletComponent","parentPath","validateNode","getFullPath","fullPath","validateConfig","currentRoute","standardizeConfig","loadChildren","EmptyOutletComponent","sortedConfig","getOutlet","matched","consumedSegments","lastChild","positionalParamSegments","matcher","defaultUrlMatcher","slicedSegments","relativeLinkResolution","emptyPathMatch","containsEmptyPathMatchesWithNamedOutlets","primarySegment","_sourceSegment","_segmentIndexShift","createChildrenForEmptyPaths","containsEmptyPathMatches","addEmptyPathsToChildrenIfNeeded","rawSegment","NoMatch","newTree","AbsoluteRedirect","redirectTo","configLoader","urlSerializer","splitGroup","rootSegmentGroup","expanded$","expandSegmentGroup","createUrlTree","squashSegmentGroup","allowRedirects","noMatchError","rootCandidate","expandChildren","expandSegment","childOutlets","concatMap","sortedRoutes","sortByMatchingOutlets","expandedChild","takeLast","expandSegmentAgainstRoute","noLeftoversInUrl","isImmediateMatch","matchSegmentAgainstRoute","expandSegmentAgainstRouteUsingRedirect","expandWildCardWithParamsAgainstRouteUsingRedirect","expandRegularSegmentAgainstRouteUsingRedirect","applyRedirectCommands","absoluteRedirect","lineralizeSegments","newSegments","group","rawSegmentGroup","cfg","rawSlicedSegments","getChildConfig","routerConfig","childModule","childConfig","splitSegmentGroup","matchedOnOutlet","cs","LoadedRouterConfig","runCanLoadGuards","shouldLoadResult","navigationCancelingError","canLoadFails","canLoad","injectionToken","guard","guardVal","isCanLoad","wrapIntoObservable","prioritizedGuardValue","tap","namedOutletsRedirect","applyRedirectCreatreUrlTree","newRoot","createSegmentGroup","createQueryParams","redirectToParams","actualParams","sourceName","updatedSegments","createSegments","redirectToSegments","actualSegments","findPosParam","findOrReturn","redirectToUrlSegment","newChildren","childCandidate","mergeTrivialChildren","getChildRouteGuards","getClosestLoadedConfig","futurePath","checks","canDeactivateChecks","canActivateChecks","prevChildren","shouldRun","shouldRunGuardsAndResolvers","runGuardsAndResolvers","CanActivate","CanDeactivate","getRouteGuards","rootComponentType","recognize","processSegmentGroup","freeze","rootNode","routeState","inheritParamsAndData","routeNode","inheritedParamsDataResolve","processSegment","outletChildren","mergedChildren","mergeEmptyPathMatches","sortActivatedRouteSnapshots","nodes","localeCompare","processSegmentAgainstRoute","getData","getSourceSegmentGroup","getPathIndexShift","getResolve","mergedNodes","hasEmptyPathConfig","duplicateEmptyPathNode","resultNode","mergedNode","nextResult","detachedTree","ROUTES","onLoadStartListener","onLoadEndListener","_loader$","loadRunner","moduleFactory$","loadModuleFactory","ConnectableObservable","NgModuleFactory","shouldProcessUrl","extract","newUrlPart","wholeUrl","runExtras","exactMatchOptions","subsetMatchOptions","Router","rootContexts","defaultMalformedUriErrorHandler","beforePreactivation","defaultRouterHook","afterPreactivation","DefaultUrlHandlingStrategy","DefaultRouteReuseStrategy","isNgZoneEnabled","resetConfig","currentUrlTree","createEmptyUrlTree","rawUrlTree","browserUrlTree","RouterConfigLoader","triggerEvent","RouteConfigLoadStart","RouteConfigLoadEnd","routerState","createEmptyState","transitions","targetPageId","currentRawUrl","extractedUrl","urlHandlingStrategy","rawUrl","extras","targetSnapshot","currentRouterState","targetRouterState","guardsResult","navigations","setupNavigations","processNavigations","browserPageId","ɵrouterPageId","eventsSubject","events","completed","errored","currentNavigation","initialUrl","trigger","previousNavigation","lastSuccessfulNavigation","urlTransition","navigated","onSameUrlNavigation","isBrowserTriggeredNavigation","transition","NavigationStart","serializeUrl","ApplyRedirects","applyRedirectsFn","applyRedirects","finalUrl","serializer","Recognizer","newObservableError","recognizeFn","urlUpdateStrategy","skipLocationChange","setBrowserUrl","routesRecognized","RoutesRecognized","navStart","replaceUrl","switchTap","navigationId","appliedUrlTree","guardsStart","GuardsCheckStart","getAllRouteGuards","futureRSS","currRSS","currARS","canDeactivate","getToken","isCanDeactivate","runCanDeactivate","runCanDeactivateChecks","isBoolean","ChildActivationStart","fireChildActivationStart","ActivationStart","fireActivationStart","futureARS","canActivateChildGuardsMapped","canActivateChildGuards","canActivateChild","getCanActivateChild","defer","isCanActivateChild","runCanActivateChild","canActivate","canActivateObservables","isCanActivate","runCanActivate","runCanActivateChecks","checkGuards","guardsEnd","GuardsCheckEnd","restoreHistory","cancelNavigationTransition","resolveStart","ResolveStart","dataResolved","canActivateChecksResolved","getResolver","resolveNode","resolvedData","runResolve","resolveData","resolveEnd","ResolveEnd","createRouterState","ActivateRoutes","isNavigationCancelingError","redirecting","navCancel","NavigationCancel","mergedTree","scheduleNavigation","navError","NavigationError","ee","resetRootComponentType","setTransition","initialNavigation","setUpLocationChangeListener","navigateByUrl","locationSubscription","stateCopy","parseUrl","getCurrentNavigation","lastSuccessfulId","dispose","disposed","navigationExtras","relativeTo","queryParamsHandling","preserveFragment","q","removeEmptyProps","nav","Navigation","cmd","cmdIdx","urlPart","partIndex","computeNavigation","startingPosition","Position","modifier","ci","dd","createPositionApplyingDoubleDots","findStartingPosition","navigate","validateCommands","malformedUriErrorHandler","isActive","matchOptions","containsTree","currentPageId","NavigationEnd","priorPromise","lastNavigation","browserNavPrecededByRouterNav","navToSameUrl","lastNavigationInProgress","canceledNavigationResolution","generateNgRouterState","restoringFromCaughtError","targetPagePosition","resetState","resetUrlToCurrentUrlTree","routerPageId","preload","RouterPreloader","router","preloadingStrategy","setUpPreloading","processRoutes","preloadConfig","RouterScroller","viewportScroller","scrollPositionRestoration","anchorScrolling","routerEventsSubscription","createScrollEvents","scrollEventsSubscription","consumeScrollEvents","lastId","lastSource","restoredId","scheduleScrollEvent","ROUTER_CONFIGURATION","ROUTER_FORROOT_GUARD","ROUTER_PROVIDERS","UrlSerializer","assignExtraOptionsToRouter","enableTracing","groupEnd","NoPreloading","NgProbeToken","RouterModule","provideRoutes","provideForRootGuard","createRouterScroller","PreloadingStrategy","routerNgProbeToken","RouterInitializer","getAppInitializer","ROUTER_INITIALIZER","getBootstrapListener","provideRouterInitializer","scrollOffset","platformLocationStrategy","useHash","appInitializer","initNavigation","resultOfPreactivationDone","bootstrapListener","bootstrappedComponentRef","preloader","routerScroller","AppRoutingModule","AppComponent","sendError","Gi","headers","lazyInit","line","maybeSetNormalizedName","normalizedNames","append","op","lcName","HttpHeaders","copyFrom","lazyUpdate","applyUpdate","other","base","toDelete","existing","u1","hub","getCurrentHub","__spread","exception","captureContext","syntheticException","callOnHub","originalException","Wf","__proto__","ke","eu","gt","h1","originalFunctionToString","DEFAULT_IGNORE_ERRORS","g1","_options","InboundFilters","addGlobalEventProcessor","getIntegration","client","getClient","clientOptions","getOptions","_mergeOptions","_shouldDropEvent","_isSentryError","logger","getEventDescription","_isIgnoredError","_isDeniedUrl","_getEventFilterUrl","_isAllowedUrl","ignoreInternal","_oO","ignoreErrors","_getPossibleEventMessages","denyUrls","allowUrls","jn","whitelistUrls","blacklistUrls","oO","frames","frame","filename","stacktrace","_getLastValidUrl","m1","FunctionToString","__sentry_original__","SDK_VERSION","setPrototypeOf","tt","_this","_newTarget","__extends","DSN_REGEX","ERROR_MESSAGE","D0","_fromString","_fromComponents","_validate","Dsn","withPassword","pass","publicKey","projectId","SentryError","lastPath","projectMatch","user","isNaN","installedIntegrations","integrations","accIntegration","Status","ALREADY_SEEN_ERROR","C1","backendClass","_backend","dsn","_dsn","BaseClient","hint","checkOrSetAlreadyCaught","eventId","event_id","_process","_getBackend","eventFromException","_captureEvent","promisedEvent","isPrimitive","eventFromMessage","session","_isEnabled","release","_sendSession","getTransport","_isClientDoneProcessing","close","transportFlushed","flush","enabled","_integrations","getIntegrationsToSetup","defaultIntegrations","userIntegrations","filterDuplicates","integrationsNames","alwaysLastToRun","integration","setupOnce","setupIntegration","setupIntegrations","crashed","exceptions","qf","exceptions_1_1","mechanism","handled","sessionNonTerminal","status","SessionStatus","__assign","captureSession","sendSession","SyncPromise","ticked","interval","setInterval","_numProcessing","clearInterval","prepared","uuid4","timestamp","dateTimestampInSeconds","_applyClientOptions","_applyIntegrationsMetadata","finalScope","Scope","applyToEvent","normalizeDepth","_normalizeEvent","normalized","breadcrumbs","trace","ensureNoCircularStructures","dist","environment","truncate","maxValueLength","integrationsArray","sdk","sendEvent","_processEvent","finalEvent","beforeSend","sampleRate","transport","isTransaction","recordLostEvent","Outcome","_prepareEvent","__sentry__","beforeSendResult","_ensureBeforeSendRv","processedEvent","getSession","_updateSessionFromEvent","_sendEvent","captureException","rv","nullErr","isThenable","isPlainObject","Success","RateLimit","Invalid","Failed","Unknown","NoopTransport","T1","_transport","_setupTransport","BaseBackend","_exception","_hint","_message","_level","Severity","Debug","Info","Warning","Fatal","Critical","Log","chrome","gecko","winjs","geckoEval","chromeEval","reactMinifiedRegexp","ex","popSize","framesToPop","opera10Regex","opera11Regex","lines","func","column","extractMessage","computeStackTraceFromStacktraceProp","popFrames","submatch","isNative","columnNumber","computeStackTraceFromStackProp","failed","extractSafariExtensionDetails","isSafariExtension","isSafariWebExtension","prepareFramesForEvent","exceptionFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","colno","function","in_app","lineno","isErrorEvent","eventFromStacktrace","computeStackTrace","isDOMError","isDOMException","domException","name_1","eventFromString","addExceptionTypeValue","isError","isEvent","rejection","extractExceptionKeysForMessage","__serialized__","normalizeToSize","frames_1","eventFromPlainObject","addExceptionMechanism","synthetic","attachStacktrace","api","version","sdkInfo","packages","getSdkMetadataForEnvelopeHeader","sent_at","Date","toISOString","forceEnvelope","getDsn","getEnvelopeEndpointWithUrlEncodedAuth","eventType","useEnvelope","transactionSampling","samplingMethod","debug_meta","req","enhanceEventWithSdkInfo","getStoreEndpointWithUrlEncodedAuth","envelopeHeaders","itemHeaders","sample_rates","rate","cachedFetchImpl","P0","tunnel","_dsnObject","_tunnel","API","_getIngestEndpoint","getStoreEndpoint","_encodedAuth","_getEnvelopeEndpoint","clientName","clientVersion","header","dialogOptions","endpoint","getBaseApiEndpoint","encodedOptions","email","urlEncode","sentry_key","sentry_version","B1","_limit","PromiseBuffer","taskProducer","isReady","_buffer","capturedSetTimeout","getGlobalObject","isNativeFetch","fetch","fetchImpl","sandbox","hidden","contentWindow","CATEGORY_MAPPING","transaction","attachment","k0","_api","_metadata","sendClientReports","visibilityState","_flushOutcomes","BaseTransport","drain","category","_outcomes","outcomes","envelope","discarded_events","quantity","sendBeacon","supportsFetch","forget","getNativeFetchImplementation","fetch_1","credentials","keepalive","sendReport","requestType","response","_handleRateLimit","_disabledUntil","_rateLimits","now","rlHeader","raHeader","_d","headerDelay","_f","V","parseRetryAfterHeader","$1","_fetch","FetchTransport","_sendRequest","eventToSentryRequest","sessionToSentryRequest","sentryRequest","originalPayload","_isRateLimited","referrerPolicy","supportsReferrerPolicy","fetchParameters","assign","_handleResponse","G1","XHRTransport","onreadystatechange","readyState","getResponseHeader","open","setRequestHeader","send","W1","BrowserBackend","eventFromUnknownInput","transportOptions","ignoreOnError","__sentry_wrapped__","sentryWrapped","wrappedArguments","handleEvent","ignoreNextOnError","withScope","addEventProcessor","enumerable","defineProperties","j0","Breadcrumbs","sentry","xhr","addBreadcrumb","addInstrumentationHandler","_consoleBreadcrumb","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","handlerData","breadcrumb","safeJoin","keyAttrs","serializeAttribute","htmlTreeAsString","endTimestamp","__sentry_own_request__","status_code","fetchData","to","parsedLoc","parsedFrom","parsedTo","relative","K1","BrowserClient","async","getReportDialogEndpoint","onLoad","onload","injectionPoint","injectReportDialog","addSentryBreadcrumb","DEFAULT_EVENT_TARGET","Y1","TryCatch","eventTarget","_wrapTimeFunction","_wrapRAF","_wrapXHR","_wrapEventTarget","original","originalCallback","wrap","getFunctionName","originalRemoveEventListener","wrappedEventHandler","originalEventHandler","originalSend","xmlHttpRequestProps","wrapOptions","J1","GlobalHandlers","onerror","onunhandledrejection","stackTraceLimit","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","_onErrorHandlerInstalled","currentHub","hasIntegration","isFailedOwnDelivery","shouldIgnoreOnError","isString","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","captureEvent","_onUnhandledRejectionHandlerInstalled","detail","_eventFromRejectionWithPrimitive","groups","getLocationHref","eN","LinkedErrors","_key","limit","_handler","isInstanceOf","linkedErrors","_walkErrorTree","tN","Dedupe","currentEvent","_previousEvent","previousEvent","_isSameMessageEvent","_isSameExceptionEvent","currentMessage","previousMessage","_isSameFingerprint","_isSameStacktrace","currentFrames","_getFramesFromEvent","previousFrames","frameA","frameB","previousException","_getExceptionFromEvent","currentException","currentFingerprint","fingerprint","previousFingerprint","nN","UserAgent","referrer","Referer","CoreIntegrations","logErrors","SentryErrorHandler","extractedError","_extractError","showDialog","getScope","getUser","lastEventId","showReportDialog","Sentry","extractor","defaultExtractor","_defaultExtractor","errorCandidate","ngOriginalError","defaultStatus","defaultStatusText","statusText","ok","ErrorEvent","os","UnsubscriptionErrorImpl","_ctorUnsubscribe","_unsubscribe","_parentOrParents","_subscriptions","flattenUnsubscriptionErrors","len","sub","isObject","tmp","subscriptions","subscriptionIndex","errs","_enable_super_gross_mode_that_will_cause_bad_things","hostReportError","rxSubscriber","destinationOrNext","emptyObserver","syncErrorThrowable","dN","rxSubscriberSymbol","_unsubscribeAndRecycle","_parentSubscriber","_context","__tryOrSetError","__tryOrUnsub","syncErrorValue","syncErrorThrown","wrappedComplete","FilterOperator","FilterSubscriber","nextOrObserver","DoOperator","TapSubscriber","_tapError","_tapComplete","_tapNext","instrumentationInitialized","stashedStartTransaction","stashedStartTransactionOnLocationChange","getTransaction","_router","navigationEvent","strippedUrl","stripUrlQueryAndFragment","activeTransaction","getActiveTransaction","_routingSpan","finish","startChild","description","_subscription","navStart$","navEnd$","TraceService","K0","TraceDirective","_tracingSpan","componentName","__decorate","TraceModule","AppModule","bindReporter","metric","reportAllChanges","prevValue","forceReport","initMetric","observe","PerformanceObserver","supportedEntryTypes","po","getEntries","buffered","onHidden","once","onHiddenOrPageHide","firstHiddenTime","getVisibilityWatcher","timeStamp","reportedMetricIDs","NN","_reportAllChanges","isNodeEnv","performance","mark","_trackCLS","_trackLCP","_trackFID","MetricsInstrumentation","browserPerformanceTimeOrigin","entryScriptSrc","entryScriptStartTimestamp","tracingInitMarkStartTime","responseStartTimestamp","requestStartTimestamp","timeOrigin","msToSec","scripts","dataset","entry","_performanceCursor","startTime","duration","startTimestamp","entryType","addPerformanceNavigationTiming","eventEnd","_startChild","requestStart","responseEnd","responseStart","addRequest","addNavigationSpans","measureStartTimestamp","addMeasureSpans","firstHidden","shouldRecord","_measurements","fp","fcp","resourceName","initiatorType","transferSize","encodedBodySize","decodedBodySize","addResourceSpans","_trackNavigator","timeOrigin_1","ttfb","measurementTimestamp","normalizedValue","fid","setMeasurements","_tagMetricInfo","setTag","_lcpEntry","_clsEntry","onReport","report","sessionValue","sessionEntries","entryHandler","hadRecentInput","getCLS","takeRecords","effectiveType","isMeasurementValue","rtt","downlink","deviceMemory","hardwareConcurrency","visibilityWatcher","stopListening_1","disconnect","getLCP","lcp","processingStart","getFID","isFinite","defaultRequestInstrumentationOptions","traceFetch","traceXHR","tracingOrigins","DEFAULT_BROWSER_TRACING_OPTIONS","nt","idleTimeout","DEFAULT_IDLE_TIMEOUT","markBackgroundTransactions","maxTransactionDuration","routingInstrumentation","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","startingUrl","zN","BrowserTracing","_configuredIdleTimeout","_emitOptionsWarning","_metrics","_metricOptions","_getCurrentHub","shouldCreateSpanForRequest","instrumentRouting","_createRouteTransaction","SpanStatus","setStatus","FINISH_REASON_TAG","IDLE_TRANSACTION_FINISH_REASONS","registerBackgroundTabDetection","urlMap","defaultShouldCreateSpan","isMatchingPattern","shouldCreateSpan","spans","hasTracingEnabled","__span","span","setHttpStatus","spanId","Request","toTraceparent","fetchCallback","__sentry_xhr__","__sentry_xhr_span_id__","xhrCallback","instrumentOutgoingRequests","beforeNavigate","parentContextFromHeader","metaName","getMetaContent","extractTraceparentData","getHeaderContext","expandedContext","trimEnd","modifiedContext","finalContext","sampled","idleTransaction","startIdleTransaction","registerBeforeFinishCallback","addPerformanceEntries","maxDuration","adjustTransactionDuration","secToMs","addExtensionMethods","window_1","SENTRY_RELEASE","autoSessionTracking","clientClass","debug","initialScope","bindClient","initAndBind","startSession","ignoreDuration","startSessionTracking","browserInit","Integrations","tracesSampleRate","enableProdMode","__NgCli_bootstrap_1","R","startingTime","timestampInSeconds","started","Session","ipAddress","ip_address","did","username","sid","dropUndefinedKeys","user_agent","S","U","_version","getStackTop","Hub","getStack","pushScope","popScope","_lastEventId","finalHint","_invokeClient","maxBreadcrumbs","mergedBreadcrumb","w","te","finalBreadcrumb","beforeBreadcrumb","consoleSandbox","setUser","setTags","setExtras","setExtra","setContext","oldHub","makeMain","_callExtensionMethod","customSamplingContext","endSession","_sendSessionUpdate","h","P","_e","setSession","currentSession","carrier","getMainCarrier","__SENTRY__","extensions","getHubFromCarrier","setHubOnCarrier","hasHubOnCarrier","isOlderThan","activeDomain","domain","registryHubTopStack","_Oo","getHubFromActiveDomain","newScope","_breadcrumbs","_tags","_extra","_contexts","_user","_span","_session","_transactionName","_fingerprint","_eventProcessors","_requestSession","_scopeListeners","_notifyScopeListeners","requestSession","setTransactionName","getSpan","spanRecorder","updatedScope","maxCrumbs","getTraceContext","transactionName","_applyFingerprint","_notifyEventProcessors","getGlobalEventProcessors","processors","processor","final","_notifyingListeners","globalEventProcessors","TransactionSamplingMethod","samplingContext","setMetadata","tracesSampler","parentSampled","isValidSampleRate","T","transactionContext","Transaction","sample","initSpanRecorder","_experiments","maxSpans","onScope","IdleTransaction","startTransaction","_startTransaction","traceHeaders","_addTracingExtensions","packageToIntegrationMapping","mongodb","dynamicRequire","Mongo","mongoose","mysql","Mysql","pg","Postgres","mappedPackages","loadModule","moduleName","pkg","_autoloadDatabaseIntegrations","errorCallback","registerErrorInstrumentation","_pushActivity","_popActivity","transactionSpanId","maxlen","IdleTransactionSpanRecorder","timestampWithMs","SpanRecorder","_idleHub","_idleTimeout","_onScope","clearActiveTransaction","configureScope","setSpan","_initTimeout","_finished","oe","activities","Z","_beforeFinishCallbacks","keepSpan","_pingHeartbeat","end_1","heartbeatString","_prevHeartbeatString","_heartbeatCounter","_beat","_maxlen","spanContext","traceId","parentSpanId","Span","childSpan","httpStatus","spanStatus","sampledString","parent_span_id","span_id","trace_id","start_timestamp","Ok","Unauthenticated","PermissionDenied","NotFound","AlreadyExists","FailedPrecondition","ResourceExhausted","InvalidArgument","Unimplemented","Unavailable","DeadlineExceeded","InternalError","UnknownError","_hub","_trimEnd","measurements","newMetadata","Q","finishedSpans","toContext","updateWithContext","SpanClass","TRACEPARENT_REGEXP","traceparent","time","currentElem","out","height","sepLength","nextStr","_htmlElementAsString","keyAttrPairs","keyAttr","keyAttrPair","allowedAttrs","fallbackGlobalObject","lastHref","debounceTimerID","lastCapturedEvent","handlers","instrumented","originalConsoleLevel","triggerHandlers","instrumentConsole","triggerDOMHandler","globalDOMEventHandler","makeDOMEventHandler","originalAddEventListener","handlers_1","__sentry_instrumentation_handlers__","handlerForType","handlers_2","instrumentDOM","requestKeys","requestValues","xhrproto","originalOpen","ae","toUpperCase","onreadystatechangeHandler","requestPos","args_1","se","yt","readyStateArgs","instrumentXHR","supportsNativeFetch","originalFetch","getFetchMethod","getFetchUrl","instrumentFetch","supportsHistory","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","Y","me","instrumentHistory","_oldOnErrorHandler","instrumentError","_oldOnUnhandledRejectionHandler","instrumentUnhandledRejection","instrument","fetchArgs","globalListener","isContentEditable","shouldSkipDOMEvent","shouldShortcircuitPreviousDebounce","wat","Event","Element","Boolean","PREFIX","originalConsole","wrappedLevels","_enabled","Logger","crypto","msCrypto","L","getRandomValues","Uint16Array","pad","num","newMechanism","exceptionValue0","currentMechanism","mergedData","headerDate","urlPath","__sentry_captured__","mod","require","cwd","X","_hasWeakSet","WeakSet","Memo","replacementFactory","wrapped","object","event_1","isElement","currentTarget","CustomEvent","maxSize","serialized","utf8Length","jsonSize","_events","isSyntheticEvent","memo","normalizeValue","serializeValue","toJSON","getWalkSource","memoize","innerKey","walk","unmemoize","maxLength","includedKeys","defaultFunctionName","delimiter","output","isRegExp","Headers","Response","app","executor","_setResult","_state","_reject","_executeHandlers","_handlers","cachedHandlers","onfulfilled","onrejected","counter","resolvedCollection","_attachHandler","onfinally","isRejected","$","dateTimestampSource","nowSeconds","platformPerformance","getNodePerformance","getBrowserPerformance","timestampSource","threshold","performanceNow","dateNow","timeOriginDelta","timeOriginIsReliable","navigationStart","timing","navigationStartDelta"],"sources":["./node_modules/rxjs/src/internal/util/isFunction.ts","./node_modules/rxjs/src/internal/util/createErrorClass.ts","./node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","./node_modules/rxjs/src/internal/util/arrRemove.ts","./node_modules/rxjs/src/internal/Subscription.ts","./node_modules/rxjs/src/internal/config.ts","./node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts","./node_modules/rxjs/src/internal/util/reportUnhandledError.ts","./node_modules/rxjs/src/internal/util/noop.ts","./node_modules/rxjs/src/internal/NotificationFactories.ts","./node_modules/rxjs/src/internal/util/errorContext.ts","./node_modules/rxjs/src/internal/Subscriber.ts","./node_modules/rxjs/src/internal/symbol/observable.ts","./node_modules/rxjs/src/internal/util/identity.ts","./node_modules/rxjs/src/internal/Observable.ts","./node_modules/rxjs/src/internal/util/pipe.ts","./node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","./node_modules/rxjs/src/internal/Subject.ts","./node_modules/rxjs/src/internal/util/lift.ts","./node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts","./node_modules/rxjs/src/internal/operators/map.ts","./node_modules/rxjs/node_modules/tslib/tslib.es6.js","./node_modules/rxjs/src/internal/util/isArrayLike.ts","./node_modules/rxjs/src/internal/util/isPromise.ts","./node_modules/rxjs/src/internal/util/isInteropObservable.ts","./node_modules/rxjs/src/internal/util/isAsyncIterable.ts","./node_modules/rxjs/src/internal/util/throwUnobservableError.ts","./node_modules/rxjs/src/internal/symbol/iterator.ts","./node_modules/rxjs/src/internal/util/isIterable.ts","./node_modules/rxjs/src/internal/util/isReadableStreamLike.ts","./node_modules/rxjs/src/internal/observable/innerFrom.ts","./node_modules/rxjs/src/internal/util/executeSchedule.ts","./node_modules/rxjs/src/internal/operators/mergeMap.ts","./node_modules/rxjs/src/internal/operators/mergeInternals.ts","./node_modules/rxjs/src/internal/operators/mergeAll.ts","./node_modules/rxjs/src/internal/observable/empty.ts","./node_modules/rxjs/src/internal/util/args.ts","./node_modules/rxjs/src/internal/util/isScheduler.ts","./node_modules/rxjs/src/internal/operators/observeOn.ts","./node_modules/rxjs/src/internal/operators/subscribeOn.ts","./node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable.ts","./node_modules/rxjs/src/internal/observable/from.ts","./node_modules/rxjs/src/internal/scheduled/scheduled.ts","./node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts","./node_modules/rxjs/src/internal/scheduled/scheduleArray.ts","./node_modules/rxjs/src/internal/scheduled/schedulePromise.ts","./node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts","./node_modules/rxjs/src/internal/scheduled/scheduleReadableStreamLike.ts","./node_modules/rxjs/src/internal/operators/take.ts","./node_modules/rxjs/src/internal/operators/share.ts","../packages/core/src/util/property.ts","../packages/core/src/util/stringify.ts","../packages/core/src/di/forward_ref.ts","../packages/core/src/errors.ts","../packages/core/src/render3/util/stringify_utils.ts","../packages/core/src/render3/errors_di.ts","../packages/core/src/util/assert.ts","../packages/core/src/di/interface/defs.ts","../packages/core/src/di/interface/injector.ts","../packages/core/src/di/inject_switch.ts","../packages/core/src/util/closure.ts","../packages/core/src/change_detection/constants.ts","../packages/core/src/metadata/view.ts","../packages/core/src/util/global.ts","../packages/core/src/util/empty.ts","../packages/core/src/render3/fields.ts","../packages/core/src/render3/definition.ts","../packages/core/src/render3/interfaces/type_checks.ts","../packages/core/src/render3/interfaces/container.ts","../packages/core/src/render3/interfaces/view.ts","../packages/core/src/render3/definition_factory.ts","../packages/core/src/interface/simple_change.ts","../packages/core/src/render3/features/ng_onchanges_feature.ts","../packages/core/src/render3/profiler.ts","../packages/core/src/render3/namespaces.ts","../packages/core/src/render3/interfaces/document.ts","../packages/core/src/render3/interfaces/renderer.ts","../packages/core/src/render3/util/view_utils.ts","../packages/core/src/render3/state.ts","../packages/core/src/render3/hooks.ts","../packages/core/src/render3/interfaces/injector.ts","../packages/core/src/render3/util/attrs_utils.ts","../packages/core/src/render3/util/injector_utils.ts","../packages/core/src/render3/di.ts","../packages/core/src/render3/instructions/di_attr.ts","../packages/core/src/util/decorators.ts","../packages/core/src/di/metadata_attr.ts","../packages/core/src/di/injection_token.ts","../packages/core/src/metadata/di.ts","../packages/core/src/compiler/compiler_facade.ts","../packages/core/src/interface/type.ts","../packages/core/src/util/array_utils.ts","../packages/core/src/reflection/reflection_capabilities.ts","../packages/core/src/di/injector_compatibility.ts","../packages/core/src/di/metadata.ts","../packages/core/src/di/jit/util.ts","../packages/core/src/util/security/trusted_types.ts","../packages/core/src/util/security/trusted_types_bypass.ts","../packages/core/src/sanitization/bypass.ts","../packages/core/src/sanitization/inert_body.ts","../packages/core/src/sanitization/url_sanitizer.ts","../packages/core/src/sanitization/html_sanitizer.ts","../packages/core/src/sanitization/security.ts","../packages/core/src/sanitization/sanitization.ts","../packages/core/src/render3/context_discovery.ts","../packages/core/src/util/errors.ts","../packages/core/src/error_handler.ts","../packages/core/src/util/dom.ts","../packages/core/src/render3/util/misc_utils.ts","../packages/core/src/render/api_flags.ts","../packages/core/src/render3/i18n/i18n_tree_shaking.ts","../packages/core/src/render3/util/view_traversal_utils.ts","../packages/core/src/render3/node_manipulation.ts","../packages/core/src/render3/styling/class_differ.ts","../packages/core/src/render3/node_selector_matcher.ts","../packages/core/src/render3/tokens.ts","../packages/core/src/render3/instructions/advance.ts","../packages/core/src/render3/interfaces/styling.ts","../packages/core/src/render3/instructions/shared.ts","../packages/core/src/render3/styling/static_styling.ts","../packages/core/src/di/injector_token.ts","../packages/core/src/di/null_injector.ts","../packages/core/src/di/scope.ts","../packages/core/src/di/r3_injector.ts","../packages/core/src/di/injector.ts","../packages/core/src/render3/component.ts","../packages/core/src/render3/features/inherit_definition_feature.ts","../packages/core/src/render3/features/copy_definition_feature.ts","../packages/core/src/util/symbol.ts","../packages/core/src/change_detection/change_detection_util.ts","../packages/core/src/render3/bindings.ts","../packages/core/src/render3/instructions/attribute.ts","../packages/core/src/render3/instructions/interpolation.ts","../packages/core/src/render3/instructions/attribute_interpolation.ts","../packages/core/src/render3/instructions/template.ts","../packages/core/src/render3/instructions/storage.ts","../packages/core/src/di/jit/environment.ts","../packages/core/src/di/jit/injectable.ts","../packages/core/src/di/injectable.ts","../packages/core/src/render3/instructions/di.ts","../packages/core/src/render3/instructions/property.ts","../packages/core/src/render3/instructions/element.ts","../packages/core/src/render3/interfaces/node.ts","../packages/core/src/render3/instructions/element_container.ts","../packages/core/src/render3/instructions/get_current_view.ts","../packages/core/src/util/lang.ts","../packages/core/src/render3/instructions/listener.ts","../packages/core/src/render3/instructions/next_context.ts","../packages/core/src/render3/instructions/projection.ts","../packages/core/src/render3/instructions/property_interpolation.ts","../packages/core/src/render3/styling/style_binding_list.ts","../packages/core/src/render3/styling/styling_parser.ts","../packages/core/src/render3/instructions/styling.ts","../packages/core/src/render3/instructions/text.ts","../packages/core/src/render3/instructions/text_interpolation.ts","../packages/core/src/render3/instructions/class_map_interpolation.ts","../packages/core/src/render3/instructions/style_map_interpolation.ts","../packages/core/src/render3/instructions/style_prop_interpolation.ts","../packages/core/src/render3/instructions/host_property.ts","../packages/core/src/i18n/locale_en.ts","../packages/core/src/i18n/locale_data_api.ts","../packages/core/src/i18n/localization.ts","../packages/core/src/render3/interfaces/i18n.ts","../packages/core/src/render3/i18n/i18n_locale_id.ts","../packages/core/src/render3/node_manipulation_i18n.ts","../packages/core/src/render3/i18n/i18n_insert_before_index.ts","../packages/core/src/render3/i18n/i18n_util.ts","../packages/core/src/render3/i18n/i18n_apply.ts","../packages/core/src/render3/instructions/i18n_icu_container_visitor.ts","../packages/core/src/render3/i18n/i18n_parse.ts","../packages/core/src/render3/i18n/i18n_postprocess.ts","../packages/core/src/render3/instructions/i18n.ts","../packages/core/src/render3/di_setup.ts","../packages/core/src/render3/features/providers_feature.ts","../packages/core/src/linker/component_factory_resolver.ts","../packages/core/src/linker/element_ref.ts","../packages/core/src/sanitization/sanitizer.ts","../packages/core/src/version.ts","../packages/core/src/view/provider_flags.ts","../packages/core/src/render3/collect_native_nodes.ts","../packages/core/src/render3/view_ref.ts","../packages/core/src/render3/component_ref.ts","../packages/core/src/linker/ng_module_factory_registration.ts","../packages/core/src/render3/ng_module_ref.ts","../packages/core/src/render3/pure_function.ts","../packages/core/src/render3/pipe.ts","../packages/core/src/event_emitter.ts","../packages/core/src/linker/query_list.ts","../packages/core/src/linker/template_ref.ts","../packages/core/src/linker/view_container_ref.ts","../packages/core/src/render3/query.ts","../packages/core/src/render3/view_engine_compatibility_prebound.ts","../packages/core/src/render3/jit/environment.ts","../packages/core/src/render3/jit/module.ts","../packages/core/src/render3/jit/directive.ts","../packages/core/src/metadata/directives.ts","../packages/core/src/metadata/ng_module.ts","../packages/core/src/util/noop.ts","../packages/core/src/r3_symbols.ts","../packages/core/src/application_init.ts","../packages/core/src/application_tokens.ts","../packages/core/src/console.ts","../packages/core/src/i18n/tokens.ts","../packages/core/src/linker/compiler.ts","../packages/core/src/util/microtask.ts","../packages/core/src/zone/ng_zone.ts","../packages/core/src/util/raf.ts","../packages/core/src/testability/testability.ts","../packages/core/src/application_ref.ts","./node_modules/rxjs/src/internal/observable/merge.ts","../packages/core/src/util/is_dev_mode.ts","../packages/core/src/change_detection/change_detector_ref.ts","../packages/core/src/change_detection/differs/default_iterable_differ.ts","../packages/core/src/change_detection/differs/default_keyvalue_differ.ts","../packages/core/src/change_detection/differs/iterable_differs.ts","../packages/core/src/change_detection/differs/keyvalue_differs.ts","../packages/core/src/change_detection/change_detection.ts","../packages/core/src/platform_core_providers.ts","../packages/core/src/application_module.ts","../packages/common/src/dom_adapter.ts","../packages/common/src/dom_tokens.ts","../packages/common/src/location/platform_location.ts","../packages/common/src/location/util.ts","../packages/common/src/location/location_strategy.ts","../packages/common/src/location/hash_location_strategy.ts","../packages/common/src/location/location.ts","../packages/common/src/i18n/locale_data_api.ts","../packages/common/src/i18n/localization.ts","../packages/common/src/common_module.ts","../packages/common/src/viewport_scroller.ts","../packages/platform-browser/src/browser/generic_browser_adapter.ts","../packages/platform-browser/src/browser/browser_adapter.ts","../packages/common/src/cookie.ts","../packages/platform-browser/src/browser/server-transition.ts","../packages/platform-browser/src/browser/testability.ts","../packages/platform-browser/src/browser/xhr.ts","../packages/platform-browser/src/dom/events/event_manager.ts","../packages/platform-browser/src/dom/shared_styles_host.ts","../packages/platform-browser/src/dom/dom_renderer.ts","../packages/platform-browser/src/dom/events/dom_events.ts","../packages/platform-browser/src/dom/events/key_events.ts","../packages/platform-browser/src/browser.ts","../packages/common/src/platform_id.ts","./node_modules/rxjs/src/internal/observable/of.ts","../packages/platform-browser/src/browser/tools/browser.ts","./node_modules/rxjs/src/internal/BehaviorSubject.ts","./node_modules/rxjs/src/internal/util/argsArgArrayOrObject.ts","./node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts","./node_modules/rxjs/src/internal/observable/combineLatest.ts","./node_modules/rxjs/src/internal/util/createObject.ts","./node_modules/rxjs/src/internal/util/EmptyError.ts","./node_modules/rxjs/src/internal/observable/concat.ts","./node_modules/rxjs/src/internal/operators/concatAll.ts","./node_modules/rxjs/src/internal/observable/defer.ts","./node_modules/rxjs/src/internal/operators/refCount.ts","./node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","./node_modules/rxjs/src/internal/operators/switchMap.ts","./node_modules/rxjs/src/internal/operators/scanInternals.ts","./node_modules/rxjs/src/internal/operators/scan.ts","./node_modules/rxjs/src/internal/operators/filter.ts","./node_modules/rxjs/src/internal/operators/catchError.ts","./node_modules/rxjs/src/internal/operators/concatMap.ts","./node_modules/rxjs/src/internal/operators/takeLast.ts","./node_modules/rxjs/src/internal/operators/throwIfEmpty.ts","./node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts","./node_modules/rxjs/src/internal/operators/first.ts","./node_modules/rxjs/src/internal/operators/tap.ts","../packages/router/src/events.ts","../packages/router/src/shared.ts","../packages/router/src/utils/collection.ts","../packages/router/src/url_tree.ts","../packages/router/src/utils/tree.ts","../packages/router/src/router_state.ts","../packages/router/src/create_router_state.ts","../packages/router/src/create_url_tree.ts","../packages/router/src/operators/activate_routes.ts","../packages/router/src/config.ts","../packages/router/src/utils/type_guards.ts","../packages/router/src/operators/prioritized_guard_value.ts","./node_modules/rxjs/src/internal/operators/startWith.ts","../packages/router/src/router_outlet_context.ts","../packages/router/src/directives/router_outlet.ts","../packages/router/src/components/empty_outlet.ts","../packages/router/src/utils/config.ts","../packages/router/src/utils/config_matching.ts","../packages/router/src/apply_redirects.ts","./node_modules/rxjs/src/internal/operators/last.ts","../packages/router/src/utils/preactivation.ts","../packages/router/src/recognize.ts","../packages/router/src/operators/switch_tap.ts","../packages/router/src/route_reuse_strategy.ts","../packages/router/src/router_config_loader.ts","../packages/router/src/url_handling_strategy.ts","../packages/router/src/router.ts","../packages/router/src/operators/apply_redirects.ts","../packages/router/src/operators/recognize.ts","../packages/router/src/operators/check_guards.ts","../packages/router/src/operators/resolve_data.ts","./node_modules/rxjs/src/internal/operators/finalize.ts","../packages/router/src/router_preloader.ts","../packages/router/src/router_scroller.ts","../packages/router/src/router_module.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./node_modules/@sentry/angular/node_modules/tslib/tslib.es6.js","../packages/common/http/src/headers.ts","webpack:///tslib?4fb1","./node_modules/@sentry/minimal/src/index.ts","webpack:///tslib?41e4","webpack:///tslib?d792","./node_modules/@sentry/core/src/integrations/functiontostring.ts","./node_modules/@sentry/core/src/integrations/inboundfilters.ts","./node_modules/@sentry/core/src/version.ts","./node_modules/@sentry/utils/src/polyfill.ts","./node_modules/@sentry/utils/src/error.ts","./node_modules/@sentry/utils/src/dsn.ts","./node_modules/@sentry/core/src/integration.ts","./node_modules/@sentry/core/src/baseclient.ts","./node_modules/@sentry/types/src/status.ts","./node_modules/@sentry/core/src/transports/noop.ts","./node_modules/@sentry/core/src/basebackend.ts","./node_modules/@sentry/types/src/severity.ts","./node_modules/@sentry/browser/src/tracekit.ts","./node_modules/@sentry/browser/src/parsers.ts","./node_modules/@sentry/browser/src/eventbuilder.ts","./node_modules/@sentry/core/src/request.ts","./node_modules/@sentry/core/src/api.ts","./node_modules/@sentry/browser/src/transports/utils.ts","./node_modules/@sentry/utils/src/promisebuffer.ts","./node_modules/@sentry/browser/src/transports/base.ts","./node_modules/@sentry/utils/src/async.ts","./node_modules/@sentry/browser/src/transports/fetch.ts","./node_modules/@sentry/browser/src/transports/xhr.ts","./node_modules/@sentry/browser/src/backend.ts","./node_modules/@sentry/browser/src/helpers.ts","./node_modules/@sentry/browser/src/integrations/breadcrumbs.ts","./node_modules/@sentry/browser/src/client.ts","./node_modules/@sentry/browser/src/integrations/trycatch.ts","./node_modules/@sentry/browser/src/integrations/globalhandlers.ts","./node_modules/@sentry/browser/src/integrations/linkederrors.ts","./node_modules/@sentry/browser/src/integrations/dedupe.ts","./node_modules/@sentry/browser/src/integrations/useragent.ts","./node_modules/@sentry/browser/src/sdk.ts","./node_modules/@sentry/angular/src/zone.ts","./node_modules/@sentry/angular/src/errorhandler.ts","../packages/common/http/src/response.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/util/isArray.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/util/isObject.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/util/isFunction.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/Subscription.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/config.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/util/hostReportError.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/Observer.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/Subscriber.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/operators/filter.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/util/noop.ts","./node_modules/@sentry/angular/node_modules/rxjs/src/internal/operators/tap.ts","./node_modules/@sentry/angular/src/constants.ts","./node_modules/@sentry/angular/src/tracing.ts","./src/app/app.module.ts","./node_modules/@sentry/tracing/src/browser/backgroundtab.ts","./node_modules/@sentry/tracing/src/browser/web-vitals/lib/bindReporter.ts","./node_modules/@sentry/tracing/src/browser/web-vitals/lib/initMetric.ts","./node_modules/@sentry/tracing/src/browser/web-vitals/lib/generateUniqueID.ts","./node_modules/@sentry/tracing/src/browser/web-vitals/lib/observe.ts","./node_modules/@sentry/tracing/src/browser/web-vitals/lib/onHidden.ts","./node_modules/@sentry/tracing/src/browser/web-vitals/lib/getVisibilityWatcher.ts","./node_modules/@sentry/tracing/src/browser/web-vitals/getLCP.ts","./node_modules/@sentry/tracing/src/browser/metrics.ts","./node_modules/@sentry/tracing/src/browser/web-vitals/getCLS.ts","./node_modules/@sentry/tracing/src/browser/web-vitals/getFID.ts","./node_modules/@sentry/tracing/src/browser/request.ts","./node_modules/@sentry/tracing/src/browser/router.ts","./node_modules/@sentry/tracing/src/browser/browsertracing.ts","./node_modules/@sentry/tracing/src/index.ts","./node_modules/@sentry/angular/src/sdk.ts","./node_modules/@sentry/core/src/sdk.ts","./src/main.ts","./node_modules/@sentry/hub/src/session.ts","./node_modules/@sentry/hub/src/hub.ts","./node_modules/@sentry/hub/src/scope.ts","./node_modules/@sentry/tracing/src/constants.ts","./node_modules/@sentry/types/src/transaction.ts","./node_modules/@sentry/tracing/src/errors.ts","./node_modules/@sentry/tracing/src/hubextensions.ts","./node_modules/@sentry/tracing/src/idletransaction.ts","./node_modules/@sentry/tracing/src/span.ts","./node_modules/@sentry/tracing/src/spanstatus.ts","./node_modules/@sentry/tracing/src/transaction.ts","./node_modules/@sentry/tracing/src/utils.ts","./node_modules/@sentry/types/src/session.ts","./node_modules/@sentry/types/src/transport.ts","./node_modules/@sentry/utils/src/browser.ts","./node_modules/@sentry/utils/src/global.ts","./node_modules/@sentry/utils/src/instrument.ts","./node_modules/@sentry/utils/src/is.ts","./node_modules/@sentry/utils/src/logger.ts","./node_modules/@sentry/utils/src/misc.ts","./node_modules/@sentry/utils/src/node.ts","./node_modules/@sentry/utils/src/memo.ts","./node_modules/@sentry/utils/src/object.ts","./node_modules/@sentry/utils/src/stacktrace.ts","./node_modules/@sentry/utils/src/string.ts","./node_modules/@sentry/utils/src/supports.ts","./node_modules/@sentry/utils/src/syncpromise.ts","./node_modules/@sentry/utils/src/time.ts","tslib","webpack:///tslib?bc08","webpack:///tslib?03cd"],"sourcesContent":["/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n","/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n","/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered teardowns to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _teardowns: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the teardown\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown } = this;\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _teardowns } = this;\n      if (_teardowns) {\n        this._teardowns = null;\n        for (const teardown of _teardowns) {\n          try {\n            execTeardown(teardown);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a teardown to this subscription, so that teardown will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever teardown is passed to it\n   * will automatically be executed (unless the teardown itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as teardowns to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The teardown logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the teardown if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever teardown is handed to it automatically.\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._teardowns = this._teardowns ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a teardown from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same teardown instance of a function or an unsubscribable object to a `Subcription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All teardown instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The teardown to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _teardowns } = this;\n    _teardowns && arrRemove(_teardowns, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execTeardown(teardown: Unsubscribable | (() => void)) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n","type SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => number;\ntype ClearTimeoutFunction = (handle: number) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(...args) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.setTimeout || setTimeout)(...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle);\n  },\n  delegate: undefined,\n};\n","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n","import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let next: ((value: T) => void) | undefined;\n    if (isFunction(observerOrNext)) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      // The first argument is an observer object, we have to pull the handlers\n      // off and capture the owner object as the context. That is because we're\n      // going to put them all in a new destination with ensured methods\n      // for `next`, `error`, and `complete`. That's part of what makes this\n      // the \"Safe\" Subscriber.\n      ({ next, error, complete } = observerOrNext);\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n      } else {\n        context = observerOrNext;\n      }\n      next = next?.bind(context);\n      error = error?.bind(context);\n      complete = complete?.bind(context);\n    }\n\n    // Once we set the destination, the superclass `Subscriber` will\n    // do it's magic in the `_next`, `_error`, and `_complete` methods.\n    this.destination = {\n      next: next ? wrapForErrorHandling(next, this) : noop,\n      error: wrapForErrorHandling(error ?? defaultErrorHandler, this),\n      complete: complete ? wrapForErrorHandling(complete, this) : noop,\n    };\n  }\n}\n\n/**\n * Wraps a user-provided handler (or our {@link defaultErrorHandler} in one case) to\n * ensure that any thrown errors are caught and handled appropriately.\n *\n * @param handler The handler to wrap\n * @param instance The SafeSubscriber instance we're going to mark if there's an error.\n */\nfunction wrapForErrorHandling(handler: (arg?: any) => void, instance: SafeSubscriber<any>) {\n  return (...args: any[]) => {\n    try {\n      handler(...args);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(err);\n      } else {\n        // Ideal path, we report this as an unhandled error,\n        // which is thrown on a new call stack.\n        reportUnhandledError(err);\n      }\n    }\n  };\n}\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n","export function identity<T>(x: T): T {\n  return x;\n}\n","/**\n * @prettier\n */\nimport { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: Partial<Observer<T>>): Subscription;\n  subscribe(next: (value: T) => void): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * ### Example:\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { take } from 'rxjs/operators';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *    let total = 0;\n   *\n   *    await source$.forEach(value => {\n   *      total += value;\n   *      console.log('observable -> ', value);\n   *    });\n   *\n   *    return total;\n   * }\n   *\n   * getTotal().then(\n   *    total => console.log('Total:', total)\n   * )\n   *\n   * // Expected:\n   * // \"observable -> 0\"\n   * // \"observable -> 1\"\n   * // \"observable -> 2\"\n   * // \"observable -> 3\"\n   * // \"Total: 6\"\n   * ```\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe(\n        (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription?.unsubscribe();\n          }\n        },\n        reject,\n        resolve\n      );\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n","import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface ObjectUnsubscribedError extends Error {}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ObjectUnsubscribedError;\n}\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = createErrorClass(\n  (_super) =>\n    function ObjectUnsubscribedErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ObjectUnsubscribedError';\n      this.message = 'object unsubscribed';\n    }\n);\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        const copy = this.observers.slice();\n        for (const observer of copy) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    return hasError || isStopped\n      ? EMPTY_SUBSCRIPTION\n      : (observers.push(subscriber), new Subscription(() => arrRemove(observers, subscriber)));\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n   * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    const { closed } = this;\n    super.unsubscribe();\n    // Execute additional teardown if we have any and we didn't already do so.\n    !closed && this.onFinalize?.();\n  }\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n","import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n","/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n","import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n","import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n","import { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay: number,\n  repeat: true\n): void;\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay?: number,\n  repeat?: false\n): Subscription;\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay = 0,\n  repeat = false\n): Subscription | void {\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n\n  parentSubscription.add(scheduleSubscription);\n\n  if (!repeat) {\n    // Because user-land scheduler implementations are unlikely to properly reuse\n    // Actions for repeat scheduling, we can't trust that the returned subscription\n    // will control repeat subscription scenarios. So we're trying to avoid using them\n    // incorrectly within this library.\n    return scheduleSubscription;\n  }\n}\n","import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { mergeMap, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalTeardown?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    new OperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional teardown (for when the destination is torn down).\n  // Other teardown is added implicitly via subscription above.\n  return () => {\n    additionalTeardown?.();\n  };\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { take, map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Infinity] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferable to use this over `empty()`.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * ## Examples\n *\n * ### Log complete notification\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n *\n * EMPTY.subscribe({\n *   next: () => console.log('Next'),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Outputs\n * // Complete!\n * ```\n */\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n *\n * ### Emit the number 7, then complete\n *\n * ```ts\n * import { empty } from 'rxjs';\n * import { startWith } from 'rxjs/operators';\n *\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // 7\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n *\n * ```ts\n * import { empty, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\n * // if x % 2 is not equal to 1, nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return An \"empty\" Observable: emits only the complete\n * notification.\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && isFunction(value.schedule);\n}\n","/** @prettier */\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint.\n *\n * ```ts\n * import { interval, animationFrameScheduler } from 'rxjs';\n * import { observeOn } from 'rxjs/operators';\n *\n * const someDiv = document.createElement('div');\n * someDiv.style.cssText = 'width: 200px;background: #09c';\n * document.body.appendChild(someDiv);\n * const intervals = interval(10);        // Intervals are scheduled\n *                                        // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),  // ...but we will observe on animationFrame\n * )                                      // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param delay Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\n        () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\n        (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\n      )\n    );\n  });\n}\n","import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n *\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\n *\n * ![](subscribeOn.png)\n *\n * ## Example\n *\n * Given the following code:\n *\n * ```ts\n * import { of, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3);\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * // 6\n * ```\n *\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n *\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emited by Observable `a`:\n *\n * ```ts\n * import { of, merge, asyncScheduler } from 'rxjs';\n * import { subscribeOn } from 'rxjs/operators';\n *\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 4\n * // 5\n * // 6\n * // 1\n * // 2\n * // 3\n * ```\n *\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n *\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\n * @param delay A delay to pass to the scheduler to delay subscriptions\n * @return A function that returns an Observable modified so that its\n * subscriptions happen on the specified {@link SchedulerLike}.\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n","import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike | undefined): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * ### Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * ---\n *\n * ### With async scheduler\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start\n * // end\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { InteropObservable, SchedulerLike } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { SchedulerLike } from '../types';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During teardown, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n","import { SchedulerLike, ReadableStreamLike } from '../types';\nimport { Observable } from '../Observable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function scheduleReadableStreamLike<T>(input: ReadableStreamLike<T>, scheduler: SchedulerLike): Observable<T> {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n * Take the first 5 seconds of an infinite 1-second interval Observable\n * ```ts\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of `next` values to emit.\n * @return A function that returns an Observable that emits only the first\n * `count` values emitted by the source Observable, or all of the values from\n * the source if the source emits fewer than `count` values.\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? // If we are taking no values, that's empty.\n      () => EMPTY\n    : operate((source, subscriber) => {\n        let seen = 0;\n        source.subscribe(\n          new OperatorSubscriber(subscriber, (value) => {\n            // Increment the number of values we have seen,\n            // then check it against the allowed count to see\n            // if we are still letting values through.\n            if (++seen <= count) {\n              subscriber.next(value);\n              // If we have met or passed our allowed count,\n              // we need to complete. We have to do <= here,\n              // because re-entrant code will increment `seen` twice.\n              if (count <= seen) {\n                subscriber.complete();\n              }\n            }\n          })\n        );\n      });\n}\n","import { Observable } from '../Observable';\nimport { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubjectLike } from '../types';\nimport { operate } from '../util/lift';\n\nexport interface ShareConfig<T> {\n  /**\n   * The factory used to create the subject that will connect the source observable to\n   * multicast consumers.\n   */\n  connector?: () => SubjectLike<T>;\n  /**\n   * If true, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"retried\" in the event of an error.\n   * If false, when an error comes from the source it will push the error into the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\n   * or resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n   * {@link ReplaySubject} will also push its buffered values before pushing the error.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnError?: boolean | ((error: any) => Observable<any>);\n  /**\n   * If true, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"repeated\" after it is done.\n   * If false, when the source completes, it will push the completion through the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\n   * or resubscriptions will resubscribe to that same subject.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnComplete?: boolean | (() => Observable<any>);\n  /**\n   * If true, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\n   * internal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\n   * time the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\n   * again.\n   * If false, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\n   * will remain connected to the source, and new subscriptions to the result will be connected through that same subject.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnRefCountZero?: boolean | (() => Observable<any>);\n}\n\nexport function share<T>(): MonoTypeOperatorFunction<T>;\n\nexport function share<T>(options: ShareConfig<T>): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * The subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\n * if the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\n * possible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\n * note that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\n * of the source because the error or complete will be forwarded to all subscribers and their subscription will be\n * closed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\n * source. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.\n *\n * ![](share.png)\n *\n * ## Example\n * Generate new multicast Observable from the source Observable value\n * ```ts\n * import { interval } from 'rxjs';\n * import { share, map } from 'rxjs/operators';\n *\n * const source = interval(1000)\n *   .pipe(\n *         map((x: number) => {\n *             console.log('Processing: ', x);\n *             return x*x;\n *         }),\n *         share()\n * );\n *\n * source.subscribe(x => console.log('subscription 1: ', x));\n * source.subscribe(x => console.log('subscription 2: ', x));\n *\n * // Logs:\n * // Processing:  0\n * // subscription 1:  0\n * // subscription 2:  0\n * // Processing:  1\n * // subscription 1:  1\n * // subscription 2:  1\n * // Processing:  2\n * // subscription 1:  4\n * // subscription 2:  4\n * // Processing:  3\n * // subscription 1:  9\n * // subscription 2:  9\n * // ... and so on\n * ```\n *\n * ## Example with notifier factory: Delayed reset\n * ```ts\n * import { interval, timer } from 'rxjs';\n * import { share, take } from 'rxjs/operators';\n *\n * const source = interval(1000).pipe(take(3), share({ resetOnRefCountZero: () => timer(1000) }));\n *\n * const subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\n * setTimeout(() => subscriptionOne.unsubscribe(), 1300);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\n *\n * // Logs:\n * // subscription 1:  0\n * // (subscription 1 unsubscribes here)\n * // (subscription 2 subscribes here ~400ms later, source was not reset)\n * // subscription 2:  1\n * // subscription 2:  2\n * // (subscription 2 unsubscribes here)\n * // (subscription 3 subscribes here ~2000ms later, source did reset before)\n * // subscription 3:  0\n * // subscription 3:  1\n * // subscription 3:  2\n * ```\n *\n * @see {@link api/index/function/interval}\n * @see {@link map}\n *\n * @return A function that returns an Observable that mirrors the source.\n */\nexport function share<T>(options: ShareConfig<T> = {}): MonoTypeOperatorFunction<T> {\n  const { connector = () => new Subject<T>(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n  // It's necessary to use a wrapper here, as the _operator_ must be\n  // referentially transparent. Otherwise, it cannot be used in calls to the\n  // static `pipe` function - to create a partial pipeline.\n  //\n  // The _operator function_ - the function returned by the _operator_ - will\n  // not be referentially transparent - as it shares its source - but the\n  // _operator function_ is called when the complete pipeline is composed via a\n  // call to a source observable's `pipe` method - not when the static `pipe`\n  // function is called.\n  return (wrapperSource) => {\n    let connection: SafeSubscriber<T> | null = null;\n    let resetConnection: Subscription | null = null;\n    let subject: SubjectLike<T> | null = null;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n\n    const cancelReset = () => {\n      resetConnection?.unsubscribe();\n      resetConnection = null;\n    };\n    // Used to reset the internal state to a \"cold\"\n    // state, as though it had never been subscribed to.\n    const reset = () => {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      // We need to capture the connection before\n      // we reset (if we need to reset).\n      const conn = connection;\n      reset();\n      conn?.unsubscribe();\n    };\n\n    return operate<T, T>((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      // Create the subject if we don't have one yet. Grab a local reference to\n      // it as well, which avoids non-null assertations when using it and, if we\n      // connect to it now, then error/complete need a reference after it was\n      // reset.\n      const dest = (subject = subject ?? connector());\n\n      // Add the teardown directly to the subscriber - instead of returning it -\n      // so that the handling of the subscriber's unsubscription will be wired\n      // up _before_ the subscription to the source occurs. This is done so that\n      // the assignment to the source connection's `closed` property will be seen\n      // by synchronous firehose sources.\n      subscriber.add(() => {\n        refCount--;\n\n        // If we're resetting on refCount === 0, and it's 0, we only want to do\n        // that on \"unsubscribe\", really. Resetting on error or completion is a different\n        // configuration.\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n\n      // The following line adds the subscription to the subscriber passed.\n      // Basically, `subscriber === dest.subscribe(subscriber)` is `true`.\n      dest.subscribe(subscriber);\n\n      if (!connection) {\n        // We need to create a subscriber here - rather than pass an observer and\n        // assign the returned subscription to connection - because it's possible\n        // for reentrant subscriptions to the shared observable to occur and in\n        // those situations we want connection to be already-assigned so that we\n        // don't create another connection to the source.\n        connection = new SafeSubscriber({\n          next: (value) => dest.next(value),\n          error: (err) => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          },\n        });\n        from(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset<T extends unknown[] = never[]>(\n  reset: () => void,\n  on: boolean | ((...args: T) => Observable<any>),\n  ...args: T\n): Subscription | null {\n  if (on === true) {\n    reset();\n\n    return null;\n  }\n\n  if (on === false) {\n    return null;\n  }\n\n  return on(...args)\n    .pipe(take(1))\n    .subscribe(() => reset());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport function fillProperties(target: {[key: string]: string}, source: {[key: string]: string}) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n\n  if (token.name) {\n    return `${token.name}`;\n  }\n\n  const res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nexport function concatStringsWithSpace(before: string|null, after: string|null): string {\n  return (before == null || before === '') ?\n      (after === null ? '' : after) :\n      ((after == null || after === '') ? before : before + ' ' + after);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport interface ForwardRefFn {\n  (): any;\n}\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  (<any>forwardRefFn).__forward_ref__ = forwardRef;\n  (<any>forwardRefFn).toString = function() {\n    return stringify(this());\n  };\n  return (<Type<any>><any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef<T>(type: T): T {\n  return isForwardRef(type) ? type() : type;\n}\n\n/** Checks whether a function is wrapped by a `forwardRef`. */\nexport function isForwardRef(fn: any): fn is() => any {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n      fn.__forward_ref__ === forwardRef;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_DETAILS_PAGE_BASE_URL} from './error_details_base_url';\n\n/**\n * The list of error codes used in runtime code of the `core` package.\n * Reserved error code range: 100-999.\n *\n * Note: the minus sign denotes the fact that a particular code has a detailed guide on\n * angular.io. This extra annotation is needed to avoid introducing a separate set to store\n * error codes which have guides, which might leak into runtime code.\n *\n * Full list of available error guides can be found at https://angular.io/errors.\n */\nexport const enum RuntimeErrorCode {\n  // Change Detection Errors\n  EXPRESSION_CHANGED_AFTER_CHECKED = -100,\n  RECURSIVE_APPLICATION_REF_TICK = 101,\n\n  // Dependency Injection Errors\n  CYCLIC_DI_DEPENDENCY = -200,\n  PROVIDER_NOT_FOUND = -201,\n\n  // Template Errors\n  MULTIPLE_COMPONENTS_MATCH = -300,\n  EXPORT_NOT_FOUND = -301,\n  PIPE_NOT_FOUND = -302,\n  UNKNOWN_BINDING = 303,\n  UNKNOWN_ELEMENT = 304,\n  TEMPLATE_STRUCTURE_ERROR = 305,\n\n  // Bootstrap Errors\n  MULTIPLE_PLATFORMS = 400,\n  PLATFORM_NOT_FOUND = 401,\n  ERROR_HANDLER_NOT_FOUND = 402,\n  BOOTSTRAP_COMPONENTS_NOT_FOUND = 403,\n  ALREADY_DESTROYED_PLATFORM = 404,\n  ASYNC_INITIALIZERS_STILL_RUNNING = 405,\n\n  // Styling Errors\n\n  // Declarations Errors\n\n  // i18n Errors\n\n  // JIT Compilation Errors\n}\n\nexport class RuntimeError<T = RuntimeErrorCode> extends Error {\n  constructor(public code: T, message: string) {\n    super(formatRuntimeError<T>(code, message));\n  }\n}\n\n/** Called to format a runtime error */\nexport function formatRuntimeError<T = RuntimeErrorCode>(code: T, message: string): string {\n  const codeAsNumber = code as unknown as number;\n  // Error code might be a negative number, which is a special marker that instructs the logic to\n  // generate a link to the error details page on angular.io.\n  const fullCode = `NG0${Math.abs(codeAsNumber)}`;\n\n  let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;\n\n  if (ngDevMode && codeAsNumber < 0) {\n    errorMessage = `${errorMessage}. Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n  }\n  return errorMessage;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nexport function renderStringify(value: any): string {\n  if (typeof value === 'string') return value;\n  if (value == null) return '';\n  // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n  return String(value);\n}\n\n\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nexport function stringifyForError(value: any): string {\n  if (typeof value === 'function') return value.name || value.toString();\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n\n  return renderStringify(value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectorType} from '../di/interface/defs';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {stringify} from '../util/stringify';\n\nimport {stringifyForError} from './util/stringify_utils';\n\n\n/** Called when directives inject each other (creating a circular dependency) */\nexport function throwCyclicDependencyError(token: string, path?: string[]): never {\n  const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n  throw new RuntimeError(\n      RuntimeErrorCode.CYCLIC_DI_DEPENDENCY,\n      `Circular dependency in DI detected for ${token}${depPath}`);\n}\n\nexport function throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\n\nexport function throwInvalidProviderError(\n    ngModuleType?: InjectorType<any>, providers?: any[], provider?: any) {\n  let ngModuleDetail = '';\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n    ngModuleDetail =\n        ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;\n  }\n\n  throw new Error(\n      `Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);\n}\n\n\n/** Throws an error when a token is not found in DI. */\nexport function throwProviderNotFoundError(token: any, injectorName?: string): never {\n  const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n  throw new RuntimeError(\n      RuntimeErrorCode.PROVIDER_NOT_FOUND,\n      `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\n\nimport {stringify} from './stringify';\n\nexport function assertNumber(actual: any, msg: string): asserts actual is number {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\n\nexport function assertNumberInRange(\n    actual: any, minInclusive: number, maxInclusive: number): asserts actual is number {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\n\nexport function assertString(actual: any, msg: string): asserts actual is string {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\n\nexport function assertFunction(actual: any, msg: string): asserts actual is Function {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\n\nexport function assertEqual<T>(actual: T, expected: T, msg: string) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\n\nexport function assertNotEqual<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\n\nexport function assertSame<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\n\nexport function assertNotSame<T>(actual: T, expected: T, msg: string) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\n\nexport function assertLessThan<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\n\nexport function assertLessThanOrEqual<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\n\nexport function assertGreaterThan<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\n\nexport function assertGreaterThanOrEqual<T>(\n    actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\n\nexport function assertNotDefined<T>(actual: T, msg: string) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\n\nexport function assertDefined<T>(actual: T|null|undefined, msg: string): asserts actual is T {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\n\nexport function throwError(msg: string): never;\nexport function throwError(msg: string, actual: any, expected: any, comparison: string): never;\nexport function throwError(msg: string, actual?: any, expected?: any, comparison?: string): never {\n  throw new Error(\n      `ASSERTION ERROR: ${msg}` +\n      (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\n\nexport function assertDomNode(node: any): asserts node is Node {\n  // If we're in a worker, `Node` will not be defined.\n  if (!(typeof Node !== 'undefined' && node instanceof Node) &&\n      !(typeof node === 'object' && node != null &&\n        node.constructor.name === 'WebWorkerRenderNode')) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\n\n\nexport function assertIndexInRange(arr: any[], index: number) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\n\n\nexport function assertOneOf(value: any, ...validValues: any[]) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${\n      JSON.stringify(value)}.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../../interface/type';\nimport {getClosureSafeProperty} from '../../util/property';\nimport {ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, ValueProvider} from './provider';\n\n\n\n/**\n * Information about how a type or `InjectionToken` interfaces with the DI system.\n *\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n * `Injector`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n * that the injectable does not belong to any scope.\n *\n * @codeGenApi\n * @publicApi The ViewEngine compiler emits code with this type for injectables. This code is\n *   deployed to npm, and should be treated as public api.\n\n */\nexport interface ɵɵInjectableDeclaration<T> {\n  /**\n   * Specifies that the given type belongs to a particular injector:\n   * - `InjectorType` such as `NgModule`,\n   * - `'root'` the root injector\n   * - `'any'` all injectors.\n   * - `null`, does not belong to any injector. Must be explicitly listed in the injector\n   *   `providers`.\n   */\n  providedIn: InjectorType<any>|'root'|'platform'|'any'|null;\n\n  /**\n   * The token to which this definition belongs.\n   *\n   * Note that this may not be the same as the type that the `factory` will create.\n   */\n  token: unknown;\n\n  /**\n   * Factory method to execute to create an instance of the injectable.\n   */\n  factory: (t?: Type<any>) => T;\n\n  /**\n   * In a case of no explicit injector, a location where the instance of the injectable is stored.\n   */\n  value: T|undefined;\n}\n\n/**\n * Information about the providers to be included in an `Injector` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n * structure of providers with a defined priority (identically to how `NgModule`s also have\n * an import/dependency structure).\n *\n * NOTE: This is a private type and should not be exported\n *\n * @codeGenApi\n */\nexport interface ɵɵInjectorDef<T> {\n  // TODO(alxhub): Narrow down the type here once decorators properly change the return type of the\n  // class they are decorating (to add the ɵprov property for example).\n  providers: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n              StaticClassProvider|ClassProvider|any[])[];\n\n  imports: (InjectorType<any>|InjectorTypeWithProviders<any>)[];\n}\n\n/**\n * A `Type` which has a `ɵprov: ɵɵInjectableDeclaration` static field.\n *\n * `InjectableType`s contain their own Dependency Injection metadata and are usable in an\n * `InjectorDef`-based `StaticInjector.\n *\n * @publicApi\n */\nexport interface InjectableType<T> extends Type<T> {\n  /**\n   * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n   */\n  ɵprov: unknown;\n}\n\n/**\n * A type which has an `InjectorDef` static field.\n *\n * `InjectorTypes` can be used to configure a `StaticInjector`.\n *\n * This is an opaque type whose structure is highly version dependent. Do not rely on any\n * properties.\n *\n * @publicApi\n */\nexport interface InjectorType<T> extends Type<T> {\n  ɵfac?: unknown;\n  ɵinj: unknown;\n}\n\n/**\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorType` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorTypeWithProviders<T> {\n  ngModule: InjectorType<T>;\n  providers?: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n               StaticClassProvider|ClassProvider|any[])[];\n}\n\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport function ɵɵdefineInjectable<T>(opts: {\n  token: unknown,\n  providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T,\n}): unknown {\n  return {\n    token: opts.token,\n    providedIn: opts.providedIn as any || null,\n    factory: opts.factory,\n    value: undefined,\n  } as ɵɵInjectableDeclaration<T>;\n}\n\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nexport const defineInjectable = ɵɵdefineInjectable;\n\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nexport function ɵɵdefineInjector(options: {providers?: any[], imports?: any[]}): unknown {\n  return {providers: options.providers || [], imports: options.imports || []};\n}\n\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nexport function getInjectableDef<T>(type: any): ɵɵInjectableDeclaration<T>|null {\n  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\n\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition<T>(type: any, field: string): ɵɵInjectableDeclaration<T>|null {\n  return type.hasOwnProperty(field) ? type[field] : null;\n}\n\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nexport function getInheritedInjectableDef<T>(type: any): ɵɵInjectableDeclaration<T>|null {\n  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n\n  if (def) {\n    const typeName = getTypeName(type);\n    // TODO(FW-1307): Re-add ngDevMode when closure can handle it\n    // ngDevMode &&\n    console.warn(\n        `DEPRECATED: DI is instantiating a token \"${\n            typeName}\" that inherits its @Injectable decorator but does not provide one itself.\\n` +\n        `This will become an error in a future version of Angular. Please add @Injectable() to the \"${\n            typeName}\" class.`);\n    return def;\n  } else {\n    return null;\n  }\n}\n\n/** Gets the name of a type, accounting for some cross-browser differences. */\nfunction getTypeName(type: any): string {\n  // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers\n  // it'll always return the name of the function itself, no matter how many other functions it\n  // inherits from. On IE the function doesn't have its own `name` property, but it takes it from\n  // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most\n  // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around\n  // the issue by converting the function to a string and parsing its name out that way via a regex.\n  if (type.hasOwnProperty('name')) {\n    return type.name;\n  }\n\n  const match = ('' + type).match(/^function\\s*([^\\s(]+)/);\n  return match === null ? '' : match[1];\n}\n\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nexport function getInjectorDef<T>(type: any): ɵɵInjectorDef<T>|null {\n  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?\n      (type as any)[NG_INJ_DEF] :\n      null;\n}\n\nexport const NG_PROV_DEF = getClosureSafeProperty({ɵprov: getClosureSafeProperty});\nexport const NG_INJ_DEF = getClosureSafeProperty({ɵinj: getClosureSafeProperty});\n\n// We need to keep these around so we can read off old defs if new defs are unavailable\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ngInjectableDef: getClosureSafeProperty});\nexport const NG_INJECTOR_DEF = getClosureSafeProperty({ngInjectorDef: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Special flag indicating that a decorator is of type `Inject`. It's used to make `Inject`\n * decorator tree-shakable (so we don't have to rely on the `instanceof` checks).\n * Note: this flag is not included into the `InjectFlags` since it's an internal-only API.\n */\nexport const enum DecoratorFlags {\n  Inject = -1\n}\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport enum InjectFlags {\n  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n  // writes exports of it into ngfactory files.\n\n  /** Check self and check parent injector if needed */\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n}\n\n/**\n * This enum is an exact copy of the `InjectFlags` enum above, but the difference is that this is a\n * const enum, so actual enum values would be inlined in generated code. The `InjectFlags` enum can\n * be turned into a const enum when ViewEngine is removed (see TODO at the `InjectFlags` enum\n * above). The benefit of inlining is that we can use these flags at the top level without affecting\n * tree-shaking (see \"no-toplevel-property-access\" tslint rule for more info).\n * Keep this enum in sync with `InjectFlags` enum above.\n */\nexport const enum InternalInjectFlags {\n  /** Check self and check parent injector if needed */\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n\n  /**\n   * This token is being injected into a pipe.\n   *\n   * This flag is intentionally not in the public facing `InjectFlags` because it is only added by\n   * the compiler and is not a developer applicable flag.\n   */\n  ForPipe = 0b10000,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {throwProviderNotFoundError} from '../render3/errors_di';\nimport {assertNotEqual} from '../util/assert';\nimport {stringify} from '../util/stringify';\n\nimport {getInjectableDef, ɵɵInjectableDeclaration} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {ProviderToken} from './provider_token';\n\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation: (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null)|\n    undefined;\nexport function getInjectImplementation() {\n  return _injectImplementation;\n}\n\n\n/**\n * Sets the current inject implementation.\n */\nexport function setInjectImplementation(\n    impl: (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null)|\n    undefined): (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null)|undefined {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n\n\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nexport function injectRootLimpMode<T>(\n    token: ProviderToken<T>, notFoundValue: T|undefined, flags: InjectFlags): T|null {\n  const injectableDef: ɵɵInjectableDeclaration<T>|null = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                                               injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(stringify(token), 'Injector');\n}\n\n\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nexport function assertInjectImplementationNotEqual(\n    fn: (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null)) {\n  ngDevMode &&\n      assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nexport function noSideEffects<T>(fn: () => T): T {\n  return {toString: fn}.toString() as unknown as T;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nexport enum ChangeDetectionStrategy {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  OnPush = 0,\n\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  Default = 1,\n}\n\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\nexport enum ChangeDetectorStatus {\n  /**\n   * A state in which, after calling `detectChanges()`, the change detector\n   * state becomes `Checked`, and must be explicitly invoked or reactivated.\n   */\n  CheckOnce,\n\n  /**\n   * A state in which change detection is skipped until the change detector mode\n   * becomes `CheckOnce`.\n   */\n  Checked,\n\n  /**\n   * A state in which change detection continues automatically until explicitly\n   * deactivated.\n   */\n  CheckAlways,\n\n  /**\n   * A state in which a change detector sub tree is not a part of the main tree and\n   * should be skipped.\n   */\n  Detached,\n\n  /**\n   * Indicates that the change detector encountered an error checking a binding\n   * or calling a directive lifecycle method and is now in an inconsistent state. Change\n   * detectors in this state do not detect changes.\n   */\n  Errored,\n\n  /**\n   * Indicates that the change detector has been destroyed.\n   */\n  Destroyed,\n}\n\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy: ChangeDetectionStrategy):\n    boolean {\n  return changeDetectionStrategy == null ||\n      changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nexport enum ViewEncapsulation {\n  // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n  // https://github.com/angular/angular/issues/44119 for additional information.\n\n  /**\n   * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n   * component's host element and applying the same attribute to all the CSS selectors provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n   *\n   * This is the default option.\n   */\n  Emulated = 0,\n\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n\n  /**\n   * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n   * to any HTML element of the application regardless of their host Component.\n   */\n  None = 2,\n\n  /**\n   * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n   * a ShadowRoot for the component's host element which is then used to encapsulate\n   * all the Component's styling.\n   */\n  ShadowDom = 3\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jteplitz602): Load WorkerGlobalScope from lib.webworker.d.ts file #3492\ndeclare var WorkerGlobalScope: any /** TODO #9100 */;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\ndeclare var global: any /** TODO #9100 */;\n\nconst __globalThis = typeof globalThis !== 'undefined' && globalThis;\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\n\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case.\nconst _global = __globalThis || __global || __window || __self;\n\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport {_global as global};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {initNgDevMode} from './ng_dev_mode';\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\n\nexport const EMPTY_OBJ: {} = {};\nexport const EMPTY_ARRAY: any[] = [];\n\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_ARRAY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getClosureSafeProperty} from '../util/property';\n\nexport const NG_COMP_DEF = getClosureSafeProperty({ɵcmp: getClosureSafeProperty});\nexport const NG_DIR_DEF = getClosureSafeProperty({ɵdir: getClosureSafeProperty});\nexport const NG_PIPE_DEF = getClosureSafeProperty({ɵpipe: getClosureSafeProperty});\nexport const NG_MOD_DEF = getClosureSafeProperty({ɵmod: getClosureSafeProperty});\nexport const NG_FACTORY_DEF = getClosureSafeProperty({ɵfac: getClosureSafeProperty});\n\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nexport const NG_ELEMENT_ID = getClosureSafeProperty({__NG_ELEMENT_ID__: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {Mutable, Type} from '../interface/type';\nimport {NgModuleDef, NgModuleType} from '../metadata/ng_module_def';\nimport {SchemaMetadata} from '../metadata/schema';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {noSideEffects} from '../util/closure';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../util/empty';\nimport {initNgDevMode} from '../util/ng_dev_mode';\nimport {stringify} from '../util/stringify';\n\nimport {NG_COMP_DEF, NG_DIR_DEF, NG_MOD_DEF, NG_PIPE_DEF} from './fields';\nimport {ComponentDef, ComponentDefFeature, ComponentTemplate, ComponentType, ContentQueriesFunction, DirectiveDef, DirectiveDefFeature, DirectiveTypesOrFactory, HostBindingsFunction, PipeDef, PipeTypesOrFactory, ViewQueriesFunction} from './interfaces/definition';\nimport {TAttributes, TConstantsOrFactory} from './interfaces/node';\nimport {CssSelectorList} from './interfaces/projection';\n\n\nlet _renderCompCount = 0;\n\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nexport function ɵɵdefineComponent<T>(componentDefinition: {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this component. */\n  selectors?: CssSelectorList;\n\n  /**\n   * The number of nodes, local refs, and pipes in this component template.\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the binding start index.\n   */\n  // TODO(kara): remove queries from this count\n  decls: number;\n\n  /**\n   * The number of bindings in this component template (including pure fn bindings).\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  vars: number;\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n   *\n   * Given:\n   * ```\n   * class MyComponent {\n   *   @Input()\n   *   publicInput1: string;\n   *\n   *   @Input('publicInput2')\n   *   declaredInput2: string;\n   * }\n   * ```\n   *\n   * is described as:\n   * ```\n   * {\n   *   publicInput1: 'publicInput1',\n   *   declaredInput2: ['publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * Which the minifier may translate to:\n   * ```\n   * {\n   *   minifiedPublicInput1: 'publicInput1',\n   *   minifiedDeclaredInput2: ['publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * This allows the render to re-construct the minified, public, and declared names\n   * of properties.\n   *\n   * NOTE:\n   *  - Because declared and public name are usually same we only generate the array\n   *    `['public', 'declared']` format when they differ.\n   *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n   *    inconsistent behavior in that it uses declared names rather than minified or public. For\n   *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n   *    API will be simplified to be consistent with `output`.\n   */\n  inputs?: {[P in keyof T]?: string | [string, string]};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: HostBindingsFunction<T>;\n\n  /**\n   * The number of bindings in this directive `hostBindings` (including pure fn bindings).\n   *\n   * Used to calculate the length of the component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  hostVars?: number;\n\n  /**\n   * Assign static attribute values to a host element.\n   *\n   * This property will assign static attribute values as well as class and style\n   * values to a host element. Since attribute values can consist of different types of values, the\n   * `hostAttrs` array must include the values in the following format:\n   *\n   * attrs = [\n   *   // static attributes (like `title`, `name`, `id`...)\n   *   attr1, value1, attr2, value,\n   *\n   *   // a single namespace value (like `x:id`)\n   *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n   *\n   *   // another single namespace value (like `x:name`)\n   *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n   *\n   *   // a series of CSS classes that will be applied to the element (no spaces)\n   *   CLASSES_MARKER, class1, class2, class3,\n   *\n   *   // a series of CSS styles (property + value) that will be applied to the element\n   *   STYLES_MARKER, prop1, value1, prop2, value2\n   * ]\n   *\n   * All non-class and non-style attributes must be defined at the start of the list\n   * first before all class and style values are set. When there is a change in value\n   * type (like when classes and styles are introduced) a marker must be used to separate\n   * the entries. The marker values themselves are set via entries found in the\n   * [AttributeMarker] enum.\n   */\n  hostAttrs?: TAttributes;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: ContentQueriesFunction<T>;\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string[];\n\n  /**\n   * Template function use for rendering DOM.\n   *\n   * This function has following structure.\n   *\n   * ```\n   * function Template<T>(ctx:T, creationMode: boolean) {\n   *   if (creationMode) {\n   *     // Contains creation mode instructions.\n   *   }\n   *   // Contains binding update instructions\n   * }\n   * ```\n   *\n   * Common instructions are:\n   * Creation mode instructions:\n   *  - `elementStart`, `elementEnd`\n   *  - `text`\n   *  - `container`\n   *  - `listener`\n   *\n   * Binding update instructions:\n   * - `bind`\n   * - `elementAttribute`\n   * - `elementProperty`\n   * - `elementClass`\n   * - `elementStyle`\n   *\n   */\n  template: ComponentTemplate<T>;\n\n  /**\n   * Constants for the nodes in the component's view.\n   * Includes attribute arrays, local definition arrays etc.\n   */\n  consts?: TConstantsOrFactory;\n\n  /**\n   * An array of `ngContent[selector]` values that were found in the template.\n   */\n  ngContentSelectors?: string[];\n\n  /**\n   * Additional set of instructions specific to view query processing. This could be seen as a\n   * set of instruction to be inserted into the template function.\n   *\n   * Query-related instructions need to be pulled out to a specific function as a timing of\n   * execution is different as compared to all other instructions (after change detection hooks but\n   * before view hooks).\n   */\n  viewQuery?: ViewQueriesFunction<T>| null;\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n   */\n  features?: ComponentDefFeature[];\n\n  /**\n   * Defines template and style encapsulation options available for Component's {@link Component}.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   *\n   * see: animation\n   */\n  data?: {[kind: string]: any};\n\n  /**\n   * A set of styles that the component needs to be present for component to render correctly.\n   */\n  styles?: string[];\n\n  /**\n   * The strategy that the default change detector uses to detect changes.\n   * When set, takes effect the next time change detection is triggered.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Registry of directives and components that may be found in this component's view.\n   *\n   * The property is either an array of `DirectiveDef`s or a function which returns the array of\n   * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n   */\n  directives?: DirectiveTypesOrFactory | null;\n\n  /**\n   * Registry of pipes that may be found in this component's view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   */\n  pipes?: PipeTypesOrFactory | null;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the component's template.\n   */\n  schemas?: SchemaMetadata[] | null;\n}): unknown {\n  return noSideEffects(() => {\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n\n    const type = componentDefinition.type;\n    const declaredInputs: {[key: string]: string} = {} as any;\n    const def: Mutable<ComponentDef<any>, keyof ComponentDef<any>> = {\n      type: type,\n      providersResolver: null,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      factory: null,\n      template: componentDefinition.template || null!,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      hostBindings: componentDefinition.hostBindings || null,\n      hostVars: componentDefinition.hostVars || 0,\n      hostAttrs: componentDefinition.hostAttrs || null,\n      contentQueries: componentDefinition.contentQueries || null,\n      declaredInputs: declaredInputs,\n      inputs: null!,   // assigned in noSideEffects\n      outputs: null!,  // assigned in noSideEffects\n      exportAs: componentDefinition.exportAs || null,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null!,  // assigned in noSideEffects\n      pipeDefs: null!,       // assigned in noSideEffects\n      selectors: componentDefinition.selectors || EMPTY_ARRAY,\n      viewQuery: componentDefinition.viewQuery || null,\n      features: componentDefinition.features as DirectiveDefFeature[] || null,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n      id: 'c',\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      setInput: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null,\n    };\n    const directiveTypes = componentDefinition.directives!;\n    const feature = componentDefinition.features;\n    const pipeTypes = componentDefinition.pipes!;\n    def.id += _renderCompCount++;\n    def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n    def.outputs = invertObject(componentDefinition.outputs),\n    feature && feature.forEach((fn) => fn(def));\n    def.directiveDefs = directiveTypes ?\n        () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                  .map(extractDirectiveDef) :\n        null;\n    def.pipeDefs = pipeTypes ?\n        () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) :\n        null;\n\n    return def;\n  });\n}\n\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nexport function ɵɵsetComponentScope(\n    type: ComponentType<any>, directives: Type<any>[], pipes: Type<any>[]): void {\n  const def = (type.ɵcmp as ComponentDef<any>);\n  def.directiveDefs = () => directives.map(extractDirectiveDef);\n  def.pipeDefs = () => pipes.map(extractPipeDef);\n}\n\nexport function extractDirectiveDef(type: Type<any>): DirectiveDef<any>|ComponentDef<any> {\n  const def = getComponentDef(type) || getDirectiveDef(type);\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n  }\n  return def!;\n}\n\nexport function extractPipeDef(type: Type<any>): PipeDef<any> {\n  const def = getPipeDef(type);\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is not a 'PipeType'.`);\n  }\n  return def!;\n}\n\nexport const autoRegisterModuleById: {[id: string]: NgModuleType} = {};\n\n/**\n * @codeGenApi\n */\nexport function ɵɵdefineNgModule<T>(def: {\n  /** Token representing the module. Used by DI. */\n  type: T;\n\n  /** List of components to bootstrap. */\n  bootstrap?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of components, directives, and pipes declared by this module. */\n  declarations?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports?: Type<any>[] | (() => Type<any>[]);\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports?: Type<any>[] | (() => Type<any>[]);\n\n  /** The set of schemas that declare elements to be allowed in the NgModule. */\n  schemas?: SchemaMetadata[] | null;\n\n  /** Unique ID for the module that is used with `getModuleFactory`. */\n  id?: string | null;\n}): unknown {\n  return noSideEffects(() => {\n    const res: NgModuleDef<T> = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null,\n    };\n    if (def.id != null) {\n      autoRegisterModuleById[def.id!] = def.type as unknown as NgModuleType;\n    }\n    return res;\n  });\n}\n\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nexport function ɵɵsetNgModuleScope(type: any, scope: {\n  /** List of components, directives, and pipes declared by this module. */\n  declarations?: Type<any>[]|(() => Type<any>[]);\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports?: Type<any>[] | (() => Type<any>[]);\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports?: Type<any>[] | (() => Type<any>[]);\n}): unknown {\n  return noSideEffects(() => {\n    const ngModuleDef = getNgModuleDef(type, true);\n    ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n    ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n    ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n  });\n}\n\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject<T>(\n    obj?: {[P in keyof T]?: string|[string, string]},\n    secondary?: {[key: string]: string}): {[P in keyof T]: string} {\n  if (obj == null) return EMPTY_OBJ as any;\n  const newLookup: any = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      let publicName: string|[string, string] = obj[minifiedKey]!;\n      let declaredName = publicName;\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n      newLookup[publicName] = minifiedKey;\n      if (secondary) {\n        (secondary[publicName] = declaredName as string);\n      }\n    }\n  }\n  return newLookup;\n}\n\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nexport const ɵɵdefineDirective =\n    ɵɵdefineComponent as any as<T>(directiveDefinition: {\n      /**\n       * Directive type, needed to configure the injector.\n       */\n      type: Type<T>;\n\n      /** The selectors that will be used to match nodes to this directive. */\n      selectors?: CssSelectorList;\n\n      /**\n       * A map of input names.\n       *\n       * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n       *\n       * Given:\n       * ```\n       * class MyComponent {\n       *   @Input()\n       *   publicInput1: string;\n       *\n       *   @Input('publicInput2')\n       *   declaredInput2: string;\n       * }\n       * ```\n       *\n       * is described as:\n       * ```\n       * {\n       *   publicInput1: 'publicInput1',\n       *   declaredInput2: ['declaredInput2', 'publicInput2'],\n       * }\n       * ```\n       *\n       * Which the minifier may translate to:\n       * ```\n       * {\n       *   minifiedPublicInput1: 'publicInput1',\n       *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n       * }\n       * ```\n       *\n       * This allows the render to re-construct the minified, public, and declared names\n       * of properties.\n       *\n       * NOTE:\n       *  - Because declared and public name are usually same we only generate the array\n       *    `['declared', 'public']` format when they differ.\n       *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n       *    inconsistent behavior in that it uses declared names rather than minified or public. For\n       *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n       *    API will be simplified to be consistent with `output`.\n       */\n      inputs?: {[P in keyof T]?: string | [string, string]};\n\n      /**\n       * A map of output names.\n       *\n       * The format is in: `{[actualPropertyName: string]:string}`.\n       *\n       * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n       *\n       * This allows the render to re-construct the minified and non-minified names\n       * of properties.\n       */\n      outputs?: {[P in keyof T]?: string};\n\n      /**\n       * A list of optional features to apply.\n       *\n       * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n       */\n      features?: DirectiveDefFeature[];\n\n      /**\n       * Function executed by the parent template to allow child directive to apply host bindings.\n       */\n      hostBindings?: HostBindingsFunction<T>;\n\n      /**\n       * The number of bindings in this directive `hostBindings` (including pure fn bindings).\n       *\n       * Used to calculate the length of the component's LView array, so we\n       * can pre-fill the array and set the host binding start index.\n       */\n      hostVars?: number;\n\n      /**\n       * Assign static attribute values to a host element.\n       *\n       * This property will assign static attribute values as well as class and style\n       * values to a host element. Since attribute values can consist of different types of values,\n       * the `hostAttrs` array must include the values in the following format:\n       *\n       * attrs = [\n       *   // static attributes (like `title`, `name`, `id`...)\n       *   attr1, value1, attr2, value,\n       *\n       *   // a single namespace value (like `x:id`)\n       *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n       *\n       *   // another single namespace value (like `x:name`)\n       *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n       *\n       *   // a series of CSS classes that will be applied to the element (no spaces)\n       *   CLASSES_MARKER, class1, class2, class3,\n       *\n       *   // a series of CSS styles (property + value) that will be applied to the element\n       *   STYLES_MARKER, prop1, value1, prop2, value2\n       * ]\n       *\n       * All non-class and non-style attributes must be defined at the start of the list\n       * first before all class and style values are set. When there is a change in value\n       * type (like when classes and styles are introduced) a marker must be used to separate\n       * the entries. The marker values themselves are set via entries found in the\n       * [AttributeMarker] enum.\n       */\n      hostAttrs?: TAttributes;\n\n      /**\n       * Function to create instances of content queries associated with a given directive.\n       */\n      contentQueries?: ContentQueriesFunction<T>;\n\n      /**\n       * Additional set of instructions specific to view query processing. This could be seen as a\n       * set of instructions to be inserted into the template function.\n       */\n      viewQuery?: ViewQueriesFunction<T>| null;\n\n      /**\n       * Defines the name that can be used in the template to assign this directive to a variable.\n       *\n       * See: {@link Directive.exportAs}\n       */\n      exportAs?: string[];\n    }) => never;\n\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nexport function ɵɵdefinePipe<T>(pipeDef: {\n  /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n  name: string,\n\n  /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n  type: Type<T>,\n\n  /** Whether the pipe is pure. */\n  pure?: boolean\n}): unknown {\n  return (<PipeDef<T>>{\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  });\n}\n\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\n\nexport function getComponentDef<T>(type: any): ComponentDef<T>|null {\n  return type[NG_COMP_DEF] || null;\n}\n\nexport function getDirectiveDef<T>(type: any): DirectiveDef<T>|null {\n  return type[NG_DIR_DEF] || null;\n}\n\nexport function getPipeDef<T>(type: any): PipeDef<T>|null {\n  return type[NG_PIPE_DEF] || null;\n}\n\nexport function getNgModuleDef<T>(type: any, throwNotFound: true): NgModuleDef<T>;\nexport function getNgModuleDef<T>(type: any): NgModuleDef<T>|null;\nexport function getNgModuleDef<T>(type: any, throwNotFound?: boolean): NgModuleDef<T>|null {\n  const ngModuleDef = type[NG_MOD_DEF] || null;\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n  return ngModuleDef;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LContainer, TYPE} from './container';\nimport {ComponentDef, DirectiveDef} from './definition';\nimport {TNode, TNodeFlags} from './node';\nimport {RNode} from './renderer_dom';\nimport {FLAGS, LView, LViewFlags} from './view';\n\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function isLView(value: RNode|LView|LContainer|{}|null): value is LView {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function isLContainer(value: RNode|LView|LContainer|{}|null): value is LContainer {\n  return Array.isArray(value) && value[TYPE] === true;\n}\n\nexport function isContentQueryHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.hasContentQuery) !== 0;\n}\n\nexport function isComponentHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.isComponentHost) === TNodeFlags.isComponentHost;\n}\n\nexport function isDirectiveHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.isDirectiveHost) === TNodeFlags.isDirectiveHost;\n}\n\nexport function isComponentDef<T>(def: DirectiveDef<T>): def is ComponentDef<T> {\n  return (def as ComponentDef<T>).template !== null;\n}\n\nexport function isRootView(target: LView): boolean {\n  return (target[FLAGS] & LViewFlags.IsRoot) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TNode} from './node';\nimport {RComment, RElement} from './renderer_dom';\nimport {HOST, LView, NEXT, PARENT, T_HOST, TRANSPLANTED_VIEWS_TO_REFRESH} from './view';\n\n\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nexport const TYPE = 1;\n\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n\n/**\n * Flag to signify that this `LContainer` may have transplanted views which need to be change\n * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n *\n * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip\n * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify\n * that the `MOVED_VIEWS` are transplanted and on-push.\n */\nexport const HAS_TRANSPLANTED_VIEWS = 2;\n\n// PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\n\n// T_HOST is index 6\n// We already have this constants in LView, we don't need to re-create it.\n\nexport const NATIVE = 7;\nexport const VIEW_REFS = 8;\nexport const MOVED_VIEWS = 9;\n\n\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nexport const CONTAINER_HEADER_OFFSET = 10;\n\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LView. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n */\nexport interface LContainer extends Array<any> {\n  /**\n   * The host element of this LContainer.\n   *\n   * The host could be an LView if this container is on a component node.\n   * In that case, the component LView is its HOST.\n   */\n  readonly[HOST]: RElement|RComment|LView;\n\n  /**\n   * This is a type field which allows us to differentiate `LContainer` from `StylingContext` in an\n   * efficient way. The value is always set to `true`\n   */\n  [TYPE]: true;\n\n  /**\n   * Flag to signify that this `LContainer` may have transplanted views which need to be change\n   * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n   *\n   * This flag, once set, is never unset for the `LContainer`.\n   */\n  [HAS_TRANSPLANTED_VIEWS]: boolean;\n\n  /**\n   * Access to the parent view is necessary so we can propagate back\n   * up from inside a container to parent[NEXT].\n   */\n  [PARENT]: LView;\n\n  /**\n   * This allows us to jump from a container to a sibling container or component\n   * view with the same parent, so we can remove listeners efficiently.\n   */\n  [NEXT]: LView|LContainer|null;\n\n  /**\n   * The number of direct transplanted views which need a refresh or have descendants themselves\n   * that need a refresh but have not marked their ancestors as Dirty. This tells us that during\n   * change detection we should still descend to find those children to refresh, even if the parents\n   * are not `Dirty`/`CheckAlways`.\n   */\n  [TRANSPLANTED_VIEWS_TO_REFRESH]: number;\n\n  /**\n   * A collection of views created based on the underlying `<ng-template>` element but inserted into\n   * a different `LContainer`. We need to track views created from a given declaration point since\n   * queries collect matches from the embedded view declaration point and _not_ the insertion point.\n   */\n  [MOVED_VIEWS]: LView[]|null;\n\n  /**\n   * Pointer to the `TNode` which represents the host of the container.\n   */\n  [T_HOST]: TNode;\n\n  /** The comment element that serves as an anchor for this LContainer. */\n  readonly[NATIVE]:\n      RComment;  // TODO(misko): remove as this value can be gotten by unwrapping `[HOST]`\n\n  /**\n   * Array of `ViewRef`s used by any `ViewContainerRef`s that point to this container.\n   *\n   * This is lazily initialized by `ViewContainerRef` when the first view is inserted.\n   *\n   * NOTE: This is stored as `any[]` because render3 should really not be aware of `ViewRef` and\n   * doing so creates circular dependency.\n   */\n  [VIEW_REFS]: unknown[]|null;\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../../di/injector';\nimport {ProviderToken} from '../../di/provider_token';\nimport {Type} from '../../interface/type';\nimport {SchemaMetadata} from '../../metadata/schema';\nimport {Sanitizer} from '../../sanitization/sanitizer';\nimport {LContainer} from './container';\nimport {ComponentDef, ComponentTemplate, DirectiveDef, DirectiveDefList, HostBindingsFunction, PipeDef, PipeDefList, ViewQueriesFunction} from './definition';\nimport {I18nUpdateOpCodes, TI18n, TIcu} from './i18n';\nimport {TConstants, TNode} from './node';\nimport {PlayerHandler} from './player';\nimport {LQueries, TQueries} from './query';\nimport {Renderer3, RendererFactory3} from './renderer';\nimport {RComment, RElement} from './renderer_dom';\nimport {TStylingKey, TStylingRange} from './styling';\n\n\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nexport const HOST = 0;\nexport const TVIEW = 1;\nexport const FLAGS = 2;\nexport const PARENT = 3;\nexport const NEXT = 4;\nexport const TRANSPLANTED_VIEWS_TO_REFRESH = 5;\nexport const T_HOST = 6;\nexport const CLEANUP = 7;\nexport const CONTEXT = 8;\nexport const INJECTOR = 9;\nexport const RENDERER_FACTORY = 10;\nexport const RENDERER = 11;\nexport const SANITIZER = 12;\nexport const CHILD_HEAD = 13;\nexport const CHILD_TAIL = 14;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nexport const DECLARATION_VIEW = 15;\nexport const DECLARATION_COMPONENT_VIEW = 16;\nexport const DECLARATION_LCONTAINER = 17;\nexport const PREORDER_HOOK_FLAGS = 18;\nexport const QUERIES = 19;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nexport const HEADER_OFFSET = 20;\n\n\n// This interface replaces the real LView interface if it is an arg or a\n// return value of a public instruction. This ensures we don't need to expose\n// the actual interface, which should be kept private.\nexport interface OpaqueViewState {\n  '__brand__': 'Brand for OpaqueViewState that nothing will match';\n}\n\n\n/**\n * `LView` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own `LView`. When processing a particular view, we set the `viewData` to that\n * `LView`. When that view is done processing, the `viewData` is set back to\n * whatever the original `viewData` was before (the parent `LView`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n */\nexport interface LView extends Array<any> {\n  /**\n   * Human readable representation of the `LView`.\n   *\n   * NOTE: This property only exists if `ngDevMode` is set to `true` and it is not present in\n   * production. Its presence is purely to help debug issue in development, and should not be relied\n   * on in production application.\n   */\n  debug?: LViewDebug;\n\n  /**\n   * The node into which this `LView` is inserted.\n   */\n  [HOST]: RElement|null;\n\n  /**\n   * The static data for this view. We need a reference to this so we can easily walk up the\n   * node tree in DI and get the TView.data array associated with a node (where the\n   * directive defs are stored).\n   */\n  readonly[TVIEW]: TView;\n\n  /** Flags for this view. See LViewFlags for more info. */\n  [FLAGS]: LViewFlags;\n\n  /**\n   * This may store an {@link LView} or {@link LContainer}.\n   *\n   * `LView` - The parent view. This is needed when we exit the view and must restore the previous\n   * LView. Without this, the render method would have to keep a stack of\n   * views as it is recursively rendering templates.\n   *\n   * `LContainer` - The current view is part of a container, and is an embedded view.\n   */\n  [PARENT]: LView|LContainer|null;\n\n  /**\n   *\n   * The next sibling LView or LContainer.\n   *\n   * Allows us to propagate between sibling view states that aren't in the same\n   * container. Embedded views already have a node.next, but it is only set for\n   * views in the same container. We need a way to link component views and views\n   * across containers as well.\n   */\n  [NEXT]: LView|LContainer|null;\n\n  /** Queries active for this view - nodes from a view are reported to those queries. */\n  [QUERIES]: LQueries|null;\n\n  /**\n   * Store the `TNode` of the location where the current `LView` is inserted into.\n   *\n   * Given:\n   * ```\n   * <div>\n   *   <ng-template><span></span></ng-template>\n   * </div>\n   * ```\n   *\n   * We end up with two `TView`s.\n   * - `parent` `TView` which contains `<div><!-- anchor --></div>`\n   * - `child` `TView` which contains `<span></span>`\n   *\n   * Typically the `child` is inserted into the declaration location of the `parent`, but it can be\n   * inserted anywhere. Because it can be inserted anywhere it is not possible to store the\n   * insertion information in the `TView` and instead we must store it in the `LView[T_HOST]`.\n   *\n   * So to determine where is our insertion parent we would execute:\n   * ```\n   * const parentLView = lView[PARENT];\n   * const parentTNode = lView[T_HOST];\n   * const insertionParent = parentLView[parentTNode.index];\n   * ```\n   *\n   *\n   * If `null`, this is the root view of an application (root component is in this view) and it has\n   * no parents.\n   */\n  [T_HOST]: TNode|null;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This context array stores both listener functions wrapped with\n   * their context and output subscription instances for a particular view.\n   *\n   * These change per LView instance, so they cannot be stored on TView. Instead,\n   * TView.cleanup saves an index to the necessary context in this array.\n   *\n   * After `LView` is created it is possible to attach additional instance specific functions at the\n   * end of the `lView[CLENUP]` because we know that no more `T` level cleanup functions will be\n   * addeded here.\n   */\n  [CLEANUP]: any[]|null;\n\n  /**\n   * - For dynamic views, this is the context with which to render the template (e.g.\n   *   `NgForContext`), or `{}` if not defined explicitly.\n   * - For root view of the root component the context contains change detection data.\n   * - For non-root components, the context is the component instance,\n   * - For inline views, the context is null.\n   */\n  [CONTEXT]: {}|RootContext|null;\n\n  /** An optional Module Injector to be used as fall back after Element Injectors are consulted. */\n  readonly[INJECTOR]: Injector|null;\n\n  /** Factory to be used for creating Renderer. */\n  [RENDERER_FACTORY]: RendererFactory3;\n\n  /** Renderer to be used for this view. */\n  [RENDERER]: Renderer3;\n\n  /** An optional custom sanitizer. */\n  [SANITIZER]: Sanitizer|null;\n\n  /**\n   * Reference to the first LView or LContainer beneath this LView in\n   * the hierarchy.\n   *\n   * Necessary to store this so views can traverse through their nested views\n   * to remove listeners and call onDestroy callbacks.\n   */\n  [CHILD_HEAD]: LView|LContainer|null;\n\n  /**\n   * The last LView or LContainer beneath this LView in the hierarchy.\n   *\n   * The tail allows us to quickly add a new state to the end of the view list\n   * without having to propagate starting from the first child.\n   */\n  [CHILD_TAIL]: LView|LContainer|null;\n\n  /**\n   * View where this view's template was declared.\n   *\n   * The template for a dynamically created view may be declared in a different view than\n   * it is inserted. We already track the \"insertion view\" (view where the template was\n   * inserted) in LView[PARENT], but we also need access to the \"declaration view\"\n   * (view where the template was declared). Otherwise, we wouldn't be able to call the\n   * view's template function with the proper contexts. Context should be inherited from\n   * the declaration view tree, not the insertion view tree.\n   *\n   * Example (AppComponent template):\n   *\n   * <ng-template #foo></ng-template>       <-- declared here -->\n   * <some-comp [tpl]=\"foo\"></some-comp>    <-- inserted inside this component -->\n   *\n   * The <ng-template> above is declared in the AppComponent template, but it will be passed into\n   * SomeComp and inserted there. In this case, the declaration view would be the AppComponent,\n   * but the insertion view would be SomeComp. When we are removing views, we would want to\n   * traverse through the insertion view to clean up listeners. When we are calling the\n   * template function during change detection, we need the declaration view to get inherited\n   * context.\n   */\n  [DECLARATION_VIEW]: LView|null;\n\n\n  /**\n   * Points to the declaration component view, used to track transplanted `LView`s.\n   *\n   * See: `DECLARATION_VIEW` which points to the actual `LView` where it was declared, whereas\n   * `DECLARATION_COMPONENT_VIEW` points to the component which may not be same as\n   * `DECLARATION_VIEW`.\n   *\n   * Example:\n   * ```\n   * <#VIEW #myComp>\n   *  <div *ngIf=\"true\">\n   *   <ng-template #myTmpl>...</ng-template>\n   *  </div>\n   * </#VIEW>\n   * ```\n   * In the above case `DECLARATION_VIEW` for `myTmpl` points to the `LView` of `ngIf` whereas\n   * `DECLARATION_COMPONENT_VIEW` points to `LView` of the `myComp` which owns the template.\n   *\n   * The reason for this is that all embedded views are always check-always whereas the component\n   * view can be check-always or on-push. When we have a transplanted view it is important to\n   * determine if we have transplanted a view from check-always declaration to on-push insertion\n   * point. In such a case the transplanted view needs to be added to the `LContainer` in the\n   * declared `LView` and CD during the declared view CD (in addition to the CD at the insertion\n   * point.) (Any transplanted views which are intra Component are of no interest because the CD\n   * strategy of declaration and insertion will always be the same, because it is the same\n   * component.)\n   *\n   * Queries already track moved views in `LView[DECLARATION_LCONTAINER]` and\n   * `LContainer[MOVED_VIEWS]`. However the queries also track `LView`s which moved within the same\n   * component `LView`. Transplanted views are a subset of moved views, and we use\n   * `DECLARATION_COMPONENT_VIEW` to differentiate them. As in this example.\n   *\n   * Example showing intra component `LView` movement.\n   * ```\n   * <#VIEW #myComp>\n   *   <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n   *   <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n   *   <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n   * </#VIEW>\n   * ```\n   * The `thenBlock` and `elseBlock` is moved but not transplanted.\n   *\n   * Example showing inter component `LView` movement (transplanted view).\n   * ```\n   * <#VIEW #myComp>\n   *   <ng-template #myTmpl>...</ng-template>\n   *   <insertion-component [template]=\"myTmpl\"></insertion-component>\n   * </#VIEW>\n   * ```\n   * In the above example `myTmpl` is passed into a different component. If `insertion-component`\n   * instantiates `myTmpl` and `insertion-component` is on-push then the `LContainer` needs to be\n   * marked as containing transplanted views and those views need to be CD as part of the\n   * declaration CD.\n   *\n   *\n   * When change detection runs, it iterates over `[MOVED_VIEWS]` and CDs any child `LView`s where\n   * the `DECLARATION_COMPONENT_VIEW` of the current component and the child `LView` does not match\n   * (it has been transplanted across components.)\n   *\n   * Note: `[DECLARATION_COMPONENT_VIEW]` points to itself if the LView is a component view (the\n   *       simplest / most common case).\n   *\n   * see also:\n   *   - https://hackmd.io/@mhevery/rJUJsvv9H write up of the problem\n   *   - `LContainer[HAS_TRANSPLANTED_VIEWS]` which marks which `LContainer` has transplanted views.\n   *   - `LContainer[TRANSPLANT_HEAD]` and `LContainer[TRANSPLANT_TAIL]` storage for transplanted\n   *   - `LView[DECLARATION_LCONTAINER]` similar problem for queries\n   *   - `LContainer[MOVED_VIEWS]` similar problem for queries\n   */\n  [DECLARATION_COMPONENT_VIEW]: LView;\n\n  /**\n   * A declaration point of embedded views (ones instantiated based on the content of a\n   * <ng-template>), null for other types of views.\n   *\n   * We need to track all embedded views created from a given declaration point so we can prepare\n   * query matches in a proper order (query matches are ordered based on their declaration point and\n   * _not_ the insertion point).\n   */\n  [DECLARATION_LCONTAINER]: LContainer|null;\n\n  /**\n   * More flags for this view. See PreOrderHookFlags for more info.\n   */\n  [PREORDER_HOOK_FLAGS]: PreOrderHookFlags;\n\n  /**\n   * The number of direct transplanted views which need a refresh or have descendants themselves\n   * that need a refresh but have not marked their ancestors as Dirty. This tells us that during\n   * change detection we should still descend to find those children to refresh, even if the parents\n   * are not `Dirty`/`CheckAlways`.\n   */\n  [TRANSPLANTED_VIEWS_TO_REFRESH]: number;\n}\n\n/** Flags associated with an LView (saved in LView[FLAGS]) */\nexport const enum LViewFlags {\n  /** The state of the init phase on the first 2 bits */\n  InitPhaseStateIncrementer = 0b00000000001,\n  InitPhaseStateMask = 0b00000000011,\n\n  /**\n   * Whether or not the view is in creationMode.\n   *\n   * This must be stored in the view rather than using `data` as a marker so that\n   * we can properly support embedded views. Otherwise, when exiting a child view\n   * back into the parent view, `data` will be defined and `creationMode` will be\n   * improperly reported as false.\n   */\n  CreationMode = 0b00000000100,\n\n  /**\n   * Whether or not this LView instance is on its first processing pass.\n   *\n   * An LView instance is considered to be on its \"first pass\" until it\n   * has completed one creation mode run and one update mode run. At this\n   * time, the flag is turned off.\n   */\n  FirstLViewPass = 0b00000001000,\n\n  /** Whether this view has default change detection strategy (checks always) or onPush */\n  CheckAlways = 0b00000010000,\n\n  /**\n   * Whether or not manual change detection is turned on for onPush components.\n   *\n   * This is a special mode that only marks components dirty in two cases:\n   * 1) There has been a change to an @Input property\n   * 2) `markDirty()` has been called manually by the user\n   *\n   * Note that in this mode, the firing of events does NOT mark components\n   * dirty automatically.\n   *\n   * Manual mode is turned off by default for backwards compatibility, as events\n   * automatically mark OnPush components dirty in View Engine.\n   *\n   * TODO: Add a public API to ChangeDetectionStrategy to turn this mode on\n   */\n  ManualOnPush = 0b00000100000,\n\n  /** Whether or not this view is currently dirty (needing check) */\n  Dirty = 0b000001000000,\n\n  /** Whether or not this view is currently attached to change detection tree. */\n  Attached = 0b000010000000,\n\n  /** Whether or not this view is destroyed. */\n  Destroyed = 0b000100000000,\n\n  /** Whether or not this view is the root view */\n  IsRoot = 0b001000000000,\n\n  /**\n   * Whether this moved LView was needs to be refreshed at the insertion location because the\n   * declaration was dirty.\n   */\n  RefreshTransplantedView = 0b0010000000000,\n\n  /**\n   * Index of the current init phase on last 21 bits\n   */\n  IndexWithinInitPhaseIncrementer = 0b0100000000000,\n  IndexWithinInitPhaseShift = 11,\n  IndexWithinInitPhaseReset = 0b0011111111111,\n}\n\n/**\n * Possible states of the init phase:\n * - 00: OnInit hooks to be run.\n * - 01: AfterContentInit hooks to be run\n * - 10: AfterViewInit hooks to be run\n * - 11: All init hooks have been run\n */\nexport const enum InitPhaseState {\n  OnInitHooksToBeRun = 0b00,\n  AfterContentInitHooksToBeRun = 0b01,\n  AfterViewInitHooksToBeRun = 0b10,\n  InitPhaseCompleted = 0b11,\n}\n\n/** More flags associated with an LView (saved in LView[PREORDER_HOOK_FLAGS]) */\nexport const enum PreOrderHookFlags {\n  /**\n     The index of the next pre-order hook to be called in the hooks array, on the first 16\n     bits\n   */\n  IndexOfTheNextPreOrderHookMaskMask = 0b01111111111111111,\n\n  /**\n   * The number of init hooks that have already been called, on the last 16 bits\n   */\n  NumberOfInitHooksCalledIncrementer = 0b010000000000000000,\n  NumberOfInitHooksCalledShift = 16,\n  NumberOfInitHooksCalledMask = 0b11111111111111110000000000000000,\n}\n\n/**\n * Stores a set of OpCodes to process `HostBindingsFunction` associated with a current view.\n *\n * In order to invoke `HostBindingsFunction` we need:\n * 1. 'elementIdx`: Index to the element associated with the `HostBindingsFunction`.\n * 2. 'directiveIdx`: Index to the directive associated with the `HostBindingsFunction`. (This will\n *    become the context for the `HostBindingsFunction` invocation.)\n * 3. `bindingRootIdx`: Location where the bindings for the `HostBindingsFunction` start. Internally\n *    `HostBindingsFunction` binding indexes start from `0` so we need to add `bindingRootIdx` to\n *    it.\n * 4. `HostBindingsFunction`: A host binding function to execute.\n *\n * The above information needs to be encoded into the `HostBindingOpCodes` in an efficient manner.\n *\n * 1. `elementIdx` is encoded into the `HostBindingOpCodes` as `~elementIdx` (so a negative number);\n * 2. `directiveIdx`\n * 3. `bindingRootIdx`\n * 4. `HostBindingsFunction` is passed in as is.\n *\n * The `HostBindingOpCodes` array contains:\n * - negative number to select the element index.\n * - followed by 1 or more of:\n *    - a number to select the directive index\n *    - a number to select the bindingRoot index\n *    - and a function to invoke.\n *\n * ## Example\n *\n * ```\n * const hostBindingOpCodes = [\n *   ~30,                               // Select element 30\n *   40, 45, MyDir.ɵdir.hostBindings    // Invoke host bindings on MyDir on element 30;\n *                                      // directiveIdx = 40; bindingRootIdx = 45;\n *   50, 55, OtherDir.ɵdir.hostBindings // Invoke host bindings on OtherDire on element 30\n *                                      // directiveIdx = 50; bindingRootIdx = 55;\n * ]\n * ```\n *\n * ## Pseudocode\n * ```\n * const hostBindingOpCodes = tView.hostBindingOpCodes;\n * if (hostBindingOpCodes === null) return;\n * for (let i = 0; i < hostBindingOpCodes.length; i++) {\n *   const opCode = hostBindingOpCodes[i] as number;\n *   if (opCode < 0) {\n *     // Negative numbers are element indexes.\n *     setSelectedIndex(~opCode);\n *   } else {\n *     // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n *     const directiveIdx = opCode;\n *     const bindingRootIndx = hostBindingOpCodes[++i] as number;\n *     const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;\n *     setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n *     const context = lView[directiveIdx];\n *     hostBindingFn(RenderFlags.Update, context);\n *   }\n * }\n * ```\n *\n */\nexport interface HostBindingOpCodes extends Array<number|HostBindingsFunction<any>> {\n  __brand__: 'HostBindingOpCodes';\n  debug?: string[];\n}\n\n/**\n * Explicitly marks `TView` as a specific type in `ngDevMode`\n *\n * It is useful to know conceptually what time of `TView` we are dealing with when\n * debugging an application (even if the runtime does not need it.) For this reason\n * we store this information in the `ngDevMode` `TView` and than use it for\n * better debugging experience.\n */\nexport const enum TViewType {\n  /**\n   * Root `TView` is the used to bootstrap components into. It is used in conjunction with\n   * `LView` which takes an existing DOM node not owned by Angular and wraps it in `TView`/`LView`\n   * so that other components can be loaded into it.\n   */\n  Root = 0,\n\n  /**\n   * `TView` associated with a Component. This would be the `TView` directly associated with the\n   * component view (as opposed an `Embedded` `TView` which would be a child of `Component` `TView`)\n   */\n  Component = 1,\n\n  /**\n   * `TView` associated with a template. Such as `*ngIf`, `<ng-template>` etc... A `Component`\n   * can have zero or more `Embedede` `TView`s.\n   */\n  Embedded = 2,\n}\n\n/**\n * Converts `TViewType` into human readable text.\n * Make sure this matches with `TViewType`\n */\nexport const TViewTypeAsString = [\n  'Root',       // 0\n  'Component',  // 1\n  'Embedded',   // 2\n] as const;\n\n\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the `ComponentDef.tView`.\n */\nexport interface TView {\n  /**\n   * Type of `TView` (`Root`|`Component`|`Embedded`).\n   */\n  type: TViewType;\n\n  /**\n   * This is a blueprint used to generate LView instances for this TView. Copying this\n   * blueprint is faster than creating a new LView from scratch.\n   */\n  blueprint: LView;\n\n  /**\n   * The template function used to refresh the view of dynamically created views\n   * and components. Will be null for inline views.\n   */\n  template: ComponentTemplate<{}>|null;\n\n  /**\n   * A function containing query-related instructions.\n   */\n  viewQuery: ViewQueriesFunction<{}>|null;\n\n  /**\n   * A `TNode` representing the declaration location of this `TView` (not part of this TView).\n   */\n  declTNode: TNode|null;\n\n  // FIXME(misko): Why does `TView` not have `declarationTView` property?\n\n  /** Whether or not this template has been processed in creation mode. */\n  firstCreatePass: boolean;\n\n  /**\n   *  Whether or not this template has been processed in update mode (e.g. change detected)\n   *\n   * `firstUpdatePass` is used by styling to set up `TData` to contain metadata about the styling\n   * instructions. (Mainly to build up a linked list of styling priority order.)\n   *\n   * Typically this function gets cleared after first execution. If exception is thrown then this\n   * flag can remain turned un until there is first successful (no exception) pass. This means that\n   * individual styling instructions keep track of if they have already been added to the linked\n   * list to prevent double adding.\n   */\n  firstUpdatePass: boolean;\n\n  /** Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n. */\n  data: TData;\n\n  /**\n   * The binding start index is the index at which the data array\n   * starts to store bindings only. Saving this value ensures that we\n   * will begin reading bindings at the correct point in the array when\n   * we are in update mode.\n   *\n   * -1 means that it has not been initialized.\n   */\n  bindingStartIndex: number;\n\n  /**\n   * The index where the \"expando\" section of `LView` begins. The expando\n   * section contains injectors, directive instances, and host binding values.\n   * Unlike the \"decls\" and \"vars\" sections of `LView`, the length of this\n   * section cannot be calculated at compile-time because directives are matched\n   * at runtime to preserve locality.\n   *\n   * We store this start index so we know where to start checking host bindings\n   * in `setHostBindings`.\n   */\n  expandoStartIndex: number;\n\n  /**\n   * Whether or not there are any static view queries tracked on this view.\n   *\n   * We store this so we know whether or not we should do a view query\n   * refresh after creation mode to collect static query results.\n   */\n  staticViewQueries: boolean;\n\n  /**\n   * Whether or not there are any static content queries tracked on this view.\n   *\n   * We store this so we know whether or not we should do a content query\n   * refresh after creation mode to collect static query results.\n   */\n  staticContentQueries: boolean;\n\n  /**\n   * A reference to the first child node located in the view.\n   */\n  firstChild: TNode|null;\n\n  /**\n   * Stores the OpCodes to be replayed during change-detection to process the `HostBindings`\n   *\n   * See `HostBindingOpCodes` for encoding details.\n   */\n  hostBindingOpCodes: HostBindingOpCodes|null;\n\n  /**\n   * Full registry of directives and components that may be found in this view.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  directiveRegistry: DirectiveDefList|null;\n\n  /**\n   * Full registry of pipes that may be found in this view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  pipeRegistry: PipeDefList|null;\n\n  /**\n   * Array of ngOnInit, ngOnChanges and ngDoCheck hooks that should be executed for this view in\n   * creation mode.\n   *\n   * This array has a flat structure and contains TNode indices, directive indices (where an\n   * instance can be found in `LView`) and hook functions. TNode index is followed by the directive\n   * index and a hook function. If there are multiple hooks for a given TNode, the TNode index is\n   * not repeated and the next lifecycle hook information is stored right after the previous hook\n   * function. This is done so that at runtime the system can efficiently iterate over all of the\n   * functions to invoke without having to make any decisions/lookups.\n   */\n  preOrderHooks: HookData|null;\n\n  /**\n   * Array of ngOnChanges and ngDoCheck hooks that should be executed for this view in update mode.\n   *\n   * This array has the same structure as the `preOrderHooks` one.\n   */\n  preOrderCheckHooks: HookData|null;\n\n  /**\n   * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n   * for this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentHooks: HookData|null;\n\n  /**\n   * Array of ngAfterContentChecked hooks that should be executed for this view in update\n   * mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentCheckHooks: HookData|null;\n\n  /**\n   * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n   * this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewHooks: HookData|null;\n\n  /**\n   * Array of ngAfterViewChecked hooks that should be executed for this view in\n   * update mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewCheckHooks: HookData|null;\n\n  /**\n   * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  destroyHooks: DestroyHookData|null;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n   * and output data (in chunks of 2) for a particular view. Combining the arrays\n   * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n   * separate for loops).\n   *\n   * If it's a native DOM listener or output subscription being stored:\n   * 1st index is: event name  `name = tView.cleanup[i+0]`\n   * 2nd index is: index of native element or a function that retrieves global target (window,\n   *               document or body) reference based on the native element:\n   *    `typeof idxOrTargetGetter === 'function'`: global target getter function\n   *    `typeof idxOrTargetGetter === 'number'`: index of native element\n   *\n   * 3rd index is: index of listener function `listener = lView[CLEANUP][tView.cleanup[i+2]]`\n   * 4th index is: `useCaptureOrIndx = tView.cleanup[i+3]`\n   *    `typeof useCaptureOrIndx == 'boolean' : useCapture boolean\n   *    `typeof useCaptureOrIndx == 'number':\n   *         `useCaptureOrIndx >= 0` `removeListener = LView[CLEANUP][useCaptureOrIndx]`\n   *         `useCaptureOrIndx <  0` `subscription = LView[CLEANUP][-useCaptureOrIndx]`\n   *\n   * If it's an output subscription or query list destroy hook:\n   * 1st index is: output unsubscribe function / query list destroy function\n   * 2nd index is: index of function context in LView.cleanupInstances[]\n   *               `tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])`\n   */\n  cleanup: any[]|null;\n\n  /**\n   * A list of element indices for child components that will need to be\n   * refreshed when the current view has finished its check. These indices have\n   * already been adjusted for the HEADER_OFFSET.\n   *\n   */\n  components: number[]|null;\n\n  /**\n   * A collection of queries tracked in a given view.\n   */\n  queries: TQueries|null;\n\n  /**\n   * An array of indices pointing to directives with content queries alongside with the\n   * corresponding query index. Each entry in this array is a tuple of:\n   * - index of the first content query index declared by a given directive;\n   * - index of a directive.\n   *\n   * We are storing those indexes so we can refresh content queries as part of a view refresh\n   * process.\n   */\n  contentQueries: number[]|null;\n\n  /**\n   * Set of schemas that declare elements to be allowed inside the view.\n   */\n  schemas: SchemaMetadata[]|null;\n\n  /**\n   * Array of constants for the view. Includes attribute arrays, local definition arrays etc.\n   * Used for directive matching, attribute bindings, local definitions and more.\n   */\n  consts: TConstants|null;\n\n  /**\n   * Indicates that there was an error before we managed to complete the first create pass of the\n   * view. This means that the view is likely corrupted and we should try to recover it.\n   */\n  incompleteFirstPass: boolean;\n}\n\nexport const enum RootContextFlags {\n  Empty = 0b00,\n  DetectChanges = 0b01,\n  FlushPlayers = 0b10\n}\n\n\n/**\n * RootContext contains information which is shared for all components which\n * were bootstrapped with {@link renderComponent}.\n */\nexport interface RootContext {\n  /**\n   * A function used for scheduling change detection in the future. Usually\n   * this is `requestAnimationFrame`.\n   */\n  scheduler: (workFn: () => void) => void;\n\n  /**\n   * A promise which is resolved when all components are considered clean (not dirty).\n   *\n   * This promise is overwritten every time a first call to {@link markDirty} is invoked.\n   */\n  clean: Promise<null>;\n\n  /**\n   * RootComponents - The components that were instantiated by the call to\n   * {@link renderComponent}.\n   */\n  components: {}[];\n\n  /**\n   * The player flushing handler to kick off all animations\n   */\n  playerHandler: PlayerHandler|null;\n\n  /**\n   * What render-related operations to run once a scheduler has been set\n   */\n  flags: RootContextFlags;\n}\n\n/** Single hook callback function. */\nexport type HookFn = () => void;\n\n/**\n * Information necessary to call a hook. E.g. the callback that\n * needs to invoked and the index at which to find its context.\n */\nexport type HookEntry = number|HookFn;\n\n/**\n * Array of hooks that should be executed for a view and their directive indices.\n *\n * For each node of the view, the following data is stored:\n * 1) Node index (optional)\n * 2) A series of number/function pairs where:\n *  - even indices are directive indices\n *  - odd indices are hook functions\n *\n * Special cases:\n *  - a negative directive index flags an init hook (ngOnInit, ngAfterContentInit, ngAfterViewInit)\n */\nexport type HookData = HookEntry[];\n\n/**\n * Array of destroy hooks that should be executed for a view and their directive indices.\n *\n * The array is set up as a series of number/function or number/(number|function)[]:\n * - Even indices represent the context with which hooks should be called.\n * - Odd indices are the hook functions themselves. If a value at an odd index is an array,\n *   it represents the destroy hooks of a `multi` provider where:\n *     - Even indices represent the index of the provider for which we've registered a destroy hook,\n *       inside of the `multi` provider array.\n *     - Odd indices are the destroy hook functions.\n * For example:\n * LView: `[0, 1, 2, AService, 4, [BService, CService, DService]]`\n * destroyHooks: `[3, AService.ngOnDestroy, 5, [0, BService.ngOnDestroy, 2, DService.ngOnDestroy]]`\n *\n * In the example above `AService` is a type provider with an `ngOnDestroy`, whereas `BService`,\n * `CService` and `DService` are part of a `multi` provider where only `BService` and `DService`\n * have an `ngOnDestroy` hook.\n */\nexport type DestroyHookData = (HookEntry|HookData)[];\n\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array.  Any nodes that do not have static data store a null value in\n * tData to avoid a sparse array.\n *\n * Each pipe's definition is stored here at the same index as its pipe instance in\n * the data array.\n *\n * Each host property's name is stored here at the same index as its value in the\n * data array.\n *\n * Each property binding name is stored here at the same index as its value in\n * the data array. If the binding is an interpolation, the static string values\n * are stored parallel to the dynamic values. Example:\n *\n * id=\"prefix {{ v0 }} a {{ v1 }} b {{ v2 }} suffix\"\n *\n * LView       |   TView.data\n *------------------------\n *  v0 value   |   'a'\n *  v1 value   |   'b'\n *  v2 value   |   id � prefix � suffix\n *\n * Injector bloom filters are also stored here.\n */\nexport type TData = (TNode|PipeDef<any>|DirectiveDef<any>|ComponentDef<any>|number|TStylingRange|\n                     TStylingKey|ProviderToken<any>|TI18n|I18nUpdateOpCodes|TIcu|null|string)[];\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n\n/**\n * Human readable version of the `LView`.\n *\n * `LView` is a data structure used internally to keep track of views. The `LView` is designed for\n * efficiency and so at times it is difficult to read or write tests which assert on its values. For\n * this reason when `ngDevMode` is true we patch a `LView.debug` property which points to\n * `LViewDebug` for easier debugging and test writing. It is the intent of `LViewDebug` to be used\n * in tests.\n */\nexport interface LViewDebug {\n  /**\n   * Flags associated with the `LView` unpacked into a more readable state.\n   *\n   * See `LViewFlags` for the flag meanings.\n   */\n  readonly flags: {\n    initPhaseState: number,\n    creationMode: boolean,\n    firstViewPass: boolean,\n    checkAlways: boolean,\n    dirty: boolean,\n    attached: boolean,\n    destroyed: boolean,\n    isRoot: boolean,\n    indexWithinInitPhase: number,\n  };\n\n  /**\n   * Associated TView\n   */\n  readonly tView: TView;\n\n  /**\n   * Parent view (or container)\n   */\n  readonly parent: LViewDebug|LContainerDebug|null;\n\n  /**\n   * Next sibling to the `LView`.\n   */\n  readonly next: LViewDebug|LContainerDebug|null;\n\n  /**\n   * The context used for evaluation of the `LView`\n   *\n   * (Usually the component)\n   */\n  readonly context: {}|null;\n\n  /**\n   * Hierarchical tree of nodes.\n   */\n  readonly nodes: DebugNode[];\n\n  /**\n   * Template structure (no instance data).\n   * (Shows how TNodes are connected)\n   */\n  readonly template: string;\n\n  /**\n   * HTML representation of the `LView`.\n   *\n   * This is only approximate to actual HTML as child `LView`s are removed.\n   */\n  readonly html: string;\n\n  /**\n   * The host element to which this `LView` is attached.\n   */\n  readonly hostHTML: string|null;\n\n  /**\n   * Child `LView`s\n   */\n  readonly childViews: Array<LViewDebug|LContainerDebug>;\n\n  /**\n   * Sub range of `LView` containing decls (DOM elements).\n   */\n  readonly decls: LViewDebugRange;\n\n  /**\n   * Sub range of `LView` containing vars (bindings).\n   */\n  readonly vars: LViewDebugRange;\n\n  /**\n   * Sub range of `LView` containing expando (used by DI).\n   */\n  readonly expando: LViewDebugRange;\n}\n\n/**\n * Human readable version of the `LContainer`\n *\n * `LContainer` is a data structure used internally to keep track of child views. The `LContainer`\n * is designed for efficiency and so at times it is difficult to read or write tests which assert on\n * its values. For this reason when `ngDevMode` is true we patch a `LContainer.debug` property which\n * points to `LContainerDebug` for easier debugging and test writing. It is the intent of\n * `LContainerDebug` to be used in tests.\n */\nexport interface LContainerDebug {\n  readonly native: RComment;\n  /**\n   * Child `LView`s.\n   */\n  readonly views: LViewDebug[];\n  readonly parent: LViewDebug|null;\n  readonly movedViews: LView[]|null;\n  readonly host: RElement|RComment|LView;\n  readonly next: LViewDebug|LContainerDebug|null;\n  readonly hasTransplantedViews: boolean;\n}\n\n\n\n/**\n * `LView` is subdivided to ranges where the actual data is stored. Some of these ranges such as\n * `decls` and `vars` are known at compile time. Other such as `i18n` and `expando` are runtime only\n * concepts.\n */\nexport interface LViewDebugRange {\n  /**\n   * The starting index in `LView` where the range begins. (Inclusive)\n   */\n  start: number;\n\n  /**\n   * The ending index in `LView` where the range ends. (Exclusive)\n   */\n  end: number;\n\n  /**\n   * The length of the range\n   */\n  length: number;\n\n  /**\n   * The merged content of the range. `t` contains data from `TView.data` and `l` contains `LView`\n   * data at an index.\n   */\n  content: LViewDebugRangeContent[];\n}\n\n/**\n * For convenience the static and instance portions of `TView` and `LView` are merged into a single\n * object in `LViewRange`.\n */\nexport interface LViewDebugRangeContent {\n  /**\n   * Index into original `LView` or `TView.data`.\n   */\n  index: number;\n\n  /**\n   * Value from the `TView.data[index]` location.\n   */\n  t: any;\n\n  /**\n   * Value from the `LView[index]` location.\n   */\n  l: any;\n}\n\n\n/**\n * A logical node which comprise into `LView`s.\n *\n */\nexport interface DebugNode {\n  /**\n   * HTML representation of the node.\n   */\n  html: string|null;\n\n  /**\n   * Associated `TNode`\n   */\n  tNode: TNode;\n\n  /**\n   * Human readable node type.\n   */\n  type: string;\n\n  /**\n   * DOM native node.\n   */\n  native: Node;\n\n  /**\n   * Child nodes\n   */\n  children: DebugNode[];\n\n  /**\n   * A list of Component/Directive types which need to be instantiated an this location.\n   */\n  factories: Type<unknown>[];\n\n  /**\n   * A list of Component/Directive instances which were instantiated an this location.\n   */\n  instances: unknown[];\n\n  /**\n   * NodeInjector information.\n   */\n  injector: NodeInjectorDebug;\n\n  /**\n   * Injector resolution path.\n   */\n  injectorResolutionPath: any;\n}\n\nexport interface NodeInjectorDebug {\n  /**\n   * Instance bloom. Does the current injector have a provider with a given bloom mask.\n   */\n  bloom: string;\n\n\n  /**\n   * Cumulative bloom. Do any of the above injectors have a provider with a given bloom mask.\n   */\n  cumulativeBloom: string;\n\n  /**\n   * A list of providers associated with this injector.\n   */\n  providers: (Type<unknown>|DirectiveDef<unknown>|ComponentDef<unknown>)[];\n\n  /**\n   * A list of providers associated with this injector visible to the view of the component only.\n   */\n  viewProviders: Type<unknown>[];\n\n\n  /**\n   * Location of the parent `TNode`.\n   */\n  parentInjectorIndex: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\nimport {NG_FACTORY_DEF} from './fields';\n\n\n/**\n * Definition of what a factory function should look like.\n */\nexport type FactoryFn<T> = {\n  /**\n   * Subclasses without an explicit constructor call through to the factory of their base\n   * definition, providing it with their own constructor to instantiate.\n   */\n  <U extends T>(t?: Type<U>): U;\n\n  /**\n   * If no constructor to instantiate is provided, an instance of type T itself is created.\n   */\n  (t?: undefined): T;\n};\n\n\nexport function getFactoryDef<T>(type: any, throwNotFound: true): FactoryFn<T>;\nexport function getFactoryDef<T>(type: any): FactoryFn<T>|null;\nexport function getFactoryDef<T>(type: any, throwNotFound?: boolean): FactoryFn<T>|null {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nexport class SimpleChange {\n  constructor(public previousValue: any, public currentValue: any, public firstChange: boolean) {}\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange(): boolean {\n    return this.firstChange;\n  }\n}\n\n/**\n * A hashtable of changes represented by {@link SimpleChange} objects stored\n * at the declared property name they belong to on a Directive or Component. This is\n * the type passed to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nexport interface SimpleChanges {\n  [propName: string]: SimpleChange;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OnChanges} from '../../interface/lifecycle_hooks';\nimport {SimpleChange, SimpleChanges} from '../../interface/simple_change';\nimport {EMPTY_OBJ} from '../../util/empty';\nimport {DirectiveDef, DirectiveDefFeature} from '../interfaces/definition';\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵNgOnChangesFeature<T>(): DirectiveDefFeature {\n  return NgOnChangesFeatureImpl;\n}\n\nexport function NgOnChangesFeatureImpl<T>(definition: DirectiveDef<T>) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\n(ɵɵNgOnChangesFeature as DirectiveDefFeature).ngInherit = true;\n\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook(this: OnChanges) {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n\n  if (current) {\n    const previous = simpleChangesStore!.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore!.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore!.current = null;\n    this.ngOnChanges(current);\n  }\n}\n\n\nfunction ngOnChangesSetInput<T>(\n    this: DirectiveDef<T>, instance: T, value: any, publicName: string, privateName: string): void {\n  const simpleChangesStore = getSimpleChangesStore(instance) ||\n      setSimpleChangesStore(instance, {previous: EMPTY_OBJ, current: null});\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n\n  const declaredName = (this.declaredInputs as {[key: string]: string})[publicName];\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(\n      previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n\n  (instance as any)[privateName] = value;\n}\n\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n\nfunction getSimpleChangesStore(instance: any): null|NgSimpleChangesStore {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\n\nfunction setSimpleChangesStore(instance: any, store: NgSimpleChangesStore): NgSimpleChangesStore {\n  return instance[SIMPLE_CHANGES_STORE] = store;\n}\n\n/**\n * Data structure which is monkey-patched on the component instance and used by `ngOnChanges`\n * life-cycle hook to track previous input values.\n */\ninterface NgSimpleChangesStore {\n  previous: SimpleChanges;\n  current: SimpleChanges|null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Profiler events is an enum used by the profiler to distinguish between different calls of user\n * code invoked throughout the application lifecycle.\n */\nexport const enum ProfilerEvent {\n  /**\n   * Corresponds to the point in time before the runtime has called the template function of a\n   * component with `RenderFlags.Create`.\n   */\n  TemplateCreateStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called the template function of a\n   * component with `RenderFlags.Create`.\n   */\n  TemplateCreateEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has called the template function of a\n   * component with `RenderFlags.Update`.\n   */\n  TemplateUpdateStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called the template function of a\n   * component with `RenderFlags.Update`.\n   */\n  TemplateUpdateEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has called a lifecycle hook of a component\n   * or directive.\n   */\n  LifecycleHookStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called a lifecycle hook of a component\n   * or directive.\n   */\n  LifecycleHookEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has evaluated an expression associated with\n   * an event or an output.\n   */\n  OutputStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has evaluated an expression associated with\n   * an event or an output.\n   */\n  OutputEnd,\n}\n\n/**\n * Profiler function which the runtime will invoke before and after user code.\n */\nexport interface Profiler {\n  (event: ProfilerEvent, instance: {}|null, hookOrListener?: (e?: any) => any): void;\n}\n\n\nlet profilerCallback: Profiler|null = null;\n\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nexport const setProfiler = (profiler: Profiler|null) => {\n  profilerCallback = profiler;\n};\n\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\nexport const profiler: Profiler = function(\n    event: ProfilerEvent, instance: {}|null, hookOrListener?: (e?: any) => any) {\n  if (profilerCallback != null /* both `null` and `undefined` */) {\n    profilerCallback(event, instance, hookOrListener);\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nexport const MATH_ML_NAMESPACE = 'http://www.w3.org/1998/MathML/';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT: Document|undefined = undefined;\n\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nexport function setDocument(document: Document|undefined): void {\n  DOCUMENT = document;\n}\n\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nexport function getDocument(): Document {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  }\n  // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API. Meanwhile we just return `undefined` and let the application fail.\n  return undefined!;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and then\n * use that at runtime for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n\nimport {RendererStyleFlags2, RendererType2} from '../../render/api_flags';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL} from '../../util/security/trusted_type_defs';\nimport {getDocument} from './document';\nimport {RComment, RElement, RNode, RText} from './renderer_dom';\n\n// TODO: cleanup once the code is merged in angular/angular\nexport enum RendererStyleFlags3 {\n  Important = 1 << 0,\n  DashCase = 1 << 1\n}\n\nexport type Renderer3 = ObjectOrientedRenderer3|ProceduralRenderer3;\n\nexport type GlobalTargetName = 'document'|'window'|'body';\n\nexport type GlobalTargetResolver = (element: any) => EventTarget;\n\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n * */\nexport interface ObjectOrientedRenderer3 {\n  createComment(data: string): RComment;\n  createElement(tagName: string): RElement;\n  createElementNS(namespace: string, tagName: string): RElement;\n  createTextNode(data: string): RText;\n\n  querySelector(selectors: string): RElement|null;\n}\n\n/** Returns whether the `renderer` is a `ProceduralRenderer3` */\nexport function isProceduralRenderer(renderer: ProceduralRenderer3|\n                                     ObjectOrientedRenderer3): renderer is ProceduralRenderer3 {\n  return !!((renderer as any).listen);\n}\n\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n */\nexport interface ProceduralRenderer3 {\n  destroy(): void;\n  createComment(value: string): RComment;\n  createElement(name: string, namespace?: string|null): RElement;\n  createText(value: string): RText;\n  /**\n   * This property is allowed to be null / undefined,\n   * in which case the view engine won't call it.\n   * This is used as a performance optimization for production mode.\n   */\n  destroyNode?: ((node: RNode) => void)|null;\n  appendChild(parent: RElement, newChild: RNode): void;\n  insertBefore(parent: RNode, newChild: RNode, refChild: RNode|null, isMove?: boolean): void;\n  removeChild(parent: RElement, oldChild: RNode, isHostElement?: boolean): void;\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): RElement;\n\n  parentNode(node: RNode): RElement|null;\n  nextSibling(node: RNode): RNode|null;\n\n  setAttribute(\n      el: RElement, name: string, value: string|TrustedHTML|TrustedScript|TrustedScriptURL,\n      namespace?: string|null): void;\n  removeAttribute(el: RElement, name: string, namespace?: string|null): void;\n  addClass(el: RElement, name: string): void;\n  removeClass(el: RElement, name: string): void;\n  setStyle(\n      el: RElement, style: string, value: any,\n      flags?: RendererStyleFlags2|RendererStyleFlags3): void;\n  removeStyle(el: RElement, style: string, flags?: RendererStyleFlags2|RendererStyleFlags3): void;\n  setProperty(el: RElement, name: string, value: any): void;\n  setValue(node: RText|RComment, value: string): void;\n\n  // TODO(misko): Deprecate in favor of addEventListener/removeEventListener\n  listen(\n      target: GlobalTargetName|RNode, eventName: string,\n      callback: (event: any) => boolean | void): () => void;\n}\n\nexport interface RendererFactory3 {\n  createRenderer(hostElement: RElement|null, rendererType: RendererType2|null): Renderer3;\n  begin?(): void;\n  end?(): void;\n}\n\nexport const domRendererFactory3: RendererFactory3 = {\n  createRenderer: (hostElement: RElement|null, rendererType: RendererType2|null): Renderer3 => {\n    return getDocument();\n  }\n};\n\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDomNode, assertGreaterThan, assertGreaterThanOrEqual, assertIndexInRange, assertLessThan} from '../../util/assert';\nimport {assertTNode, assertTNodeForLView} from '../assert';\nimport {LContainer, TYPE} from '../interfaces/container';\nimport {TConstants, TNode} from '../interfaces/node';\nimport {isProceduralRenderer} from '../interfaces/renderer';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {isLContainer, isLView} from '../interfaces/type_checks';\nimport {FLAGS, HEADER_OFFSET, HOST, LView, LViewFlags, PARENT, PREORDER_HOOK_FLAGS, RENDERER, TData, TRANSPLANTED_VIEWS_TO_REFRESH, TView} from '../interfaces/view';\n\n\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapRNode(value: RNode|LView|LContainer): RNode {\n  while (Array.isArray(value)) {\n    value = value[HOST] as any;\n  }\n  return value as RNode;\n}\n\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapLView(value: RNode|LView|LContainer): LView|null {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value as LView;\n    value = value[HOST] as any;\n  }\n  return null;\n}\n\n/**\n * Returns `LContainer` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapLContainer(value: RNode|LView|LContainer): LContainer|null {\n  while (Array.isArray(value)) {\n    // This check is same as `isLContainer()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (value[TYPE] === true) return value as LContainer;\n    value = value[HOST] as any;\n  }\n  return null;\n}\n\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nexport function getNativeByIndex(index: number, lView: LView): RNode {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nexport function getNativeByTNode(tNode: TNode, lView: LView): RNode {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node: RNode = unwrapRNode(lView[tNode.index]);\n  ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);\n  return node;\n}\n\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nexport function getNativeByTNodeOrNull(tNode: TNode|null, lView: LView): RNode|null {\n  const index = tNode === null ? -1 : tNode.index;\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode!, lView);\n    const node: RNode|null = unwrapRNode(lView[index]);\n    ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);\n    return node;\n  }\n  return null;\n}\n\n\n// fixme(misko): The return Type should be `TNode|null`\nexport function getTNode(tView: TView, index: number): TNode {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index] as TNode;\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n\n/** Retrieves a value from any `LView` or `TData`. */\nexport function load<T>(view: LView|TData, index: number): T {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\n\nexport function getComponentLViewByIndex(nodeIndex: number, hostView: LView): LView {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n\n/** Checks whether a given view is in creation mode */\nexport function isCreationMode(view: LView): boolean {\n  return (view[FLAGS] & LViewFlags.CreationMode) === LViewFlags.CreationMode;\n}\n\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nexport function viewAttachedToChangeDetector(view: LView): boolean {\n  return (view[FLAGS] & LViewFlags.Attached) === LViewFlags.Attached;\n}\n\n/** Returns a boolean for whether the view is attached to a container. */\nexport function viewAttachedToContainer(view: LView): boolean {\n  return isLContainer(view[PARENT]);\n}\n\n/** Returns a constant from `TConstants` instance. */\nexport function getConstant<T>(consts: TConstants|null, index: null|undefined): null;\nexport function getConstant<T>(consts: TConstants, index: number): T|null;\nexport function getConstant<T>(consts: TConstants|null, index: number|null|undefined): T|null;\nexport function getConstant<T>(consts: TConstants|null, index: number|null|undefined): T|null {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts!, index);\n  return consts![index] as unknown as T;\n}\n\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nexport function resetPreOrderHookFlags(lView: LView) {\n  lView[PREORDER_HOOK_FLAGS] = 0;\n}\n\n/**\n * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents\n * whose\n *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh\n *  or\n *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh\n */\nexport function updateTransplantedViewCount(lContainer: LContainer, amount: 1|- 1) {\n  lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n  let viewOrContainer: LView|LContainer = lContainer;\n  let parent: LView|LContainer|null = lContainer[PARENT];\n  while (parent !== null &&\n         ((amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1) ||\n          (amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0))) {\n    parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n    viewOrContainer = parent;\n    parent = parent[PARENT];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags} from '../di/interface/injector';\nimport {assertDefined, assertEqual, assertGreaterThanOrEqual, assertLessThan, assertNotEqual} from '../util/assert';\nimport {assertLViewOrUndefined, assertTNodeForLView, assertTNodeForTView} from './assert';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode, TNodeType} from './interfaces/node';\nimport {CONTEXT, DECLARATION_VIEW, HEADER_OFFSET, LView, OpaqueViewState, T_HOST, TData, TVIEW, TView, TViewType} from './interfaces/view';\nimport {MATH_ML_NAMESPACE, SVG_NAMESPACE} from './namespaces';\nimport {getTNode} from './util/view_utils';\n\n\n/**\n *\n */\ninterface LFrame {\n  /**\n   * Parent LFrame.\n   *\n   * This is needed when `leaveView` is called to restore the previous state.\n   */\n  parent: LFrame;\n\n  /**\n   * Child LFrame.\n   *\n   * This is used to cache existing LFrames to relieve the memory pressure.\n   */\n  child: LFrame|null;\n\n  /**\n   * State of the current view being processed.\n   *\n   * An array of nodes (text, element, container, etc), pipes, their bindings, and\n   * any local variables that need to be stored between invocations.\n   */\n  lView: LView;\n\n  /**\n   * Current `TView` associated with the `LFrame.lView`.\n   *\n   * One can get `TView` from `lFrame[TVIEW]` however because it is so common it makes sense to\n   * store it in `LFrame` for perf reasons.\n   */\n  tView: TView;\n\n  /**\n   * Used to set the parent property when nodes are created and track query results.\n   *\n   * This is used in conjunction with `isParent`.\n   */\n  currentTNode: TNode|null;\n\n  /**\n   * If `isParent` is:\n   *  - `true`: then `currentTNode` points to a parent node.\n   *  - `false`: then `currentTNode` points to previous node (sibling).\n   */\n  isParent: boolean;\n\n  /**\n   * Index of currently selected element in LView.\n   *\n   * Used by binding instructions. Updated as part of advance instruction.\n   */\n  selectedIndex: number;\n\n  /**\n   * Current pointer to the binding index.\n   */\n  bindingIndex: number;\n\n  /**\n   * The last viewData retrieved by nextContext().\n   * Allows building nextContext() and reference() calls.\n   *\n   * e.g. const inner = x().$implicit; const outer = x().$implicit;\n   */\n  contextLView: LView;\n\n  /**\n   * Store the element depth count. This is used to identify the root elements of the template\n   * so that we can then attach patch data `LView` to only those elements. We know that those\n   * are the only places where the patch data could change, this way we will save on number\n   * of places where tha patching occurs.\n   */\n  elementDepthCount: number;\n\n  /**\n   * Current namespace to be used when creating elements\n   */\n  currentNamespace: string|null;\n\n\n  /**\n   * The root index from which pure function instructions should calculate their binding\n   * indices. In component views, this is TView.bindingStartIndex. In a host binding\n   * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n   */\n  bindingRootIndex: number;\n\n  /**\n   * Current index of a View or Content Query which needs to be processed next.\n   * We iterate over the list of Queries and increment current query index at every step.\n   */\n  currentQueryIndex: number;\n\n  /**\n   * When host binding is executing this points to the directive index.\n   * `TView.data[currentDirectiveIndex]` is `DirectiveDef`\n   * `LView[currentDirectiveIndex]` is directive instance.\n   */\n  currentDirectiveIndex: number;\n\n  /**\n   * Are we currently in i18n block as denoted by `ɵɵelementStart` and `ɵɵelementEnd`.\n   *\n   * This information is needed because while we are in i18n block all elements must be pre-declared\n   * in the translation. (i.e. `Hello �#2�World�/#2�!` pre-declares element at `�#2�` location.)\n   * This allocates `TNodeType.Placeholder` element at location `2`. If translator removes `�#2�`\n   * from translation than the runtime must also ensure tha element at `2` does not get inserted\n   * into the DOM. The translation does not carry information about deleted elements. Therefor the\n   * only way to know that an element is deleted is that it was not pre-declared in the translation.\n   *\n   * This flag works by ensuring that elements which are created without pre-declaration\n   * (`TNodeType.Placeholder`) are not inserted into the DOM render tree. (It does mean that the\n   * element still gets instantiated along with all of its behavior [directives])\n   */\n  inI18n: boolean;\n}\n\n/**\n * All implicit instruction state is stored here.\n *\n * It is useful to have a single object where all of the state is stored as a mental model\n * (rather it being spread across many different variables.)\n *\n * PERF NOTE: Turns out that writing to a true global variable is slower than\n * having an intermediate object with properties.\n */\ninterface InstructionState {\n  /**\n   * Current `LFrame`\n   *\n   * `null` if we have not called `enterView`\n   */\n  lFrame: LFrame;\n\n  /**\n   * Stores whether directives should be matched to elements.\n   *\n   * When template contains `ngNonBindable` then we need to prevent the runtime from matching\n   * directives on children of that element.\n   *\n   * Example:\n   * ```\n   * <my-comp my-directive>\n   *   Should match component / directive.\n   * </my-comp>\n   * <div ngNonBindable>\n   *   <my-comp my-directive>\n   *     Should not match component / directive because we are in ngNonBindable.\n   *   </my-comp>\n   * </div>\n   * ```\n   */\n  bindingsEnabled: boolean;\n\n  /**\n   * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n   *\n   * Necessary to support ChangeDetectorRef.checkNoChanges().\n   *\n   * checkNoChanges Runs only in devmode=true and verifies that no unintended changes exist in\n   * the change detector or its children.\n   */\n  isInCheckNoChangesMode: boolean;\n}\n\nconst instructionState: InstructionState = {\n  lFrame: createLFrame(null),\n  bindingsEnabled: true,\n  isInCheckNoChangesMode: false,\n};\n\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nexport function specOnlyIsInstructionStateEmpty(): boolean {\n  return instructionState.lFrame.parent === null;\n}\n\n\nexport function getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\n\nexport function increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\n\nexport function decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\n\nexport function getBindingsEnabled(): boolean {\n  return instructionState.bindingsEnabled;\n}\n\n\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵenableBindings(): void {\n  instructionState.bindingsEnabled = true;\n}\n\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵdisableBindings(): void {\n  instructionState.bindingsEnabled = false;\n}\n\n/**\n * Return the current `LView`.\n */\nexport function getLView(): LView {\n  return instructionState.lFrame.lView;\n}\n\n/**\n * Return the current `TView`.\n */\nexport function getTView(): TView {\n  return instructionState.lFrame.tView;\n}\n\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nexport function ɵɵrestoreView<T = any>(viewToRestore: OpaqueViewState): T {\n  instructionState.lFrame.contextLView = viewToRestore as any as LView;\n  return (viewToRestore as any as LView)[CONTEXT] as T;\n}\n\n\nexport function getCurrentTNode(): TNode|null {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n  while (currentTNode !== null && currentTNode.type === TNodeType.Placeholder) {\n    currentTNode = currentTNode.parent;\n  }\n  return currentTNode;\n}\n\nexport function getCurrentTNodePlaceholderOk(): TNode|null {\n  return instructionState.lFrame.currentTNode;\n}\n\nexport function getCurrentParentTNode(): TNode|null {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode!.parent;\n}\n\nexport function setCurrentTNode(tNode: TNode|null, isParent: boolean) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\n\nexport function isCurrentTNodeParent(): boolean {\n  return instructionState.lFrame.isParent;\n}\n\nexport function setCurrentTNodeAsNotParent(): void {\n  instructionState.lFrame.isParent = false;\n}\nexport function setCurrentTNodeAsParent(): void {\n  instructionState.lFrame.isParent = true;\n}\n\nexport function getContextLView(): LView {\n  return instructionState.lFrame.contextLView;\n}\n\nexport function isInCheckNoChangesMode(): boolean {\n  // TODO(misko): remove this from the LView since it is ngDevMode=true mode only.\n  return instructionState.isInCheckNoChangesMode;\n}\n\nexport function setIsInCheckNoChangesMode(mode: boolean): void {\n  instructionState.isInCheckNoChangesMode = mode;\n}\n\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nexport function getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n  return index;\n}\n\nexport function getBindingIndex(): number {\n  return instructionState.lFrame.bindingIndex;\n}\n\nexport function setBindingIndex(value: number): number {\n  return instructionState.lFrame.bindingIndex = value;\n}\n\nexport function nextBindingIndex(): number {\n  return instructionState.lFrame.bindingIndex++;\n}\n\nexport function incrementBindingIndex(count: number): number {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\n\nexport function isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\n\nexport function setInI18nBlock(isInI18nBlock: boolean): void {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nexport function setBindingRootForHostBindings(\n    bindingRootIndex: number, currentDirectiveIndex: number) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nexport function getCurrentDirectiveIndex(): number {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nexport function setCurrentDirectiveIndex(currentDirectiveIndex: number): void {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nexport function getCurrentDirectiveDef(tData: TData): DirectiveDef<any>|null {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex] as DirectiveDef<any>;\n}\n\nexport function getCurrentQueryIndex(): number {\n  return instructionState.lFrame.currentQueryIndex;\n}\n\nexport function setCurrentQueryIndex(value: number): void {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView: LView): TNode|null {\n  const tView = lView[TVIEW];\n\n  // Return the declaration parent for embedded views\n  if (tView.type === TViewType.Embedded) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  }\n\n  // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n  if (tView.type === TViewType.Component) {\n    return lView[T_HOST];\n  }\n\n  // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n  return null;\n}\n\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nexport function enterDI(lView: LView, tNode: TNode, flags: InjectFlags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n\n  if (flags & InjectFlags.SkipSelf) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n\n    let parentTNode = tNode as TNode | null;\n    let parentLView = lView;\n\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode!.parent as TNode | null;\n      if (parentTNode === null && !(flags & InjectFlags.Host)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break;\n\n        // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW]!;\n\n        // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n        if (parentTNode.type & (TNodeType.Element | TNodeType.ElementContainer)) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = instructionState.lFrame = allocLFrame();\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n\n  return true;\n}\n\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nexport function enterView(newView: LView): void {\n  ngDevMode && assertNotEqual(newView[0], newView[1] as any, '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild!;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView!;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\n\nfunction createLFrame(parent: LFrame|null): LFrame {\n  const lFrame: LFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null!,\n    tView: null!,\n    selectedIndex: -1,\n    contextLView: null!,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent!,\n    child: null,\n    inI18n: false,\n  };\n  parent !== null && (parent.child = lFrame);  // link the new LFrame for reuse.\n  return lFrame;\n}\n\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight(): LFrame {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null!;\n  oldLFrame.lView = null!;\n  return oldLFrame;\n}\n\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nexport const leaveDI: () => void = leaveViewLight;\n\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nexport function leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null!;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null!;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\n\nexport function nextContextImpl<T = any>(level: number): T {\n  const contextLView = instructionState.lFrame.contextLView =\n      walkUpViews(level, instructionState.lFrame.contextLView!);\n  return contextLView[CONTEXT] as T;\n}\n\nfunction walkUpViews(nestingLevel: number, currentView: LView): LView {\n  while (nestingLevel > 0) {\n    ngDevMode &&\n        assertDefined(\n            currentView[DECLARATION_VIEW],\n            'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW]!;\n    nestingLevel--;\n  }\n  return currentView;\n}\n\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nexport function getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nexport function setSelectedIndex(index: number) {\n  ngDevMode && index !== -1 &&\n      assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode &&\n      assertLessThan(\n          index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n  instructionState.lFrame.selectedIndex = index;\n}\n\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nexport function getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nexport function namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\n\nexport function getNamespace(): string|null {\n  return instructionState.lFrame.currentNamespace;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnChanges, OnDestroy, OnInit} from '../interface/lifecycle_hooks';\nimport {assertDefined, assertEqual, assertNotEqual} from '../util/assert';\nimport {assertFirstCreatePass} from './assert';\nimport {NgOnChangesFeatureImpl} from './features/ng_onchanges_feature';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode} from './interfaces/node';\nimport {FLAGS, HookData, InitPhaseState, LView, LViewFlags, PREORDER_HOOK_FLAGS, PreOrderHookFlags, TView} from './interfaces/view';\nimport {profiler, ProfilerEvent} from './profiler';\nimport {isInCheckNoChangesMode} from './state';\n\n\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nexport function registerPreOrderHooks(\n    directiveIndex: number, directiveDef: DirectiveDef<any>, tView: TView): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {ngOnChanges, ngOnInit, ngDoCheck} =\n      directiveDef.type.prototype as OnChanges & OnInit & DoCheck;\n\n  if (ngOnChanges as Function | undefined) {\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);\n    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = []))\n        .push(directiveIndex, wrappedOnChanges);\n  }\n\n  if (ngOnInit) {\n    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);\n  }\n\n  if (ngDoCheck) {\n    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);\n    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);\n  }\n}\n\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nexport function registerPostOrderHooks(tView: TView, tNode: TNode): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i] as DirectiveDef<any>;\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks: AfterContentInit&AfterContentChecked&AfterViewInit&AfterViewChecked&\n        OnDestroy = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy\n    } = lifecycleHooks;\n\n    if (ngAfterContentInit) {\n      (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);\n    }\n\n    if (ngAfterContentChecked) {\n      (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);\n      (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);\n    }\n\n    if (ngAfterViewInit) {\n      (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);\n    }\n\n    if (ngAfterViewChecked) {\n      (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);\n      (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);\n    }\n\n    if (ngOnDestroy != null) {\n      (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);\n    }\n  }\n}\n\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n\n\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executeCheckHooks(lView: LView, hooks: HookData, nodeIndex?: number|null) {\n  callHooks(lView, hooks, InitPhaseState.InitPhaseCompleted, nodeIndex);\n}\n\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executeInitAndCheckHooks(\n    lView: LView, hooks: HookData, initPhase: InitPhaseState, nodeIndex?: number|null) {\n  ngDevMode &&\n      assertNotEqual(\n          initPhase, InitPhaseState.InitPhaseCompleted,\n          'Init pre-order hooks should not be called more than once');\n  if ((lView[FLAGS] & LViewFlags.InitPhaseStateMask) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\n\nexport function incrementInitPhaseFlags(lView: LView, initPhase: InitPhaseState): void {\n  ngDevMode &&\n      assertNotEqual(\n          initPhase, InitPhaseState.InitPhaseCompleted,\n          'Init hooks phase should not be incremented after all init hooks have been run.');\n  let flags = lView[FLAGS];\n  if ((flags & LViewFlags.InitPhaseStateMask) === initPhase) {\n    flags &= LViewFlags.IndexWithinInitPhaseReset;\n    flags += LViewFlags.InitPhaseStateIncrementer;\n    lView[FLAGS] = flags;\n  }\n}\n\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(\n    currentView: LView, arr: HookData, initPhase: InitPhaseState,\n    currentNodeIndex: number|null|undefined): void {\n  ngDevMode &&\n      assertEqual(\n          isInCheckNoChangesMode(), false,\n          'Hooks should never be run when in check no changes mode.');\n  const startIndex = currentNodeIndex !== undefined ?\n      (currentView[PREORDER_HOOK_FLAGS] & PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask) :\n      0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1;  // Stop the loop at length - 1, because we look for the hook at i + 1\n  let lastNodeIndexFound = 0;\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1] as number | (() => void);\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i] as number;\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = arr[i] < 0;\n      if (isInitHook)\n        currentView[PREORDER_HOOK_FLAGS] += PreOrderHookFlags.NumberOfInitHooksCalledIncrementer;\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] =\n            (currentView[PREORDER_HOOK_FLAGS] & PreOrderHookFlags.NumberOfInitHooksCalledMask) + i +\n            2;\n      }\n      i++;\n    }\n  }\n}\n\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView: LView, initPhase: InitPhaseState, arr: HookData, i: number) {\n  const isInitHook = arr[i] < 0;\n  const hook = arr[i + 1] as () => void;\n  const directiveIndex = isInitHook ? -arr[i] : arr[i] as number;\n  const directive = currentView[directiveIndex];\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> LViewFlags.IndexWithinInitPhaseShift;\n    // The init phase state must be always checked here as it may have been recursively updated.\n    if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> PreOrderHookFlags.NumberOfInitHooksCalledShift) &&\n        (currentView[FLAGS] & LViewFlags.InitPhaseStateMask) === initPhase) {\n      currentView[FLAGS] += LViewFlags.IndexWithinInitPhaseIncrementer;\n      profiler(ProfilerEvent.LifecycleHookStart, directive, hook);\n      try {\n        hook.call(directive);\n      } finally {\n        profiler(ProfilerEvent.LifecycleHookEnd, directive, hook);\n      }\n    }\n  } else {\n    profiler(ProfilerEvent.LifecycleHookStart, directive, hook);\n    try {\n      hook.call(directive);\n    } finally {\n      profiler(ProfilerEvent.LifecycleHookEnd, directive, hook);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags} from '../../di/interface/injector';\nimport {ProviderToken} from '../../di/provider_token';\nimport {assertDefined, assertEqual} from '../../util/assert';\n\nimport {TDirectiveHostNode} from './node';\nimport {LView, TData} from './view';\n\n/**\n * Offsets of the `NodeInjector` data structure in the expando.\n *\n * `NodeInjector` is stored in both `LView` as well as `TView.data`. All storage requires 9 words.\n * First 8 are reserved for bloom filter and the 9th is reserved for the associated `TNode` as well\n * as parent `NodeInjector` pointer. All indexes are starting with `index` and have an offset as\n * shown.\n *\n * `LView` layout:\n * ```\n * index + 0: cumulative bloom filter\n * index + 1: cumulative bloom filter\n * index + 2: cumulative bloom filter\n * index + 3: cumulative bloom filter\n * index + 4: cumulative bloom filter\n * index + 5: cumulative bloom filter\n * index + 6: cumulative bloom filter\n * index + 7: cumulative bloom filter\n * index + 8: cumulative bloom filter\n * index + PARENT: Index to the parent injector. See `RelativeInjectorLocation`\n *                 `const parent = lView[index + NodeInjectorOffset.PARENT]`\n * ```\n *\n * `TViewData` layout:\n * ```\n * index + 0: cumulative bloom filter\n * index + 1: cumulative bloom filter\n * index + 2: cumulative bloom filter\n * index + 3: cumulative bloom filter\n * index + 4: cumulative bloom filter\n * index + 5: cumulative bloom filter\n * index + 6: cumulative bloom filter\n * index + 7: cumulative bloom filter\n * index + 8: cumulative bloom filter\n * index + TNODE: TNode associated with this `NodeInjector`\n *                `canst tNode = tView.data[index + NodeInjectorOffset.TNODE]`\n * ```\n */\nexport const enum NodeInjectorOffset {\n  TNODE = 8,\n  PARENT = 8,\n  BLOOM_SIZE = 8,\n  SIZE = 9,\n}\n\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LView`s to traverse and index in the `LView`\n * pointing to the parent injector.\n */\nexport interface RelativeInjectorLocation {\n  __brand__: 'RelativeInjectorLocationFlags';\n}\n\nexport const enum RelativeInjectorLocationFlags {\n  InjectorIndexMask = 0b111111111111111,\n  ViewOffsetShift = 16,\n  NO_PARENT = -1,\n}\n\nexport const NO_PARENT_INJECTOR: RelativeInjectorLocation = -1 as any;\n\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nexport class NodeInjectorFactory {\n  /**\n   * The inject implementation to be activated when using the factory.\n   */\n  injectImpl: null|(<T>(token: ProviderToken<T>, flags?: InjectFlags) => T);\n\n  /**\n   * Marker set to true during factory invocation to see if we get into recursive loop.\n   * Recursive loop causes an error to be displayed.\n   */\n  resolving = false;\n\n  /**\n   * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n   */\n  canSeeViewProviders: boolean;\n\n  /**\n   * An array of factories to use in case of `multi` provider.\n   */\n  multi?: Array<() => any>;\n\n  /**\n   * Number of `multi`-providers which belong to the component.\n   *\n   * This is needed because when multiple components and directives declare the `multi` provider\n   * they have to be concatenated in the correct order.\n   *\n   * Example:\n   *\n   * If we have a component and directive active an a single element as declared here\n   * ```\n   * component:\n   *   provides: [ {provide: String, useValue: 'component', multi: true} ],\n   *   viewProvides: [ {provide: String, useValue: 'componentView', multi: true} ],\n   *\n   * directive:\n   *   provides: [ {provide: String, useValue: 'directive', multi: true} ],\n   * ```\n   *\n   * Then the expected results are:\n   *\n   * ```\n   * providers: ['component', 'directive']\n   * viewProviders: ['component', 'componentView', 'directive']\n   * ```\n   *\n   * The way to think about it is that the `viewProviders` have been inserted after the component\n   * but before the directives, which is why we need to know how many `multi`s have been declared by\n   * the component.\n   */\n  componentProviders?: number;\n\n  /**\n   * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n   * See `providerFactory`.\n   */\n  index?: number;\n\n  /**\n   * Because the same `multi` provider can be declared in `provides` and `viewProvides` it is\n   * possible for `viewProvides` to shadow the `provides`. For this reason we store the\n   * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n   *\n   * Example:\n   *\n   * Given:\n   * ```\n   * provides: [ {provide: String, useValue: 'all', multi: true} ],\n   * viewProvides: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n   * ```\n   *\n   * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n   * of view injection. We further have to make sure that the shared instances (in our case\n   * `all`) are the exact same instance in both the content as well as the view injection. (We\n   * have to make sure that we don't double instantiate.) For this reason the `viewProvides`\n   * `Factory` has a pointer to the shadowed `provides` factory so that it can instantiate the\n   * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n   * ['all', 'viewOnly']`).\n   */\n  providerFactory?: NodeInjectorFactory|null;\n\n\n  constructor(\n      /**\n       * Factory to invoke in order to create a new instance.\n       */\n      public factory:\n          (this: NodeInjectorFactory, _: undefined,\n           /**\n            * array where injectables tokens are stored. This is used in\n            * case of an error reporting to produce friendlier errors.\n            */\n           tData: TData,\n           /**\n            * array where existing instances of injectables are stored. This is used in case\n            * of multi shadow is needed. See `multi` field documentation.\n            */\n           lView: LView,\n           /**\n            * The TNode of the same element injector.\n            */\n           tNode: TDirectiveHostNode) => any,\n      /**\n       * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n       */\n      isViewProvider: boolean,\n      injectImplementation: null|(<T>(token: ProviderToken<T>, flags?: InjectFlags) => T)) {\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\n\nexport function isFactory(obj: any): obj is NodeInjectorFactory {\n  return obj instanceof NodeInjectorFactory;\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CharCode} from '../../util/char_code';\nimport {AttributeMarker, TAttributes} from '../interfaces/node';\nimport {CssSelector} from '../interfaces/projection';\nimport {isProceduralRenderer, ProceduralRenderer3, Renderer3} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\n\n\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nexport function setUpAttributes(renderer: Renderer3, native: RElement, attrs: TAttributes): number {\n  const isProc = isProceduralRenderer(renderer);\n\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== AttributeMarker.NamespaceURI) {\n        break;\n      }\n\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n\n      const namespaceURI = attrs[i++] as string;\n      const attrName = attrs[i++] as string;\n      const attrVal = attrs[i++] as string;\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      isProc ?\n          (renderer as ProceduralRenderer3).setAttribute(native, attrName, attrVal, namespaceURI) :\n          native.setAttributeNS(namespaceURI, attrName, attrVal);\n    } else {\n      // attrName is string;\n      const attrName = value as string;\n      const attrVal = attrs[++i];\n      // Standard attributes\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      if (isAnimationProp(attrName)) {\n        if (isProc) {\n          (renderer as ProceduralRenderer3).setProperty(native, attrName, attrVal);\n        }\n      } else {\n        isProc ?\n            (renderer as ProceduralRenderer3).setAttribute(native, attrName, attrVal as string) :\n            native.setAttribute(attrName, attrVal as string);\n      }\n      i++;\n    }\n  }\n\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nexport function isNameOnlyAttributeMarker(marker: string|AttributeMarker|CssSelector) {\n  return marker === AttributeMarker.Bindings || marker === AttributeMarker.Template ||\n      marker === AttributeMarker.I18n;\n}\n\nexport function isAnimationProp(name: string): boolean {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === CharCode.AT_SIGN;\n}\n\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nexport function mergeHostAttrs(dst: TAttributes|null, src: TAttributes|null): TAttributes|null {\n  if (src === null || src.length === 0) {\n    // do nothing\n  } else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker: AttributeMarker = AttributeMarker.ImplicitAttributes;\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === AttributeMarker.NamespaceURI) {\n          // Case where we need to consume `key1`, `key2`, `value` items.\n        } else if (\n            srcMarker === AttributeMarker.ImplicitAttributes ||\n            srcMarker === AttributeMarker.Styles) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item as string, null, src[++i] as string);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item as string, null, null);\n        }\n      }\n    }\n  }\n  return dst;\n}\n\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nexport function mergeHostAttribute(\n    dst: TAttributes, marker: AttributeMarker, key1: string, key2: string|null,\n    value: string|null): void {\n  let i = 0;\n  // Assume that new markers will be inserted at the end.\n  let markerInsertPosition = dst.length;\n  // scan until correct type.\n  if (marker === AttributeMarker.ImplicitAttributes) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  }\n\n  // search until you find place of insertion\n  while (i < dst.length) {\n    const item = dst[i];\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      if (key2 === null) {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n        return;\n      } else if (key2 === dst[i + 1]) {\n        dst[i + 2] = value!;\n        return;\n      }\n    }\n    // Increment counter.\n    i++;\n    if (key2 !== null) i++;\n    if (value !== null) i++;\n  }\n\n  // insert at location.\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n  dst.splice(i++, 0, key1);\n  if (key2 !== null) {\n    dst.splice(i++, 0, key2);\n  }\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertGreaterThan, assertNotEqual, assertNumber} from '../../util/assert';\nimport {NO_PARENT_INJECTOR, RelativeInjectorLocation, RelativeInjectorLocationFlags} from '../interfaces/injector';\nimport {DECLARATION_VIEW, HEADER_OFFSET, LView} from '../interfaces/view';\n\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nexport function hasParentInjector(parentLocation: RelativeInjectorLocation): boolean {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\n\nexport function getParentInjectorIndex(parentLocation: RelativeInjectorLocation): number {\n  ngDevMode && assertNumber(parentLocation, 'Number expected');\n  ngDevMode && assertNotEqual(parentLocation as any, -1, 'Not a valid state.');\n  const parentInjectorIndex =\n      (parentLocation as any as number) & RelativeInjectorLocationFlags.InjectorIndexMask;\n  ngDevMode &&\n      assertGreaterThan(\n          parentInjectorIndex, HEADER_OFFSET,\n          'Parent injector must be pointing past HEADER_OFFSET.');\n  return (parentLocation as any as number) & RelativeInjectorLocationFlags.InjectorIndexMask;\n}\n\nexport function getParentInjectorViewOffset(parentLocation: RelativeInjectorLocation): number {\n  return (parentLocation as any as number) >> RelativeInjectorLocationFlags.ViewOffsetShift;\n}\n\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location: RelativeInjectorLocation, startView: LView): LView {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW]!;\n    viewOffset--;\n  }\n  return parentView;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isForwardRef, resolveForwardRef} from '../di/forward_ref';\nimport {injectRootLimpMode, setInjectImplementation} from '../di/inject_switch';\nimport {Injector} from '../di/injector';\nimport {InjectorMarkers} from '../di/injector_marker';\nimport {InjectFlags} from '../di/interface/injector';\nimport {ProviderToken} from '../di/provider_token';\nimport {Type} from '../interface/type';\nimport {assertDefined, assertEqual, assertIndexInRange} from '../util/assert';\nimport {noSideEffects} from '../util/closure';\n\nimport {assertDirectiveDef, assertNodeInjector, assertTNodeForLView} from './assert';\nimport {FactoryFn, getFactoryDef} from './definition_factory';\nimport {throwCyclicDependencyError, throwProviderNotFoundError} from './errors_di';\nimport {NG_ELEMENT_ID, NG_FACTORY_DEF} from './fields';\nimport {registerPreOrderHooks} from './hooks';\nimport {DirectiveDef} from './interfaces/definition';\nimport {isFactory, NO_PARENT_INJECTOR, NodeInjectorFactory, NodeInjectorOffset, RelativeInjectorLocation, RelativeInjectorLocationFlags} from './interfaces/injector';\nimport {AttributeMarker, TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TNode, TNodeProviderIndexes, TNodeType} from './interfaces/node';\nimport {isComponentDef, isComponentHost} from './interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, DECLARATION_VIEW, INJECTOR, LView, T_HOST, TData, TVIEW, TView, TViewType} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {enterDI, getCurrentTNode, getLView, leaveDI} from './state';\nimport {isNameOnlyAttributeMarker} from './util/attrs_utils';\nimport {getParentInjectorIndex, getParentInjectorView, hasParentInjector} from './util/injector_utils';\nimport {stringifyForError} from './util/stringify_utils';\n\n\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\n\nexport function setIncludeViewProviders(v: boolean): boolean {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nexport function bloomAdd(\n    injectorIndex: number, tView: TView, type: ProviderToken<any>|string): void {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id: number|undefined;\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = (type as any)[NG_ELEMENT_ID];\n  }\n\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = (type as any)[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomHash = id & BLOOM_MASK;\n\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n\n  // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n  (tView.data as number[])[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nexport function getOrCreateNodeInjectorForNode(\n    tNode: TElementNode|TContainerNode|TElementContainerNode, lView: LView): number {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n\n  const tView = lView[TVIEW];\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode);  // foundation for node bloom\n    insertBloom(lView, null);        // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n  }\n\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex;\n\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data as any;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < NodeInjectorOffset.BLOOM_SIZE; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n\n  lView[injectorIndex + NodeInjectorOffset.PARENT] = parentLoc;\n  return injectorIndex;\n}\n\nfunction insertBloom(arr: any[], footer: TNode|null): void {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n\n\nexport function getInjectorIndex(tNode: TNode, lView: LView): number {\n  if (tNode.injectorIndex === -1 ||\n      // If the injector index is the same as its parent's injector index, then the index has been\n      // copied down from the parent node. No injector has been created yet on this node.\n      (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n      // After the first template pass, the injector index might exist but the parent values\n      // might not have been calculated yet for this instance\n      lView[tNode.injectorIndex + NodeInjectorOffset.PARENT] === null) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nexport function getParentInjectorLocation(tNode: TNode, lView: LView): RelativeInjectorLocation {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex as any;  // ViewOffset is 0\n  }\n\n  // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n  let declarationViewOffset = 0;\n  let parentTNode: TNode|null = null;\n  let lViewCursor: LView|null = lView;\n\n  // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n  while (lViewCursor !== null) {\n    // First determine the `parentTNode` location. The parent pointer differs based on `TView.type`.\n    const tView = lViewCursor[TVIEW];\n    const tViewType = tView.type;\n    if (tViewType === TViewType.Embedded) {\n      ngDevMode &&\n          assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n      parentTNode = tView.declTNode;\n    } else if (tViewType === TViewType.Component) {\n      // Components don't have `TView.declTNode` because each instance of component could be\n      // inserted in different location, hence `TView.declTNode` is meaningless.\n      parentTNode = lViewCursor[T_HOST];\n    } else {\n      ngDevMode && assertEqual(tView.type, TViewType.Root, 'Root type expected');\n      parentTNode = null;\n    }\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode!, lViewCursor[DECLARATION_VIEW]!);\n    // Every iteration of the loop requires that we go to the declared parent.\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return (parentTNode.injectorIndex |\n              (declarationViewOffset << RelativeInjectorLocationFlags.ViewOffsetShift)) as any;\n    }\n  }\n  return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nexport function diPublicInInjector(\n    injectorIndex: number, tView: TView, token: ProviderToken<any>): void {\n  bloomAdd(injectorIndex, tView, token);\n}\n\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nexport function injectAttributeImpl(tNode: TNode, attrNameToInject: string): string|null {\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyContainer | TNodeType.AnyRNode);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n\n  const attrs = tNode.attrs;\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n    while (i < attrsLength) {\n      const value = attrs[i];\n\n      // If we hit a `Bindings` or `Template` marker then we are done.\n      if (isNameOnlyAttributeMarker(value)) break;\n\n      // Skip namespaced attributes\n      if (value === AttributeMarker.NamespaceURI) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1] as string;\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n  return null;\n}\n\n\nfunction notFoundValueOrThrow<T>(\n    notFoundValue: T|null, token: ProviderToken<T>, flags: InjectFlags): T|null {\n  if (flags & InjectFlags.Optional) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector<T>(\n    lView: LView, token: ProviderToken<T>, flags: InjectFlags, notFoundValue?: any): T|null {\n  if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    const moduleInjector = lView[INJECTOR];\n    // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  return notFoundValueOrThrow<T>(notFoundValue, token, flags);\n}\n\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nexport function getOrCreateInjectable<T>(\n    tNode: TDirectiveHostNode|null, lView: LView, token: ProviderToken<T>,\n    flags: InjectFlags = InjectFlags.Default, notFoundValue?: any): T|null {\n  if (tNode !== null) {\n    const bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function') {\n      if (!enterDI(lView, tNode, flags)) {\n        // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n        // flag, the module injector is not searched for that token in Ivy.\n        return (flags & InjectFlags.Host) ?\n            notFoundValueOrThrow<T>(notFoundValue, token, flags) :\n            lookupTokenUsingModuleInjector<T>(lView, token, flags, notFoundValue);\n      }\n      try {\n        const value = bloomHash(flags);\n        if (value == null && !(flags & InjectFlags.Optional)) {\n          throwProviderNotFoundError(token);\n        } else {\n          return value;\n        }\n      } finally {\n        leaveDI();\n      }\n    } else if (typeof bloomHash === 'number') {\n      // A reference to the previous injector TView that was found while climbing the element\n      // injector tree. This is used to know if viewProviders can be accessed on the current\n      // injector.\n      let previousTView: TView|null = null;\n      let injectorIndex = getInjectorIndex(tNode, lView);\n      let parentLocation: RelativeInjectorLocation = NO_PARENT_INJECTOR;\n      let hostTElementNode: TNode|null =\n          flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n\n      // If we should skip this injector, or if there is no injector on this node, start by\n      // searching the parent injector.\n      if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n        parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                                                lView[injectorIndex + NodeInjectorOffset.PARENT];\n\n        if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n          injectorIndex = -1;\n        } else {\n          previousTView = lView[TVIEW];\n          injectorIndex = getParentInjectorIndex(parentLocation);\n          lView = getParentInjectorView(parentLocation, lView);\n        }\n      }\n\n      // Traverse up the injector tree until we find a potential match or until we know there\n      // *isn't* a match.\n      while (injectorIndex !== -1) {\n        ngDevMode && assertNodeInjector(lView, injectorIndex);\n\n        // Check the current injector. If it matches, see if it contains token.\n        const tView = lView[TVIEW];\n        ngDevMode &&\n            assertTNodeForLView(\n                tView.data[injectorIndex + NodeInjectorOffset.TNODE] as TNode, lView);\n        if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n          // At this point, we have an injector which *may* contain the token, so we step through\n          // the providers and directives associated with the injector's corresponding node to get\n          // the instance.\n          const instance: T|null = searchTokensOnInjector<T>(\n              injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n          if (instance !== NOT_FOUND) {\n            return instance;\n          }\n        }\n        parentLocation = lView[injectorIndex + NodeInjectorOffset.PARENT];\n        if (parentLocation !== NO_PARENT_INJECTOR &&\n            shouldSearchParent(\n                flags,\n                lView[TVIEW].data[injectorIndex + NodeInjectorOffset.TNODE] === hostTElementNode) &&\n            bloomHasToken(bloomHash, injectorIndex, lView)) {\n          // The def wasn't found anywhere on this node, so it was a false positive.\n          // Traverse up the tree and continue searching.\n          previousTView = tView;\n          injectorIndex = getParentInjectorIndex(parentLocation);\n          lView = getParentInjectorView(parentLocation, lView);\n        } else {\n          // If we should not search parent OR If the ancestor bloom filter value does not have the\n          // bit corresponding to the directive we can give up on traversing up to find the specific\n          // injector.\n          injectorIndex = -1;\n        }\n      }\n    }\n  }\n\n  return lookupTokenUsingModuleInjector<T>(lView, token, flags, notFoundValue);\n}\n\nconst NOT_FOUND = {};\n\nexport function createNodeInjector(): Injector {\n  return new NodeInjector(getCurrentTNode()! as TDirectiveHostNode, getLView()) as any;\n}\n\nfunction searchTokensOnInjector<T>(\n    injectorIndex: number, lView: LView, token: ProviderToken<T>, previousTView: TView|null,\n    flags: InjectFlags, hostTElementNode: TNode|null) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + NodeInjectorOffset.TNODE] as TNode;\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n  const canAccessViewProviders = previousTView == null ?\n      // 1) This is the first invocation `previousTView == null` which means that we are at the\n      // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n      // to look into the ViewProviders is if:\n      // - we are on a component\n      // - AND the injector set `includeViewProviders` to true (implying that the token can see\n      // ViewProviders because it is the Component or a Service which itself was declared in\n      // ViewProviders)\n      (isComponentHost(tNode) && includeViewProviders) :\n      // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n      // In such a case we are only allowed to look into the ViewProviders if:\n      // - We just crossed from child View to Parent View `previousTView != currentTView`\n      // - AND the parent TNode is an Element.\n      // This means that we just came from the Component's View and therefore are allowed to see\n      // into the ViewProviders.\n      (previousTView != currentTView && ((tNode.type & TNodeType.AnyRNode) !== 0));\n\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n\n  const injectableIdx = locateDirectiveOrProvider(\n      tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode as TElementNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nexport function locateDirectiveOrProvider<T>(\n    tNode: TNode, tView: TView, token: ProviderToken<T>|string, canAccessViewProviders: boolean,\n    isHostSpecialCase: boolean|number): number|null {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n\n  const injectablesStart = nodeProviderIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount =\n      nodeProviderIndexes >> TNodeProviderIndexes.CptViewProvidersCountShift;\n  const startingIndex =\n      canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i] as ProviderToken<any>| DirectiveDef<any>| string;\n    if (i < directivesStart && token === providerTokenOrDef ||\n        i >= directivesStart && (providerTokenOrDef as DirectiveDef<any>).type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart] as DirectiveDef<any>;\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nexport function getNodeInjectable(\n    lView: LView, tView: TView, index: number, tNode: TDirectiveHostNode): any {\n  let value = lView[index];\n  const tData = tView.data;\n  if (isFactory(value)) {\n    const factory: NodeInjectorFactory = value;\n    if (factory.resolving) {\n      throwCyclicDependencyError(stringifyForError(tData[index]));\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    const previousInjectImplementation =\n        factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n    const success = enterDI(lView, tNode, InjectFlags.Default);\n    ngDevMode &&\n        assertEqual(\n            success, true,\n            'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n    try {\n      value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n      // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index] as DirectiveDef<any>, tView);\n      }\n    } finally {\n      previousInjectImplementation !== null &&\n          setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n    }\n  }\n  return value;\n}\n\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nexport function bloomHashBitOrFactory(token: ProviderToken<any>|string): number|Function|undefined {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId: number|undefined =\n      // First check with `hasOwnProperty` so we don't get an inherited ID.\n      token.hasOwnProperty(NG_ELEMENT_ID) ? (token as any)[NG_ELEMENT_ID] : undefined;\n  // Negative token IDs are used for special objects such as `Injector`\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode &&\n          assertEqual(tokenId, InjectorMarkers.Injector, 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\n\nexport function bloomHasToken(bloomHash: number, injectorIndex: number, injectorView: LView|TData) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n\n  // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags: InjectFlags, isFirstHostTNode: boolean): boolean|number {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\n\nexport class NodeInjector implements Injector {\n  constructor(\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode|null,\n      private _lView: LView) {}\n\n  get(token: any, notFoundValue?: any, flags?: InjectFlags): any {\n    return getOrCreateInjectable(this._tNode, this._lView, token, flags, notFoundValue);\n  }\n}\n\n/**\n * @codeGenApi\n */\nexport function ɵɵgetInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n\n      // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n\n      parent = Object.getPrototypeOf(parent);\n    }\n\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return t => new t();\n  });\n}\n\nfunction getFactoryOf<T>(type: Type<any>): ((type?: Type<T>) => T | null)|null {\n  if (isForwardRef(type)) {\n    return () => {\n      const factory = getFactoryOf<T>(resolveForwardRef(type));\n      return factory && factory();\n    };\n  }\n  return getFactoryDef<T>(type);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {injectAttributeImpl} from '../di';\nimport {getCurrentTNode} from '../state';\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nexport function ɵɵinjectAttribute(attrNameToInject: string): string|null {\n  return injectAttributeImpl(getCurrentTNode()!, attrNameToInject);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\n\nimport {noSideEffects} from './closure';\n\n\n\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as\n * decorators as well as Angular syntax.\n *\n * ```\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @publicApi\n */\nexport interface TypeDecorator {\n  /**\n   * Invoke as decorator.\n   */\n  <T extends Type<any>>(type: T): T;\n\n  // Make TypeDecorator assignable to built-in ParameterDecorator type.\n  // ParameterDecorator is declared in lib.d.ts as a `declare type`\n  // so we cannot declare this interface as a subtype.\n  // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\n  (target: Object, propertyKey?: string|symbol, parameterIndex?: number): void;\n}\n\nexport const ANNOTATIONS = '__annotations__';\nexport const PARAMETERS = '__parameters__';\nexport const PROP_METADATA = '__prop__metadata__';\n\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator<T>(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (type: Type<T>) => void,\n    typeFn?: (type: Type<T>, ...args: any[]) => void):\n    {new (...args: any[]): any; (...args: any[]): any; (...args: any[]): (cls: any) => any;} {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function DecoratorFactory(\n        this: unknown|typeof DecoratorFactory, ...args: any[]): (cls: Type<T>) => any {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this as typeof DecoratorFactory;\n      }\n\n      const annotationInstance = new (DecoratorFactory as any)(...args);\n      return function TypeDecorator(cls: Type<T>) {\n        if (typeFn) typeFn(cls, ...args);\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n            (cls as any)[ANNOTATIONS] :\n            (Object.defineProperty(cls, ANNOTATIONS, {value: []}) as any)[ANNOTATIONS];\n        annotations.push(annotationInstance);\n\n\n        if (additionalProcessing) additionalProcessing(cls);\n\n        return cls;\n      };\n    }\n\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (DecoratorFactory as any).annotationCls = DecoratorFactory;\n    return DecoratorFactory as any;\n  });\n}\n\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\n  return function ctor(this: any, ...args: any[]) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\n\nexport function makeParamDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(\n        this: unknown|typeof ParamDecoratorFactory, ...args: any[]): any {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\n\n      (<any>ParamDecorator).annotation = annotationInstance;\n      return ParamDecorator;\n\n      function ParamDecorator(cls: any, unusedKey: any, index: number): any {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS) ?\n            (cls as any)[PARAMETERS] :\n            Object.defineProperty(cls, PARAMETERS, {value: []})[PARAMETERS];\n\n        // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n    if (parentClass) {\n      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\n\nexport function makePropDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (target: any, name: string, ...args: any[]) => void): any {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function PropDecoratorFactory(this: unknown|typeof PropDecoratorFactory, ...args: any[]): any {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n\n      const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\n\n      function PropDecorator(target: any, name: string) {\n        const constructor = target.constructor;\n        // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n        const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n            (constructor as any)[PROP_METADATA] :\n            Object.defineProperty(constructor, PROP_METADATA, {value: {}})[PROP_METADATA];\n        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n        meta[name].unshift(decoratorInstance);\n\n        if (additionalProcessing) additionalProcessing(target, name, ...args);\n      }\n\n      return PropDecorator;\n    }\n\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵinjectAttribute} from '../render3/instructions/di_attr';\nimport {makeParamDecorator} from '../util/decorators';\n\n\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * @publicApi\n */\nexport interface AttributeDecorator {\n  /**\n   * Parameter decorator for a directive constructor that designates\n   * a host-element attribute whose value is injected as a constant string literal.\n   *\n   * @usageNotes\n   *\n   * Suppose we have an `<input>` element and want to know its `type`.\n   *\n   * ```html\n   * <input type=\"text\">\n   * ```\n   *\n   * The following example uses the decorator to inject the string literal `text` in a directive.\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n   *\n   * The following example uses the decorator in a component constructor.\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n   *\n   */\n  (name: string): any;\n  new(name: string): Attribute;\n}\n\n/**\n * Type of the Attribute metadata.\n *\n * @publicApi\n */\nexport interface Attribute {\n  /**\n   * The name of the attribute whose value can be injected.\n   */\n  attributeName: string;\n}\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Attribute: AttributeDecorator = makeParamDecorator(\n    'Attribute',\n    (attributeName?: string) =>\n        ({attributeName, __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName!)}));\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {assertLessThan} from '../util/assert';\n\nimport {ɵɵdefineInjectable} from './interface/defs';\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nexport class InjectionToken<T> {\n  /** @internal */\n  readonly ngMetadataName = 'InjectionToken';\n\n  readonly ɵprov: unknown;\n\n  /**\n   * @param _desc   Description for the token,\n   *                used only for debugging purposes,\n   *                it should but does not need to be unique\n   * @param options Options for the token's usage, as described above\n   */\n  constructor(protected _desc: string, options?: {\n    providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T\n  }) {\n    this.ɵprov = undefined;\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          assertLessThan(options, 0, 'Only negative numbers are supported here');\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n      (this as any).__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory,\n      });\n    }\n  }\n\n  toString(): string {\n    return `InjectionToken ${this._desc}`;\n  }\n}\n\nexport interface InjectableDefToken<T> extends InjectionToken<T> {\n  ɵprov: unknown;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {ProviderToken} from '../di/provider_token';\nimport {makePropDecorator} from '../util/decorators';\n\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * @usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @publicApi\n * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n */\nexport const ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken<any>('AnalyzeForEntryComponents');\n\n/**\n * Type of the `Attribute` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface AttributeDecorator {\n  /**\n   * Specifies that a constant attribute value should be injected.\n   *\n   * The directive can inject constant string literals of host element attributes.\n   *\n   * @usageNotes\n   *\n   * Suppose we have an `<input>` element and want to know its `type`.\n   *\n   * ```html\n   * <input type=\"text\">\n   * ```\n   *\n   * A decorator can inject string literal `text` as in the following example.\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n   *\n   * @publicApi\n   */\n  (name: string): any;\n  new(name: string): Attribute;\n}\n\n\n/**\n * Type of the Attribute metadata.\n *\n * @publicApi\n */\nexport interface Attribute {\n  /**\n   * The name of the attribute to be injected into the constructor.\n   */\n  attributeName?: string;\n}\n\n/**\n * Type of the Query metadata.\n *\n * @publicApi\n */\nexport interface Query {\n  descendants: boolean;\n  emitDistinctChangesOnly: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n  static?: boolean;\n}\n\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nexport const emitDistinctChangesOnlyDefaultValue = true;\n\n\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * @publicApi\n */\nexport abstract class Query {}\n\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @see `ContentChildren`.\n * @publicApi\n */\nexport interface ContentChildrenDecorator {\n  /**\n   * @description\n   * Property decorator that configures a content query.\n   *\n   * Use to get the `QueryList` of elements or directives from the content DOM.\n   * Any time a child element is added, removed, or moved, the query list will be\n   * updated, and the changes observable of the query list will emit a new value.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * Does not retrieve elements or directives that are in other components' templates,\n   * since a component's template is always a black box to its ancestors.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **descendants** - If `true` include all descendants of the element. If `false` then only\n   * query direct children of the element.\n   * * **emitDistinctChangesOnly** - The ` QueryList#changes` observable will emit new values only\n   *   if the QueryList result has changed. When `false` the `changes` observable might emit even\n   *   if the QueryList has not changed.\n   *   ** Note: *** This config option is **deprecated**, it will be permanently set to `true` and\n   *   removed in future versions of Angular.\n   * * **read** - Used to read a different token from the queried elements.\n   *\n   * The following selectors are supported.\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * A template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ContentChildren('cmp')`)\n   *   * Any provider defined in the child component tree of the current component (e.g.\n   * `@ContentChildren(SomeService) someService: SomeService`)\n   *   * Any provider defined through a string token (e.g. `@ContentChildren('someToken')\n   * someTokenVal: any`)\n   *   * A `TemplateRef` (e.g. query `<ng-template></ng-template>` with\n   * `@ContentChildren(TemplateRef) template;`)\n   *\n   * In addition, multiple string selectors can be separated with a comma (e.g.\n   * `@ContentChildren('cmp1,cmp2')`)\n   *\n   * The following values are supported by `read`:\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * Any provider defined on the injector of the component that is matched by the `selector` of\n   * this query\n   *   * Any provider defined through a string token (e.g. `{provide: 'token', useValue: 'val'}`)\n   *   * `TemplateRef`, `ElementRef`, and `ViewContainerRef`\n   *\n   * @usageNotes\n   *\n   * Here is a simple demonstration of how the `ContentChildren` decorator can be used.\n   *\n   * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n   *\n   * ### Tab-pane example\n   *\n   * Here is a slightly more realistic example that shows how `ContentChildren` decorators\n   * can be used to implement a tab pane component.\n   *\n   * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: ProviderToken<unknown>|Function|string, opts?: {\n    descendants?: boolean,\n    emitDistinctChangesOnly?: boolean,\n    read?: any,\n  }): any;\n  new(selector: ProviderToken<unknown>|Function|string,\n      opts?: {descendants?: boolean, emitDistinctChangesOnly?: boolean, read?: any}): Query;\n}\n\n/**\n * Type of the ContentChildren metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport type ContentChildren = Query;\n\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport const ContentChildren: ContentChildrenDecorator = makePropDecorator(\n    'ContentChildren', (selector?: any, data: any = {}) => ({\n                         selector,\n                         first: false,\n                         isViewQuery: false,\n                         descendants: false,\n                         emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n                         ...data\n                       }),\n    Query);\n\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n * @publicApi\n */\nexport interface ContentChildDecorator {\n  /**\n   * @description\n   * Property decorator that configures a content query.\n   *\n   * Use to get the first element or the directive matching the selector from the content DOM.\n   * If the content DOM changes, and a new child matches the selector,\n   * the property will be updated.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * Does not retrieve elements or directives that are in other components' templates,\n   * since a component's template is always a black box to its ancestors.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **read** - Used to read a different token from the queried element.\n   * * **static** - True to resolve query results before change detection runs,\n   * false to resolve after change detection. Defaults to false.\n   *\n   * The following selectors are supported.\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * A template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ContentChild('cmp')`)\n   *   * Any provider defined in the child component tree of the current component (e.g.\n   * `@ContentChild(SomeService) someService: SomeService`)\n   *   * Any provider defined through a string token (e.g. `@ContentChild('someToken') someTokenVal:\n   * any`)\n   *   * A `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ContentChild(TemplateRef)\n   * template;`)\n   *\n   * The following values are supported by `read`:\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * Any provider defined on the injector of the component that is matched by the `selector` of\n   * this query\n   *   * Any provider defined through a string token (e.g. `{provide: 'token', useValue: 'val'}`)\n   *   * `TemplateRef`, `ElementRef`, and `ViewContainerRef`\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: ProviderToken<unknown>|Function|string, opts?: {read?: any, static?: boolean}): any;\n  new(selector: ProviderToken<unknown>|Function|string,\n      opts?: {read?: any, static?: boolean}): ContentChild;\n}\n\n/**\n * Type of the ContentChild metadata.\n *\n * @publicApi\n */\nexport type ContentChild = Query;\n\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nexport const ContentChild: ContentChildDecorator = makePropDecorator(\n    'ContentChild',\n    (selector?: any, data: any = {}) =>\n        ({selector, first: true, isViewQuery: false, descendants: true, ...data}),\n    Query);\n\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @see `ViewChildren`.\n *\n * @publicApi\n */\nexport interface ViewChildrenDecorator {\n  /**\n   * @description\n   * Property decorator that configures a view query.\n   *\n   * Use to get the `QueryList` of elements or directives from the view DOM.\n   * Any time a child element is added, removed, or moved, the query list will be updated,\n   * and the changes observable of the query list will emit a new value.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **read** - Used to read a different token from the queried elements.\n   * * **emitDistinctChangesOnly** - The ` QueryList#changes` observable will emit new values only\n   *   if the QueryList result has changed. When `false` the `changes` observable might emit even\n   *   if the QueryList has not changed.\n   *   ** Note: *** This config option is **deprecated**, it will be permanently set to `true` and\n   * removed in future versions of Angular.\n   *\n   * The following selectors are supported.\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * A template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ViewChildren('cmp')`)\n   *   * Any provider defined in the child component tree of the current component (e.g.\n   * `@ViewChildren(SomeService) someService!: SomeService`)\n   *   * Any provider defined through a string token (e.g. `@ViewChildren('someToken')\n   * someTokenVal!: any`)\n   *   * A `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChildren(TemplateRef)\n   * template;`)\n   *\n   * In addition, multiple string selectors can be separated with a comma (e.g.\n   * `@ViewChildren('cmp1,cmp2')`)\n   *\n   * The following values are supported by `read`:\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * Any provider defined on the injector of the component that is matched by the `selector` of\n   * this query\n   *   * Any provider defined through a string token (e.g. `{provide: 'token', useValue: 'val'}`)\n   *   * `TemplateRef`, `ElementRef`, and `ViewContainerRef`\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n   *\n   * ### Another example\n   *\n   * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: ProviderToken<unknown>|Function|string,\n   opts?: {read?: any, emitDistinctChangesOnly?: boolean}): any;\n  new(selector: ProviderToken<unknown>|Function|string,\n      opts?: {read?: any, emitDistinctChangesOnly?: boolean}): ViewChildren;\n}\n\n/**\n * Type of the ViewChildren metadata.\n *\n * @publicApi\n */\nexport type ViewChildren = Query;\n\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChildren: ViewChildrenDecorator = makePropDecorator(\n    'ViewChildren', (selector?: any, data: any = {}) => ({\n                      selector,\n                      first: false,\n                      isViewQuery: true,\n                      descendants: true,\n                      emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n                      ...data\n                    }),\n    Query);\n\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @see `ViewChild`.\n * @publicApi\n */\nexport interface ViewChildDecorator {\n  /**\n   * @description\n   * Property decorator that configures a view query.\n   * The change detector looks for the first element or the directive matching the selector\n   * in the view DOM. If the view DOM changes, and a new child matches the selector,\n   * the property is updated.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **read** - Used to read a different token from the queried elements.\n   * * **static** - True to resolve query results before change detection runs,\n   * false to resolve after change detection. Defaults to false.\n   *\n   *\n   * The following selectors are supported.\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * A template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ViewChild('cmp')`)\n   *   * Any provider defined in the child component tree of the current component (e.g.\n   * `@ViewChild(SomeService) someService: SomeService`)\n   *   * Any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal:\n   * any`)\n   *   * A `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef)\n   * template;`)\n   *\n   * The following values are supported by `read`:\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * Any provider defined on the injector of the component that is matched by the `selector` of\n   * this query\n   *   * Any provider defined through a string token (e.g. `{provide: 'token', useValue: 'val'}`)\n   *   * `TemplateRef`, `ElementRef`, and `ViewContainerRef`\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n   *\n   * ### Example 2\n   *\n   * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n   *\n   * @Annotation\n   */\n  (selector: ProviderToken<unknown>|Function|string, opts?: {read?: any, static?: boolean}): any;\n  new(selector: ProviderToken<unknown>|Function|string,\n      opts?: {read?: any, static?: boolean}): ViewChild;\n}\n\n/**\n * Type of the ViewChild metadata.\n *\n * @publicApi\n */\nexport type ViewChild = Query;\n\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChild: ViewChildDecorator = makePropDecorator(\n    'ViewChild',\n    (selector: any, data: any) =>\n        ({selector, first: true, isViewQuery: true, descendants: true, ...data}),\n    Query);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {global} from '../util/global';\nimport {CompilerFacade, ExportedCompilerFacade, Type} from './compiler_facade_interface';\nexport * from './compiler_facade_interface';\n\nexport const enum JitCompilerUsage {\n  Decorator,\n  PartialDeclaration,\n}\n\ninterface JitCompilerUsageRequest {\n  usage: JitCompilerUsage;\n  kind: 'directive'|'component'|'pipe'|'injectable'|'NgModule';\n  type: Type;\n}\n\nexport function getCompilerFacade(request: JitCompilerUsageRequest): CompilerFacade {\n  const globalNg: ExportedCompilerFacade = global['ng'];\n  if (globalNg && globalNg.ɵcompilerFacade) {\n    return globalNg.ɵcompilerFacade;\n  }\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Log the type as an error so that a developer can easily navigate to the type from the\n    // console.\n    console.error(`JIT compilation failed for ${request.kind}`, request.type);\n\n    let message = `The ${request.kind} '${\n        request\n            .type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n    if (request.usage === JitCompilerUsage.PartialDeclaration) {\n      message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n      message +=\n          `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n      message += '\\n';\n      message +=\n          `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n    } else {\n      message +=\n          `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n    }\n    message +=\n        `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n    message +=\n        `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n    throw new Error(message);\n  } else {\n    throw new Error('JIT compiler unavailable');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport const Type = Function;\n\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\n/**\n * @description\n *\n * Represents an abstract class `T`, if applied to a concrete class it would stop being\n * instantiable.\n *\n * @publicApi\n */\nexport interface AbstractType<T> extends Function {\n  prototype: T;\n}\n\nexport interface Type<T> extends Function {\n  new(...args: any[]): T;\n}\n\nexport type Mutable<T extends {[x: string]: any}, K extends string> = {\n  [P in K]: T[P];\n};\n\n/**\n * Returns a writable type version of type.\n *\n * USAGE:\n * Given:\n * ```\n * interface Person {readonly name: string}\n * ```\n *\n * We would like to get a read/write version of `Person`.\n * ```\n * const WritablePerson = Writable<Person>;\n * ```\n *\n * The result is that you can do:\n *\n * ```\n * const readonlyPerson: Person = {name: 'Marry'};\n * readonlyPerson.name = 'John'; // TypeError\n * (readonlyPerson as WritablePerson).name = 'John'; // OK\n *\n * // Error: Correctly detects that `Person` did not have `age` property.\n * (readonlyPerson as WritablePerson).age = 30;\n * ```\n */\nexport type Writable<T> = {\n  -readonly[K in keyof T]: T[K];\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertLessThanOrEqual} from './assert';\n\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param items The items to add\n * @param arr The array to which you want to add the items\n */\nexport function addAllToArray(items: any[], arr: any[]) {\n  for (let i = 0; i < items.length; i++) {\n    arr.push(items[i]);\n  }\n}\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nexport function arrayEquals<T>(a: T[], b: T[], identityAccessor?: (value: T) => unknown): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA) as any;\n      valueB = identityAccessor(valueB) as any;\n    }\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n/**\n * Flattens an array.\n */\nexport function flatten(list: any[], dst?: any[]): any[] {\n  if (dst === undefined) dst = list;\n  for (let i = 0; i < list.length; i++) {\n    let item = list[i];\n    if (Array.isArray(item)) {\n      // we need to inline it.\n      if (dst === list) {\n        // Our assumption that the list was already flat was wrong and\n        // we need to clone flat since we need to write to it.\n        dst = list.slice(0, i);\n      }\n      flatten(item, dst);\n    } else if (dst !== list) {\n      dst.push(item);\n    }\n  }\n  return dst;\n}\n\nexport function deepForEach<T>(input: (T|any[])[], fn: (value: T) => void): void {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\n\nexport function addToArray(arr: any[], index: number, value: any): void {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\n\nexport function removeFromArray(arr: any[], index: number): any {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\n\nexport function newArray<T = any>(size: number): T[];\nexport function newArray<T>(size: number, value: T): T[];\nexport function newArray<T>(size: number, value?: T): T[] {\n  const list: T[] = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value!);\n  }\n  return list;\n}\n\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nexport function arraySplice(array: any[], index: number, count: number): void {\n  const length = array.length - count;\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n  while (count--) {\n    array.pop();  // shrink the array\n  }\n}\n\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nexport function arrayInsert(array: any[], index: number, value: any): void {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  while (end > index) {\n    const previousEnd = end - 1;\n    array[end] = array[previousEnd];\n    end = previousEnd;\n  }\n  array[index] = value;\n}\n\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nexport function arrayInsert2(array: any[], index: number, value1: any, value2: any): void {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n\n/**\n * Insert a `value` into an `array` so that the array remains sorted.\n *\n * NOTE:\n * - Duplicates are not allowed, and are ignored.\n * - This uses binary search algorithm for fast inserts.\n *\n * @param array A sorted array to insert into.\n * @param value The value to insert.\n * @returns index of the inserted value.\n */\nexport function arrayInsertSorted(array: string[], value: string): number {\n  let index = arrayIndexOfSorted(array, value);\n  if (index < 0) {\n    // if we did not find it insert it.\n    index = ~index;\n    arrayInsert(array, index, value);\n  }\n  return index;\n}\n\n/**\n * Remove `value` from a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to remove from.\n * @param value The value to remove.\n * @returns index of the removed value.\n *   - positive index if value found and removed.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     inserted)\n */\nexport function arrayRemoveSorted(array: string[], value: string): number {\n  const index = arrayIndexOfSorted(array, value);\n  if (index >= 0) {\n    arraySplice(array, index, 1);\n  }\n  return index;\n}\n\n\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nexport function arrayIndexOfSorted(array: string[], value: string): number {\n  return _arrayIndexOfSorted(array, value, 0);\n}\n\n\n/**\n * `KeyValueArray` is an array where even positions contain keys and odd positions contain values.\n *\n * `KeyValueArray` provides a very efficient way of iterating over its contents. For small\n * sets (~10) the cost of binary searching an `KeyValueArray` has about the same performance\n * characteristics that of a `Map` with significantly better memory footprint.\n *\n * If used as a `Map` the keys are stored in alphabetical order so that they can be binary searched\n * for retrieval.\n *\n * See: `keyValueArraySet`, `keyValueArrayGet`, `keyValueArrayIndexOf`, `keyValueArrayDelete`.\n */\nexport interface KeyValueArray<VALUE> extends Array<VALUE|string> {\n  __brand__: 'array-map';\n}\n\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nexport function keyValueArraySet<V>(\n    keyValueArray: KeyValueArray<V>, key: string, value: V): number {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n  return index;\n}\n\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nexport function keyValueArrayGet<V>(keyValueArray: KeyValueArray<V>, key: string): V|undefined {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1] as V;\n  }\n  return undefined;\n}\n\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nexport function keyValueArrayIndexOf<V>(keyValueArray: KeyValueArray<V>, key: string): number {\n  return _arrayIndexOfSorted(keyValueArray as string[], key, 1);\n}\n\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nexport function keyValueArrayDelete<V>(keyValueArray: KeyValueArray<V>, key: string): number {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it remove it.\n    arraySplice(keyValueArray, index, 2);\n  }\n  return index;\n}\n\n\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array: string[], value: string, shift: number): number {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n  while (end !== start) {\n    const middle = start + ((end - start) >> 1);  // find the middle.\n    const current = array[middle << shift];\n    if (value === current) {\n      return (middle << shift);\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1;  // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n  return ~(end << shift);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isType, Type} from '../interface/type';\nimport {newArray} from '../util/array_utils';\nimport {ANNOTATIONS, PARAMETERS, PROP_METADATA} from '../util/decorators';\nimport {global} from '../util/global';\nimport {stringify} from '../util/stringify';\n\nimport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\nimport {GetterFn, MethodFn, SetterFn} from './types';\n\n\n\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\nexport const ES5_DELEGATE_CTOR =\n    /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nexport const ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\nexport const ES2015_INHERITED_CLASS_WITH_CTOR =\n    /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\nexport const ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR =\n    /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{\\s*super\\(\\.\\.\\.arguments\\)/;\n\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nexport function isDelegateCtor(typeStr: string): boolean {\n  return ES5_DELEGATE_CTOR.test(typeStr) ||\n      ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\n      (ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr));\n}\n\nexport class ReflectionCapabilities implements PlatformReflectionCapabilities {\n  private _reflect: any;\n\n  constructor(reflect?: any) {\n    this._reflect = reflect || global['Reflect'];\n  }\n\n  isReflectionEnabled(): boolean {\n    return true;\n  }\n\n  factory<T>(t: Type<T>): (args: any[]) => T {\n    return (...args: any[]) => new t(...args);\n  }\n\n  /** @internal */\n  _zipTypesAndAnnotations(paramTypes: any[], paramAnnotations: any[]): any[][] {\n    let result: any[][];\n\n    if (typeof paramTypes === 'undefined') {\n      result = newArray(paramAnnotations.length);\n    } else {\n      result = newArray(paramTypes.length);\n    }\n\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] && paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n\n  private _ownParameters(type: Type<any>, parentCtor: any): any[][]|null {\n    const typeStr = type.toString();\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (isDelegateCtor(typeStr)) {\n      return null;\n    }\n\n    // Prefer the direct API.\n    if ((<any>type).parameters && (<any>type).parameters !== parentCtor.parameters) {\n      return (<any>type).parameters;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    const tsickleCtorParams = (<any>type).ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const ctorParameters =\n          typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const paramTypes = ctorParameters.map((ctorParam: any) => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(\n          (ctorParam: any) =>\n              ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n\n    // API for metadata created by invoking the decorators.\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && (type as any)[PARAMETERS];\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n        this._reflect.getOwnMetadata('design:paramtypes', type);\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return newArray<any[]>(type.length);\n  }\n\n  parameters(type: Type<any>): any[][] {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(type);\n    let parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n\n  private _ownAnnotations(typeOrFunc: Type<any>, parentCtor: any): any[]|null {\n    // Prefer the direct API.\n    if ((<any>typeOrFunc).annotations && (<any>typeOrFunc).annotations !== parentCtor.annotations) {\n      let annotations = (<any>typeOrFunc).annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if ((<any>typeOrFunc).decorators && (<any>typeOrFunc).decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata((<any>typeOrFunc).decorators);\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return (typeOrFunc as any)[ANNOTATIONS];\n    }\n    return null;\n  }\n\n  annotations(typeOrFunc: Type<any>): any[] {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n\n  private _ownPropMetadata(typeOrFunc: any, parentCtor: any): {[key: string]: any[]}|null {\n    // Prefer the direct API.\n    if ((<any>typeOrFunc).propMetadata &&\n        (<any>typeOrFunc).propMetadata !== parentCtor.propMetadata) {\n      let propMetadata = (<any>typeOrFunc).propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if ((<any>typeOrFunc).propDecorators &&\n        (<any>typeOrFunc).propDecorators !== parentCtor.propDecorators) {\n      const propDecorators = (<any>typeOrFunc).propDecorators;\n      const propMetadata = <{[key: string]: any[]}>{};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return (typeOrFunc as any)[PROP_METADATA];\n    }\n    return null;\n  }\n\n  propMetadata(typeOrFunc: any): {[key: string]: any[]} {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const propMetadata: {[key: string]: any[]} = {};\n    if (parentCtor !== Object) {\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach((propName) => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach((propName) => {\n        const decorators: any[] = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n\n  ownPropMetadata(typeOrFunc: any): {[key: string]: any[]} {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n  }\n\n  hasLifecycleHook(type: any, lcProperty: string): boolean {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n\n  guards(type: any): {[key: string]: any} {\n    return {};\n  }\n\n  getter(name: string): GetterFn {\n    return <GetterFn>new Function('o', 'return o.' + name + ';');\n  }\n\n  setter(name: string): SetterFn {\n    return <SetterFn>new Function('o', 'v', 'return o.' + name + ' = v;');\n  }\n\n  method(name: string): MethodFn {\n    const functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n    return <MethodFn>new Function('o', 'args', functionBody);\n  }\n\n  // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n  importUri(type: any): string {\n    // StaticSymbol\n    if (typeof type === 'object' && type['filePath']) {\n      return type['filePath'];\n    }\n    // Runtime type\n    return `./${stringify(type)}`;\n  }\n\n  resourceUri(type: any): string {\n    return `./${stringify(type)}`;\n  }\n\n  resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any {\n    return runtime;\n  }\n  resolveEnum(enumIdentifier: any, name: string): any {\n    return enumIdentifier[name];\n  }\n}\n\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations: any[]): any[] {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\n\nfunction getParentCtor(ctor: Function): Type<any> {\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  const parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {Type} from '../interface/type';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {getInjectImplementation, injectRootLimpMode} from './inject_switch';\nimport {Injector} from './injector';\nimport {DecoratorFlags, InjectFlags, InternalInjectFlags} from './interface/injector';\nimport {ValueProvider} from './interface/provider';\nimport {ProviderToken} from './provider_token';\n\n\nconst _THROW_IF_NOT_FOUND = {};\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\n\nexport const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nexport const SOURCE = '__source';\n\nexport const USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector: Injector|undefined|null = undefined;\n\nexport function setCurrentInjector(injector: Injector|null|undefined): Injector|undefined|null {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\n\nexport function injectInjectorOnly<T>(token: ProviderToken<T>): T;\nexport function injectInjectorOnly<T>(token: ProviderToken<T>, flags?: InjectFlags): T|null;\nexport function injectInjectorOnly<T>(token: ProviderToken<T>, flags = InjectFlags.Default): T|\n    null {\n  if (_currentInjector === undefined) {\n    throw new Error(`inject() must be called from an injection context`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n  }\n}\n\n/**\n * Generated instruction: Injects a token from the currently active injector.\n *\n * Must be used in the context of a factory function such as one defined for an\n * `InjectionToken`. Throws an error if not called from such a context.\n *\n * (Additional documentation moved to `inject`, as it is the public API, and an alias for this\n * instruction)\n *\n * @see inject\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport function ɵɵinject<T>(token: ProviderToken<T>): T;\nexport function ɵɵinject<T>(token: ProviderToken<T>, flags?: InjectFlags): T|null;\nexport function ɵɵinject<T>(token: ProviderToken<T>, flags = InjectFlags.Default): T|null {\n  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport function ɵɵinvalidFactoryDep(index: number): never {\n  const msg = ngDevMode ?\n      `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${\n          index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${\n          index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.` :\n      'invalid';\n  throw new Error(msg);\n}\n\n/**\n * Injects a token from the currently active injector.\n *\n * Must be used in the context of a factory function such as one defined for an\n * `InjectionToken`. Throws an error if not called from such a context.\n *\n * Within such a factory function, using this function to request injection of a dependency\n * is faster and more type-safe than providing an additional array of dependencies\n * (as has been common with `useFactory` providers).\n *\n * @param token The injection token for the dependency to be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.\n * @returns the injected value if injection is successful, `null` otherwise.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @publicApi\n */\nexport const inject = ɵɵinject;\n\nexport function injectArgs(types: (ProviderToken<any>|any[])[]): any[] {\n  const args: any[] = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new Error('Arguments array must have arguments.');\n      }\n      let type: Type<any>|undefined = undefined;\n      let flags: InjectFlags = InjectFlags.Default;\n\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === DecoratorFlags.Inject) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n\n      args.push(ɵɵinject(type!, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n  return args;\n}\n\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nexport function attachInjectFlag(decorator: any, flag: InternalInjectFlags|DecoratorFlags): any {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nexport function getInjectFlag(token: any): number|undefined {\n  return token[DI_DECORATOR_FLAG];\n}\n\nexport function catchInjectorError(\n    e: any, token: any, injectorErrorName: string, source: string|null): never {\n  const tokenPath: any[] = e[NG_TEMP_TOKEN_PATH];\n  if (token[SOURCE]) {\n    tokenPath.unshift(token[SOURCE]);\n  }\n  e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n  e[NG_TOKEN_PATH] = tokenPath;\n  e[NG_TEMP_TOKEN_PATH] = null;\n  throw e;\n}\n\nexport function formatError(\n    text: string, obj: any, injectorErrorName: string, source: string|null = null): string {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n  let context = stringify(obj);\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = <string[]>[];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(\n            key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${\n      text.replace(NEW_LINE, '\\n  ')}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {makeParamDecorator} from '../util/decorators';\n\nimport {attachInjectFlag} from './injector_compatibility';\nimport {DecoratorFlags, InternalInjectFlags} from './interface/injector';\n\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectDecorator {\n  /**\n   * Parameter decorator on a dependency parameter of a class constructor\n   * that specifies a custom provider of the dependency.\n   *\n   * @usageNotes\n   * The following example shows a class constructor that specifies a\n   * custom provider of a dependency using the parameter decorator.\n   *\n   * When `@Inject()` is not present, the injector uses the type annotation of the\n   * parameter as the provider.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"InjectWithoutDecorator\">\n   * </code-example>\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection)\n   *\n   */\n  (token: any): any;\n  new(token: any): Inject;\n}\n\n/**\n * Type of the Inject metadata.\n *\n * @publicApi\n */\nexport interface Inject {\n  /**\n   * A [DI token](guide/glossary#di-token) that maps to the dependency to be injected.\n   */\n  token: any;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Inject: InjectDecorator = attachInjectFlag(\n    // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    makeParamDecorator('Inject', (token: any) => ({token})), DecoratorFlags.Inject);\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OptionalDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which marks the parameter as being an optional dependency.\n   * The DI framework provides `null` if the dependency is not found.\n   *\n   * Can be used together with other parameter decorators\n   * that modify how dependency injection operates.\n   *\n   * @usageNotes\n   *\n   * The following code allows the possibility of a `null` result:\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Optional\">\n   * </code-example>\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   */\n  (): any;\n  new(): Optional;\n}\n\n/**\n * Type of the Optional metadata.\n *\n * @publicApi\n */\nexport interface Optional {}\n\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Optional: OptionalDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('Optional'), InternalInjectFlags.Optional);\n\n/**\n * Type of the Self decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SelfDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which tells the DI framework to start dependency resolution from the local injector.\n   *\n   * Resolution works upward through the injector hierarchy, so the children\n   * of this class must configure their own providers or be prepared for a `null` result.\n   *\n   * @usageNotes\n   *\n   * In the following example, the dependency can be resolved\n   * by the local injector when instantiating the class itself, but not\n   * when instantiating a child.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Self\">\n   * </code-example>\n   *\n   * @see `SkipSelf`\n   * @see `Optional`\n   *\n   */\n  (): any;\n  new(): Self;\n}\n\n/**\n * Type of the Self metadata.\n *\n * @publicApi\n */\nexport interface Self {}\n\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Self: SelfDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('Self'), InternalInjectFlags.Self);\n\n\n/**\n * Type of the `SkipSelf` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SkipSelfDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which tells the DI framework to start dependency resolution from the parent injector.\n   * Resolution works upward through the injector hierarchy, so the local injector\n   * is not checked for a provider.\n   *\n   * @usageNotes\n   *\n   * In the following example, the dependency can be resolved when\n   * instantiating a child, but not when instantiating the class itself.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"SkipSelf\">\n   * </code-example>\n   *\n   * @see [Dependency Injection guide](guide/dependency-injection-in-action#skip).\n   * @see `Self`\n   * @see `Optional`\n   *\n   */\n  (): any;\n  new(): SkipSelf;\n}\n\n/**\n * Type of the `SkipSelf` metadata.\n *\n * @publicApi\n */\nexport interface SkipSelf {}\n\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const SkipSelf: SkipSelfDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('SkipSelf'), InternalInjectFlags.SkipSelf);\n\n/**\n * Type of the `Host` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostDecorator {\n  /**\n   * Parameter decorator on a view-provider parameter of a class constructor\n   * that tells the DI framework to resolve the view by checking injectors of child\n   * elements, and stop when reaching the host element of the current component.\n   *\n   * @usageNotes\n   *\n   * The following shows use with the `@Optional` decorator, and allows for a `null` result.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Host\">\n   * </code-example>\n   *\n   * For an extended example, see [\"Dependency Injection\n   * Guide\"](guide/dependency-injection-in-action#optional).\n   */\n  (): any;\n  new(): Host;\n}\n\n/**\n * Type of the Host metadata.\n *\n * @publicApi\n */\nexport interface Host {}\n\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Host: HostDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('Host'), InternalInjectFlags.Host);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {R3DependencyMetadataFacade} from '../../compiler/compiler_facade';\nimport {Type} from '../../interface/type';\nimport {ReflectionCapabilities} from '../../reflection/reflection_capabilities';\nimport {Host, Inject, Optional, Self, SkipSelf} from '../metadata';\nimport {Attribute} from '../metadata_attr';\n\nlet _reflect: ReflectionCapabilities|null = null;\n\nexport function getReflect(): ReflectionCapabilities {\n  return (_reflect = _reflect || new ReflectionCapabilities());\n}\n\nexport function reflectDependencies(type: Type<any>): R3DependencyMetadataFacade[] {\n  return convertDependencies(getReflect().parameters(type));\n}\n\nexport function convertDependencies(deps: any[]): R3DependencyMetadataFacade[] {\n  return deps.map(dep => reflectDependency(dep));\n}\n\nfunction reflectDependency(dep: any|any[]): R3DependencyMetadataFacade {\n  const meta: R3DependencyMetadataFacade = {\n    token: null,\n    attribute: null,\n    host: false,\n    optional: false,\n    self: false,\n    skipSelf: false,\n  };\n\n  if (Array.isArray(dep) && dep.length > 0) {\n    for (let j = 0; j < dep.length; j++) {\n      const param = dep[j];\n      if (param === undefined) {\n        // param may be undefined if type of dep is not set by ngtsc\n        continue;\n      }\n\n      const proto = Object.getPrototypeOf(param);\n\n      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = param.token;\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new Error(`Attribute name must be defined.`);\n        }\n        meta.attribute = param.attributeName;\n      } else {\n        meta.token = param;\n      }\n    }\n  } else if (dep === undefined || (Array.isArray(dep) && dep.length === 0)) {\n    meta.token = null;\n  } else {\n    meta.token = dep;\n  }\n  return meta;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n\nimport {global} from '../global';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL, TrustedTypePolicy, TrustedTypePolicyFactory} from './trusted_type_defs';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy: TrustedTypePolicy|null|undefined;\n\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy(): TrustedTypePolicy|null {\n  if (policy === undefined) {\n    policy = null;\n    if (global.trustedTypes) {\n      try {\n        policy = (global.trustedTypes as TrustedTypePolicyFactory).createPolicy('angular', {\n          createHTML: (s: string) => s,\n          createScript: (s: string) => s,\n          createScriptURL: (s: string) => s,\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nexport function trustedHTMLFromString(html: string): TrustedHTML|string {\n  return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nexport function trustedScriptFromString(script: string): TrustedScript|string {\n  return getPolicy()?.createScript(script) || script;\n}\n\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nexport function trustedScriptURLFromString(url: string): TrustedScriptURL|string {\n  return getPolicy()?.createScriptURL(url) || url;\n}\n\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nexport function newTrustedFunctionForDev(...args: string[]): Function {\n  if (typeof ngDevMode === 'undefined') {\n    throw new Error('newTrustedFunctionForDev should never be called in production');\n  }\n  if (!global.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  }\n\n  // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n\n  // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n  const fn = global['eval'](trustedScriptFromString(body) as string) as Function;\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  }\n\n  // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n  fn.toString = () => body;\n  // 2. When calling the resulting function, `this` should refer to `global`\n  return fn.bind(global);\n\n  // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\n * lazily constructs the Trusted Types policy, providing helper utilities for\n * promoting strings to Trusted Types. When Trusted Types are not available,\n * strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n\nimport {global} from '../global';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL, TrustedTypePolicy, TrustedTypePolicyFactory} from './trusted_type_defs';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy: TrustedTypePolicy|null|undefined;\n\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy(): TrustedTypePolicy|null {\n  if (policy === undefined) {\n    policy = null;\n    if (global.trustedTypes) {\n      try {\n        policy = (global.trustedTypes as TrustedTypePolicyFactory)\n                     .createPolicy('angular#unsafe-bypass', {\n                       createHTML: (s: string) => s,\n                       createScript: (s: string) => s,\n                       createScriptURL: (s: string) => s,\n                     });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nexport function trustedHTMLFromStringBypass(html: string): TrustedHTML|string {\n  return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nexport function trustedScriptFromStringBypass(script: string): TrustedScript|string {\n  return getPolicy()?.createScript(script) || script;\n}\n\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nexport function trustedScriptURLFromStringBypass(url: string): TrustedScriptURL|string {\n  return getPolicy()?.createScriptURL(url) || url;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nexport const enum BypassType {\n  Url = 'URL',\n  Html = 'HTML',\n  ResourceUrl = 'ResourceURL',\n  Script = 'Script',\n  Style = 'Style',\n}\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {}\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see https://g.co/ng/security#xss)`;\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  override getTypeName() {\n    return BypassType.Html;\n  }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  override getTypeName() {\n    return BypassType.Style;\n  }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  override getTypeName() {\n    return BypassType.Script;\n  }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  override getTypeName() {\n    return BypassType.Url;\n  }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  override getTypeName() {\n    return BypassType.ResourceUrl;\n  }\n}\n\nexport function unwrapSafeValue(value: SafeValue): string;\nexport function unwrapSafeValue<T>(value: T): T;\nexport function unwrapSafeValue<T>(value: T|SafeValue): T {\n  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity as any as T :\n                                          value as any as T;\n}\n\n\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.Html): value is SafeHtml;\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.ResourceUrl): value is SafeResourceUrl;\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.Script): value is SafeScript;\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.Style): value is SafeStyle;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType.Url): value is SafeUrl;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === BypassType.ResourceUrl && type === BypassType.Url) return true;\n    throw new Error(\n        `Required a safe ${type}, got a ${actualType} (see https://g.co/ng/security#xss)`);\n  }\n  return actualType === type;\n}\n\nexport function getSanitizationBypassType(value: any): BypassType|null {\n  return value instanceof SafeValueImpl && value.getTypeName() as BypassType || null;\n}\n\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml: string): SafeHtml {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle: string): SafeStyle {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript: string): SafeScript {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl: string): SafeUrl {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl: string): SafeResourceUrl {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {trustedHTMLFromString} from '../util/security/trusted_types';\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nexport function getInertBodyHelper(defaultDoc: Document): InertBodyHelper {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n\nexport interface InertBodyHelper {\n  /**\n   * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n   */\n  getInertBodyElement: (html: string) => HTMLElement | null;\n}\n\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper implements InertBodyHelper {\n  constructor(private inertDocumentHelper: InertBodyHelper) {}\n\n  getInertBodyElement(html: string): HTMLElement|null {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n    try {\n      const body = new window.DOMParser()\n                       .parseFromString(trustedHTMLFromString(html) as string, 'text/html')\n                       .body as HTMLBodyElement;\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n      body.removeChild(body.firstChild!);\n      return body;\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Use an HTML5 `template` element, if supported, or an inert body element created via\n * `createHtmlDocument` to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper implements InertBodyHelper {\n  private inertDocument: Document;\n\n  constructor(private defaultDoc: Document) {\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n\n    if (this.inertDocument.body == null) {\n      // usually there should be only one body element in the document, but IE doesn't have any, so\n      // we need to create one.\n      const inertHtml = this.inertDocument.createElement('html');\n      this.inertDocument.appendChild(inertHtml);\n      const inertBodyElement = this.inertDocument.createElement('body');\n      inertHtml.appendChild(inertBodyElement);\n    }\n  }\n\n  getInertBodyElement(html: string): HTMLElement|null {\n    // Prefer using <template> element if supported.\n    const templateEl = this.inertDocument.createElement('template');\n    if ('content' in templateEl) {\n      templateEl.innerHTML = trustedHTMLFromString(html) as string;\n      return templateEl;\n    }\n\n    // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`\n    // and we returned the inert `body` node. This was changed, because IE seems to treat setting\n    // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted\n    // yet. In particular, IE appears to split some of the text into multiple text nodes rather\n    // than keeping them in a single one which ends up messing with Ivy's i18n parsing further\n    // down the line. This has been worked around by creating a new inert `body` and using it as\n    // the root node in which we insert the HTML.\n    const inertBody = this.inertDocument.createElement('body');\n    inertBody.innerHTML = trustedHTMLFromString(html) as string;\n\n    // Support: IE 11 only\n    // strip custom-namespaced attributes on IE<=11\n    if ((this.defaultDoc as any).documentMode) {\n      this.stripCustomNsAttrs(inertBody);\n    }\n\n    return inertBody;\n  }\n\n  /**\n   * When IE11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n   * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n   * 'ns1:xlink:foo').\n   *\n   * This is undesirable since we don't want to allow any of these custom attributes. This method\n   * strips them all.\n   */\n  private stripCustomNsAttrs(el: Element) {\n    const elAttrs = el.attributes;\n    // loop backwards so that we can support removals.\n    for (let i = elAttrs.length - 1; 0 < i; i--) {\n      const attrib = elAttrs.item(i);\n      const attrName = attrib!.name;\n      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n        el.removeAttribute(attrName);\n      }\n    }\n    let childNode = el.firstChild as Node | null;\n    while (childNode) {\n      if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs(childNode as Element);\n      childNode = childNode.nextSibling;\n    }\n  }\n}\n\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nexport function isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(\n        trustedHTMLFromString('') as string, 'text/html');\n  } catch {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/* A pattern that matches safe srcset values */\nconst SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\nconst DATA_URL_PATTERN =\n    /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n\nexport function _sanitizeUrl(url: string): string {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see https://g.co/ng/security#xss)`);\n  }\n\n  return 'unsafe:' + url;\n}\n\nexport function sanitizeSrcset(srcset: string): string {\n  srcset = String(srcset);\n  return srcset.split(',').map((srcset) => _sanitizeUrl(srcset.trim())).join(', ');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TrustedHTML} from '../util/security/trusted_type_defs';\nimport {trustedHTMLFromString} from '../util/security/trusted_types';\nimport {getInertBodyHelper, InertBodyHelper} from './inert_body';\nimport {_sanitizeUrl, sanitizeSrcset} from './url_sanitizer';\n\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\n\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS =\n    merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(\n    OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n    tagSet(\n        'address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(\n    OPTIONAL_END_TAG_INLINE_ELEMENTS,\n    tagSet(\n        'a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n\nexport const VALID_ELEMENTS =\n    merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n\n// Attributes that have href and hence need to be sanitized\nexport const URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\n// Attributes that have special href set hence need to be sanitized\nexport const SRCSET_ATTRS = tagSet('srcset');\n\nconst HTML_ATTRS = tagSet(\n    'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet(\n    'aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nexport const VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n  // because characters were re-encoded.\n  public sanitizedSomething = false;\n  private buf: string[] = [];\n\n  sanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current: Node = el.firstChild!;\n    let traverseContent = true;\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current as Element);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue!);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        current = current.firstChild!;\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current as Element);\n        }\n\n        let next = this.checkClobberedElement(current, current.nextSibling!);\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        current = this.checkClobberedElement(current, current.parentNode!);\n      }\n    }\n    return this.buf.join('');\n  }\n\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @param element The element to sanitize.\n   * @return True if the element's contents should be traversed.\n   */\n  private startElement(element: Element): boolean {\n    const tagName = element.nodeName.toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr!.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr!.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n\n  private endElement(current: Element) {\n    const tagName = current.nodeName.toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n\n  private chars(chars: string) {\n    this.buf.push(encodeEntities(chars));\n  }\n\n  checkClobberedElement(node: Node, nextNode: Node): Node {\n    if (nextNode &&\n        (node.compareDocumentPosition(nextNode) &\n         Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(`Failed to sanitize html because the element is clobbered: ${\n          (node as Element).outerHTML}`);\n    }\n    return nextNode;\n  }\n}\n\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;')\n      .replace(\n          SURROGATE_PAIR_REGEXP,\n          function(match: string) {\n            const hi = match.charCodeAt(0);\n            const low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n          })\n      .replace(\n          NON_ALPHANUMERIC_REGEXP,\n          function(match: string) {\n            return '&#' + match.charCodeAt(0) + ';';\n          })\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n}\n\nlet inertBodyHelper: InertBodyHelper;\n\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): TrustedHTML|string {\n  let inertBodyElement: HTMLElement|null = null;\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement!.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(\n        getTemplateContent(inertBodyElement!) as Element || inertBodyElement);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn(\n          'WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss');\n    }\n\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\n\nexport function getTemplateContent(el: Node): Node|null {\n  return 'content' in (el as any /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n      el.content :\n      null;\n}\nfunction isTemplateElement(el: Node): el is HTMLTemplateElement {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getDocument} from '../render3/interfaces/document';\nimport {SANITIZER} from '../render3/interfaces/view';\nimport {getLView} from '../render3/state';\nimport {renderStringify} from '../render3/util/stringify_utils';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL} from '../util/security/trusted_type_defs';\nimport {trustedHTMLFromString, trustedScriptURLFromString} from '../util/security/trusted_types';\nimport {trustedHTMLFromStringBypass, trustedScriptFromStringBypass, trustedScriptURLFromStringBypass} from '../util/security/trusted_types_bypass';\n\nimport {allowSanitizationBypassAndThrow, BypassType, unwrapSafeValue} from './bypass';\nimport {_sanitizeHtml as _sanitizeHtml} from './html_sanitizer';\nimport {Sanitizer} from './sanitizer';\nimport {SecurityContext} from './security';\nimport {_sanitizeUrl as _sanitizeUrl} from './url_sanitizer';\n\n\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeHtml(unsafeHtml: any): TrustedHTML|string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeHtml, BypassType.Html)) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeStyle(unsafeStyle: any): string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeStyle, BypassType.Style)) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n  return renderStringify(unsafeStyle);\n}\n\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeUrl(unsafeUrl: any): string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeUrl, BypassType.Url)) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeResourceUrl(unsafeResourceUrl: any): TrustedScriptURL|string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(\n        sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, BypassType.ResourceUrl)) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n  throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');\n}\n\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeScript(unsafeScript: any): TrustedScript|string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(\n        sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeScript, BypassType.Script)) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n  throw new Error('unsafe value used in a script context');\n}\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nexport function ɵɵtrustConstantHtml(html: TemplateStringsArray): TrustedHTML|string {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n  return trustedHTMLFromString(html[0]);\n}\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nexport function ɵɵtrustConstantResourceUrl(url: TemplateStringsArray): TrustedScriptURL|string {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n  return trustedScriptURLFromString(url[0]);\n}\n\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nexport function getUrlSanitizer(tag: string, prop: string) {\n  if ((prop === 'src' &&\n       (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' ||\n        tag === 'script')) ||\n      (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n    return ɵɵsanitizeResourceUrl;\n  }\n  return ɵɵsanitizeUrl;\n}\n\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl: any, tag: string, prop: string): any {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\n\nexport function validateAgainstEventProperties(name: string) {\n  if (name.toLowerCase().startsWith('on')) {\n    const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +\n        `please use (${name.slice(2)})=...` +\n        `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n        ` current module.`;\n    throw new Error(msg);\n  }\n}\n\nexport function validateAgainstEventAttributes(name: string) {\n  if (name.toLowerCase().startsWith('on')) {\n    const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n        `please use (${name.slice(2)})=...`;\n    throw new Error(msg);\n  }\n}\n\nfunction getSanitizer(): Sanitizer|null {\n  const lView = getLView();\n  return lView && lView[SANITIZER];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../util/ng_dev_mode';\n\nimport {assertDefined, assertDomNode} from '../util/assert';\n\nimport {EMPTY_ARRAY} from '../util/empty';\nimport {LContext} from './interfaces/context';\nimport {TNode, TNodeFlags} from './interfaces/node';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {CONTEXT, HEADER_OFFSET, HOST, LView, TVIEW} from './interfaces/view';\nimport {getComponentLViewByIndex, unwrapRNode} from './util/view_utils';\n\n\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nexport function getLContext(target: any): LContext|null {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (Array.isArray(mpValue)) {\n      const lView: LView = mpValue!;\n      let nodeIndex: number;\n      let component: any = undefined;\n      let directives: any[]|null|undefined = undefined;\n\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target as RElement);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context: LContext = (existingCtx && !Array.isArray(existingCtx)) ?\n          existingCtx :\n          createLContext(lView, nodeIndex, native);\n\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target as RElement;\n    ngDevMode && assertDomNode(rElement);\n\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement as any;\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        let lView: LView|null;\n        if (Array.isArray(parentContext)) {\n          lView = parentContext as LView;\n        } else {\n          lView = parentContext.lView;\n        }\n\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return (mpValue as LContext) || null;\n}\n\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView: LView, nodeIndex: number, native: RNode): LContext {\n  return {\n    lView,\n    nodeIndex,\n    native,\n    component: undefined,\n    directives: undefined,\n    localRefs: undefined,\n  };\n}\n\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nexport function getComponentViewByInstance(componentInstance: {}): LView {\n  let lView = readPatchedData(componentInstance);\n  let view: LView;\n\n  if (Array.isArray(lView)) {\n    const nodeIndex = findViaComponent(lView, componentInstance);\n    view = getComponentLViewByIndex(nodeIndex, lView);\n    const context = createLContext(lView, nodeIndex, view[HOST] as RElement);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = lView as any as LContext;\n    view = getComponentLViewByIndex(context.nodeIndex, context.lView);\n  }\n  return view;\n}\n\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nexport function attachPatchData(target: any, data: LView|LContext) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  target[MONKEY_PATCH_KEY_NAME] = data;\n}\n\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport function readPatchedData(target: any): LView|LContext|null {\n  ngDevMode && assertDefined(target, 'Target expected');\n  return target[MONKEY_PATCH_KEY_NAME] || null;\n}\n\nexport function readPatchedLView(target: any): LView|null {\n  const value = readPatchedData(target);\n  if (value) {\n    return Array.isArray(value) ? value : (value as LContext).lView;\n  }\n  return null;\n}\n\nexport function isComponentInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\n\nexport function isDirectiveInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView: LView, target: RElement): number {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode: TNode): TNode|null {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView: LView, componentInstance: {}): number {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView: LView, directiveInstance: {}): number {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n * @param includeComponents Whether or not to include components in returned directives\n */\nexport function getDirectivesAtNodeIndex(\n    nodeIndex: number, lView: LView, includeComponents: boolean): any[]|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  let directiveStartIndex = tNode.directiveStart;\n  if (directiveStartIndex == 0) return EMPTY_ARRAY;\n  const directiveEndIndex = tNode.directiveEnd;\n  if (!includeComponents && tNode.flags & TNodeFlags.isComponentHost) directiveStartIndex++;\n  return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n\nexport function getComponentAtNodeIndex(nodeIndex: number, lView: LView): {}|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  let directiveStartIndex = tNode.directiveStart;\n  return tNode.flags & TNodeFlags.isComponentHost ? lView[directiveStartIndex] : null;\n}\n\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nexport function discoverLocalRefs(lView: LView, nodeIndex: number): {[key: string]: any}|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  if (tNode && tNode.localNames) {\n    const result: {[key: string]: any} = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport const ERROR_LOGGER = 'ngErrorLogger';\n\n\nexport function wrappedError(message: string, originalError: any): Error {\n  const msg = `${message} caused by: ${\n      originalError instanceof Error ? originalError.message : originalError}`;\n  const error = Error(msg);\n  (error as any)[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n\nexport function getOriginalError(error: Error): Error {\n  return (error as any)[ERROR_ORIGINAL_ERROR];\n}\n\nexport function getErrorLogger(error: unknown): (console: Console, ...values: any[]) => void {\n  return error && (error as any)[ERROR_LOGGER] || defaultErrorLogger;\n}\n\nfunction defaultErrorLogger(console: Console, ...values: any[]) {\n  (<any>console.error)(...values);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getErrorLogger, getOriginalError} from './util/errors';\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  handleError(error: any): void {\n    const originalError = this._findOriginalError(error);\n    // Note: Browser consoles show the place from where console.error was called.\n    // We can use this to give users additional information about the error.\n    const errorLogger = getErrorLogger(error);\n\n    errorLogger(this._console, `ERROR`, error);\n    if (originalError) {\n      errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n    }\n  }\n\n  /** @internal */\n  _findOriginalError(error: any): Error|null {\n    let e = error && getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e || null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nexport function escapeCommentText(value: string): string {\n  return value.replace(\n      COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from '../../util/global';\nimport {RElement} from '../interfaces/renderer_dom';\n\n\nexport const defaultScheduler =\n    (() => (\n               typeof requestAnimationFrame !== 'undefined' &&\n                   requestAnimationFrame ||  // browser only\n               setTimeout                    // everything else\n               )\n               .bind(global))();\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveWindow(element: RElement&{ownerDocument: Document}) {\n  return element.ownerDocument.defaultView;\n}\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveDocument(element: RElement&{ownerDocument: Document}) {\n  return element.ownerDocument;\n}\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveBody(element: RElement&{ownerDocument: Document}) {\n  return element.ownerDocument.body;\n}\n\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nexport const INTERPOLATION_DELIMITER = `�`;\n\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nexport function maybeUnwrapFn<T>(value: T|(() => T)): T {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewEncapsulation} from '../metadata/view';\n\n\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n *  @publicApi\n */\nexport interface RendererType2 {\n  /**\n   * A unique identifying string for the new renderer, used when creating\n   * unique styles for encapsulation.\n   */\n  id: string;\n  /**\n   * The view encapsulation type, which determines how styles are applied to\n   * DOM elements. One of\n   * - `Emulated` (default): Emulate native scoping of styles.\n   * - `Native`: Use the native encapsulation mechanism of the renderer.\n   * - `ShadowDom`: Use modern [Shadow\n   * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * create a ShadowRoot for component's host element.\n   * - `None`: Do not provide any template or style encapsulation.\n   */\n  encapsulation: ViewEncapsulation;\n  /**\n   * Defines CSS styles to be stored on a renderer instance.\n   */\n  styles: (string|any[])[];\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   */\n  data: {[kind: string]: any};\n}\n\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nexport enum RendererStyleFlags2 {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\n   * Marks a style as important.\n   */\n  Important = 1 << 0,\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  DashCase = 1 << 1\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n *\n * This file provides mechanism by which code relevant to the `TIcuContainerNode` is only loaded if\n * ICU is present in the template.\n */\n\nimport {TIcuContainerNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {LView} from '../interfaces/view';\n\n\nlet _icuContainerIterate: (tIcuContainerNode: TIcuContainerNode, lView: LView) =>\n    (() => RNode | null);\n\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nexport function icuContainerIterate(tIcuContainerNode: TIcuContainerNode, lView: LView): () =>\n    RNode | null {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nexport function ensureIcuContainerVisitorLoaded(\n    loader: () => ((tIcuContainerNode: TIcuContainerNode, lView: LView) => (() => RNode | null))) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined} from '../../util/assert';\nimport {assertLView} from '../assert';\nimport {readPatchedLView} from '../context_discovery';\nimport {LContainer} from '../interfaces/container';\nimport {isLContainer, isLView} from '../interfaces/type_checks';\nimport {CHILD_HEAD, CONTEXT, FLAGS, LView, LViewFlags, NEXT, PARENT, RootContext} from '../interfaces/view';\n\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nexport function getLViewParent(lView: LView): LView|null {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT]! : parent;\n}\n\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nexport function getRootView(componentOrLView: LView|{}): LView {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView)!;\n  while (lView && !(lView[FLAGS] & LViewFlags.IsRoot)) {\n    lView = getLViewParent(lView)!;\n  }\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated. It does this by walking the parent views until it\n * gets to the root view, then getting the context off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nexport function getRootContext(viewOrComponent: LView|{}): RootContext {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode &&\n      assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT] as RootContext;\n}\n\n\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nexport function getFirstLContainer(lView: LView): LContainer|null {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nexport function getNextLContainer(container: LContainer): LContainer|null {\n  return getNearestLContainer(container[NEXT]);\n}\n\nfunction getNearestLContainer(viewOrContainer: LContainer|LView|null) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n  return viewOrContainer as LContainer | null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewEncapsulation} from '../metadata/view';\nimport {Renderer2} from '../render/api';\nimport {RendererStyleFlags2} from '../render/api_flags';\nimport {addToArray, removeFromArray} from '../util/array_utils';\nimport {assertDefined, assertDomNode, assertEqual, assertFunction, assertString} from '../util/assert';\nimport {escapeCommentText} from '../util/dom';\n\nimport {assertLContainer, assertLView, assertParentView, assertProjectionSlots, assertTNodeForLView} from './assert';\nimport {attachPatchData} from './context_discovery';\nimport {icuContainerIterate} from './i18n/i18n_tree_shaking';\nimport {CONTAINER_HEADER_OFFSET, HAS_TRANSPLANTED_VIEWS, LContainer, MOVED_VIEWS, NATIVE, unusedValueExportToPlacateAjd as unused1} from './interfaces/container';\nimport {ComponentDef} from './interfaces/definition';\nimport {NodeInjectorFactory} from './interfaces/injector';\nimport {TElementNode, TIcuContainerNode, TNode, TNodeFlags, TNodeType, TProjectionNode, unusedValueExportToPlacateAjd as unused2} from './interfaces/node';\nimport {unusedValueExportToPlacateAjd as unused3} from './interfaces/projection';\nimport {isProceduralRenderer, ProceduralRenderer3, Renderer3, unusedValueExportToPlacateAjd as unused4} from './interfaces/renderer';\nimport {RComment, RElement, RNode, RText} from './interfaces/renderer_dom';\nimport {isLContainer, isLView} from './interfaces/type_checks';\nimport {CHILD_HEAD, CLEANUP, DECLARATION_COMPONENT_VIEW, DECLARATION_LCONTAINER, DestroyHookData, FLAGS, HookData, HookFn, HOST, LView, LViewFlags, NEXT, PARENT, QUERIES, RENDERER, T_HOST, TVIEW, TView, TViewType, unusedValueExportToPlacateAjd as unused5} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {profiler, ProfilerEvent} from './profiler';\nimport {getLViewParent} from './util/view_traversal_utils';\nimport {getNativeByTNode, unwrapRNode, updateTransplantedViewCount} from './util/view_utils';\n\n\n\nconst unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n\nconst enum WalkTNodeTreeAction {\n  /** node create in the native environment. Run on initial creation. */\n  Create = 0,\n\n  /**\n   * node insert in the native environment.\n   * Run when existing node has been detached and needs to be re-attached.\n   */\n  Insert = 1,\n\n  /** node detach from the native environment */\n  Detach = 2,\n\n  /** node destruction using the renderer's API */\n  Destroy = 3,\n}\n\n\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(\n    action: WalkTNodeTreeAction, renderer: Renderer3, parent: RElement|null,\n    lNodeToHandle: RNode|LContainer|LView, beforeNode?: RNode|null) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer: LContainer|undefined;\n    let isComponent = false;\n    // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST]!;\n    }\n    const rNode: RNode = unwrapRNode(lNodeToHandle);\n    ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);\n\n    if (action === WalkTNodeTreeAction.Create && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === WalkTNodeTreeAction.Insert && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === WalkTNodeTreeAction.Detach) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === WalkTNodeTreeAction.Destroy) {\n      ngDevMode && ngDevMode.rendererDestroyNode++;\n      (renderer as ProceduralRenderer3).destroyNode!(rNode);\n    }\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\n\nexport function createTextNode(renderer: Renderer3, value: string): RText {\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  ngDevMode && ngDevMode.rendererSetText++;\n  return isProceduralRenderer(renderer) ? renderer.createText(value) :\n                                          renderer.createTextNode(value);\n}\n\nexport function updateTextNode(renderer: Renderer3, rNode: RText, value: string): void {\n  ngDevMode && ngDevMode.rendererSetText++;\n  isProceduralRenderer(renderer) ? renderer.setValue(rNode, value) : rNode.textContent = value;\n}\n\nexport function createCommentNode(renderer: Renderer3, value: string): RComment {\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  // isProceduralRenderer check is not needed because both `Renderer2` and `Renderer3` have the same\n  // method name.\n  return renderer.createComment(escapeCommentText(value));\n}\n\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nexport function createElementNode(\n    renderer: Renderer3, name: string, namespace: string|null): RElement {\n  ngDevMode && ngDevMode.rendererCreateElement++;\n  if (isProceduralRenderer(renderer)) {\n    return renderer.createElement(name, namespace);\n  } else {\n    return namespace === null ? renderer.createElement(name) :\n                                renderer.createElementNS(namespace, name);\n  }\n}\n\n\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nexport function removeViewFromContainer(tView: TView, lView: LView): void {\n  const renderer = lView[RENDERER];\n  applyView(tView, lView, renderer, WalkTNodeTreeAction.Detach, null, null);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nexport function addViewToContainer(\n    tView: TView, parentTNode: TNode, renderer: Renderer3, lView: LView, parentNativeNode: RElement,\n    beforeNode: RNode|null): void {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, WalkTNodeTreeAction.Insert, parentNativeNode, beforeNode);\n}\n\n\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nexport function renderDetachView(tView: TView, lView: LView) {\n  applyView(tView, lView, lView[RENDERER], WalkTNodeTreeAction.Detach, null, null);\n}\n\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nexport function destroyViewTree(rootView: LView): void {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n\n  while (lViewOrLContainer) {\n    let next: LView|LContainer|null = null;\n\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer);\n      // If container, traverse down to its first LView.\n      const firstView: LView|undefined = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer![NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n      next = lViewOrLContainer && lViewOrLContainer![NEXT];\n    }\n    lViewOrLContainer = next;\n  }\n}\n\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nexport function insertView(tView: TView, lView: LView, lContainer: LContainer, index: number) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n\n  lView[PARENT] = lContainer;\n\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n\n  // Sets the attached flag\n  lView[FLAGS] |= LViewFlags.Attached;\n}\n\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\nfunction trackMovedView(declarationContainer: LContainer, lView: LView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const insertedLContainer = lView[PARENT] as LContainer;\n  ngDevMode && assertLContainer(insertedLContainer);\n  const insertedComponentLView = insertedLContainer[PARENT]![DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n  const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n  if (declaredComponentLView !== insertedComponentLView) {\n    // At this point the declaration-component is not same as insertion-component; this means that\n    // this is a transplanted view. Mark the declared lView as having transplanted views so that\n    // those views can participate in CD.\n    declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\n\nfunction detachMovedView(declarationContainer: LContainer, lView: LView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode &&\n      assertDefined(\n          declarationContainer[MOVED_VIEWS],\n          'A projected view should belong to a non-empty projected views collection');\n  const movedViews = declarationContainer[MOVED_VIEWS]!;\n  const declarationViewIndex = movedViews.indexOf(lView);\n  const insertionLContainer = lView[PARENT] as LContainer;\n  ngDevMode && assertLContainer(insertionLContainer);\n\n  // If the view was marked for refresh but then detached before it was checked (where the flag\n  // would be cleared and the counter decremented), we need to decrement the view counter here\n  // instead.\n  if (lView[FLAGS] & LViewFlags.RefreshTransplantedView) {\n    lView[FLAGS] &= ~LViewFlags.RefreshTransplantedView;\n    updateTransplantedViewCount(insertionLContainer, -1);\n  }\n\n  movedViews.splice(declarationViewIndex, 1);\n}\n\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nexport function detachView(lContainer: LContainer, removeIndex: number): LView|undefined {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n\n\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT] as LView;\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromContainer(viewToDetach[TVIEW], viewToDetach);\n\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~LViewFlags.Attached;\n  }\n  return viewToDetach;\n}\n\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nexport function destroyLView(tView: TView, lView: LView) {\n  if (!(lView[FLAGS] & LViewFlags.Destroyed)) {\n    const renderer = lView[RENDERER];\n    if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n      applyView(tView, lView, renderer, WalkTNodeTreeAction.Destroy, null, null);\n    }\n\n    destroyViewTree(lView);\n  }\n}\n\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView: TView, lView: LView): void {\n  if (!(lView[FLAGS] & LViewFlags.Destroyed)) {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~LViewFlags.Attached;\n\n    // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n    lView[FLAGS] |= LViewFlags.Destroyed;\n\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView);\n    // For component views only, the local renderer is destroyed at clean up time.\n    if (lView[TVIEW].type === TViewType.Component && isProceduralRenderer(lView[RENDERER])) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      (lView[RENDERER] as ProceduralRenderer3).destroy();\n    }\n\n    const declarationContainer = lView[DECLARATION_LCONTAINER];\n    // we are dealing with an embedded view that is still inserted into a container\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      }\n\n      // For embedded views still attached to a container: remove query result from this view.\n      const lQueries = lView[QUERIES];\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    }\n  }\n}\n\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView: TView, lView: LView): void {\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP]!;\n  // `LCleanup` contains both share information with `TCleanup` as well as instance specific\n  // information appended at the end. We need to know where the end of the `TCleanup` information\n  // is, and we track this with `lastLCleanupIndex`.\n  let lastLCleanupIndex = -1;\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener\n        const idxOrTargetGetter = tCleanup[i + 1];\n        const target = typeof idxOrTargetGetter === 'function' ?\n            idxOrTargetGetter(lView) :\n            unwrapRNode(lView[idxOrTargetGetter]);\n        const listener = lCleanup[lastLCleanupIndex = tCleanup[i + 2]];\n        const useCaptureOrSubIdx = tCleanup[i + 3];\n        if (typeof useCaptureOrSubIdx === 'boolean') {\n          // native DOM listener registered with Renderer3\n          target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n        } else {\n          if (useCaptureOrSubIdx >= 0) {\n            // unregister\n            lCleanup[lastLCleanupIndex = useCaptureOrSubIdx]();\n          } else {\n            // Subscription\n            lCleanup[lastLCleanupIndex = -useCaptureOrSubIdx].unsubscribe();\n          }\n        }\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n  if (lCleanup !== null) {\n    for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {\n      const instanceCleanupFn = lCleanup[i];\n      ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');\n      instanceCleanupFn();\n    }\n    lView[CLEANUP] = null;\n  }\n}\n\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView: TView, lView: LView): void {\n  let destroyHooks: DestroyHookData|null;\n\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i] as number];\n\n      // Only call the destroy hook if the context has been requested.\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1] as HookFn | HookData;\n\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            const callContext = context[toCall[j] as number];\n            const hook = toCall[j + 1] as HookFn;\n            profiler(ProfilerEvent.LifecycleHookStart, callContext, hook);\n            try {\n              hook.call(callContext);\n            } finally {\n              profiler(ProfilerEvent.LifecycleHookEnd, callContext, hook);\n            }\n          }\n        } else {\n          profiler(ProfilerEvent.LifecycleHookStart, context, toCall);\n          try {\n            toCall.call(context);\n          } finally {\n            profiler(ProfilerEvent.LifecycleHookEnd, context, toCall);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nexport function getParentRElement(tView: TView, tNode: TNode, lView: LView): RElement|null {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nexport function getClosestRElement(tView: TView, tNode: TNode|null, lView: LView): RElement|null {\n  let parentTNode: TNode|null = tNode;\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent.\n  while (parentTNode !== null &&\n         (parentTNode.type & (TNodeType.ElementContainer | TNodeType.Icu))) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  }\n\n  // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, TNodeType.AnyRNode | TNodeType.Container);\n    if (parentTNode.flags & TNodeFlags.isComponentHost) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const encapsulation =\n          (tView.data[parentTNode.directiveStart] as ComponentDef<unknown>).encapsulation;\n      // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n      if (encapsulation === ViewEncapsulation.None ||\n          encapsulation === ViewEncapsulation.Emulated) {\n        return null;\n      }\n    }\n\n    return getNativeByTNode(parentTNode, lView) as RElement;\n  }\n}\n\n/**\n * Inserts a native node before another native node for a given parent using {@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n */\nexport function nativeInsertBefore(\n    renderer: Renderer3, parent: RElement, child: RNode, beforeNode: RNode|null,\n    isMove: boolean): void {\n  ngDevMode && ngDevMode.rendererInsertBefore++;\n  if (isProceduralRenderer(renderer)) {\n    renderer.insertBefore(parent, child, beforeNode, isMove);\n  } else {\n    parent.insertBefore(child, beforeNode, isMove);\n  }\n}\n\nfunction nativeAppendChild(renderer: Renderer3, parent: RElement, child: RNode): void {\n  ngDevMode && ngDevMode.rendererAppendChild++;\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  if (isProceduralRenderer(renderer)) {\n    renderer.appendChild(parent, child);\n  } else {\n    parent.appendChild(child);\n  }\n}\n\nfunction nativeAppendOrInsertBefore(\n    renderer: Renderer3, parent: RElement, child: RNode, beforeNode: RNode|null, isMove: boolean) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(\n    renderer: Renderer3, parent: RElement, child: RNode, isHostElement?: boolean): void {\n  if (isProceduralRenderer(renderer)) {\n    renderer.removeChild(parent, child, isHostElement);\n  } else {\n    parent.removeChild(child);\n  }\n}\n\n/**\n * Returns a native parent of a given native node.\n */\nexport function nativeParentNode(renderer: Renderer3, node: RNode): RElement|null {\n  return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode) as RElement;\n}\n\n/**\n * Returns a native sibling of a given native node.\n */\nexport function nativeNextSibling(renderer: Renderer3, node: RNode): RNode|null {\n  return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode: TNode, currentTNode: TNode, lView: LView): RNode|\n    null {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n\n\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nexport function getInsertInFrontOfRNodeWithNoI18n(\n    parentTNode: TNode, currentTNode: TNode, lView: LView): RNode|null {\n  if (parentTNode.type & (TNodeType.ElementContainer | TNodeType.Icu)) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n  return null;\n}\n\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n: (parentTNode: TNode, currentTNode: TNode, lView: LView) =>\n    RNode | null = getInsertInFrontOfRNodeWithNoI18n;\n\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore: (\n    renderer: Renderer3, childTNode: TNode, lView: LView, childRNode: RNode|RNode[],\n    parentRElement: RElement|null) => void;\n\nexport function setI18nHandling(\n    getInsertInFrontOfRNodeWithI18n: (parentTNode: TNode, currentTNode: TNode, lView: LView) =>\n        RNode | null,\n    processI18nInsertBefore: (\n        renderer: Renderer3, childTNode: TNode, lView: LView, childRNode: RNode|RNode[],\n        parentRElement: RElement|null) => void) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nexport function appendChild(\n    tView: TView, lView: LView, childRNode: RNode|RNode[], childTNode: TNode): void {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode: TNode = childTNode.parent || lView[T_HOST]!;\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n\n  _processI18nInsertBefore !== undefined &&\n      _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView: LView, tNode: TNode|null): RNode|null {\n  if (tNode !== null) {\n    ngDevMode &&\n        assertTNodeType(\n            tNode,\n            TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Icu | TNodeType.Projection);\n\n    const tNodeType = tNode.type;\n    if (tNodeType & TNodeType.AnyRNode) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & TNodeType.Container) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & TNodeType.ElementContainer) {\n      const elIcuContainerChild = tNode.child;\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & TNodeType.Icu) {\n      let nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n      let rNode: RNode|null = nextRNode();\n      // If the ICU container has no nodes, than we use the ICU anchor as the node.\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView!, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function getProjectionNodes(lView: LView, tNode: TNode|null): TNode|RNode[]|null {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST] as TElementNode;\n    const slotIdx = tNode.projection as number;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection![slotIdx];\n  }\n  return null;\n}\n\nexport function getBeforeNodeForView(viewIndexInContainer: number, lContainer: LContainer): RNode|\n    null {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex] as LView;\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n\n  return lContainer[NATIVE];\n}\n\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nexport function nativeRemoveNode(renderer: Renderer3, rNode: RNode, isHostElement?: boolean): void {\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n  const nativeParent = nativeParentNode(renderer, rNode);\n  if (nativeParent) {\n    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n  }\n}\n\n\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(\n    renderer: Renderer3, action: WalkTNodeTreeAction, tNode: TNode|null, lView: LView,\n    parentRElement: RElement|null, beforeNode: RNode|null, isProjection: boolean) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode &&\n        assertTNodeType(\n            tNode,\n            TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Projection | TNodeType.Icu);\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n    if (isProjection) {\n      if (action === WalkTNodeTreeAction.Create) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= TNodeFlags.isProjected;\n      }\n    }\n    if ((tNode.flags & TNodeFlags.isDetached) !== TNodeFlags.isDetached) {\n      if (tNodeType & TNodeType.ElementContainer) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & TNodeType.Icu) {\n        const nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n        let rNode: RNode|null;\n        while (rNode = nextRNode()) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & TNodeType.Projection) {\n        applyProjectionRecursive(\n            renderer, action, lView, tNode as TProjectionNode, parentRElement, beforeNode);\n      } else {\n        ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.Container);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\n\n\n/**\n * `applyView` performs operation on the view as specified in `action` (insert, detach, destroy)\n *\n * Inserting a view without projection or containers at top level is simple. Just iterate over the\n * root nodes of the View, and for each node perform the `action`.\n *\n * Things get more complicated with containers and projections. That is because coming across:\n * - Container: implies that we have to insert/remove/destroy the views of that container as well\n *              which in turn can have their own Containers at the View roots.\n * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The\n *               complication is that the nodes we are projecting can themselves have Containers\n *               or other Projections.\n *\n * As you can see this is a very recursive problem. Yes recursion is not most efficient but the\n * code is complicated enough that trying to implemented with recursion becomes unmaintainable.\n *\n * @param tView The `TView' which needs to be inserted, detached, destroyed\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param parentRElement parent DOM element for insertion (Removal does not need it).\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyView(\n    tView: TView, lView: LView, renderer: Renderer3, action: WalkTNodeTreeAction.Destroy,\n    parentRElement: null, beforeNode: null): void;\nfunction applyView(\n    tView: TView, lView: LView, renderer: Renderer3, action: WalkTNodeTreeAction,\n    parentRElement: RElement|null, beforeNode: RNode|null): void;\nfunction applyView(\n    tView: TView, lView: LView, renderer: Renderer3, action: WalkTNodeTreeAction,\n    parentRElement: RElement|null, beforeNode: RNode|null): void {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nexport function applyProjection(tView: TView, lView: LView, tProjectionNode: TProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST]!;\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(\n      renderer, WalkTNodeTreeAction.Create, lView, tProjectionNode, parentRNode, beforeNode);\n}\n\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(\n    renderer: Renderer3, action: WalkTNodeTreeAction, lView: LView,\n    tProjectionNode: TProjectionNode, parentRElement: RElement|null, beforeNode: RNode|null) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST] as TElementNode;\n  ngDevMode &&\n      assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection![tProjectionNode.projection]!;\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject: TNode|null = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT] as LView;\n    applyNodes(\n        renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n  }\n}\n\n\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(\n    renderer: Renderer3, action: WalkTNodeTreeAction, lContainer: LContainer,\n    parentRElement: RElement|null, beforeNode: RNode|null|undefined) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE];  // LContainer has its own before node.\n  const native = unwrapRNode(lContainer);\n  // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i] as LView;\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nexport function applyStyling(\n    renderer: Renderer3, isClassBased: boolean, rNode: RElement, prop: string, value: any) {\n  const isProcedural = isProceduralRenderer(renderer);\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      ngDevMode && ngDevMode.rendererRemoveClass++;\n      if (isProcedural) {\n        (renderer as Renderer2).removeClass(rNode, prop);\n      } else {\n        (rNode as HTMLElement).classList.remove(prop);\n      }\n    } else {\n      ngDevMode && ngDevMode.rendererAddClass++;\n      if (isProcedural) {\n        (renderer as Renderer2).addClass(rNode, prop);\n      } else {\n        ngDevMode && assertDefined((rNode as HTMLElement).classList, 'HTMLElement expected');\n        (rNode as HTMLElement).classList.add(prop);\n      }\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase as number;\n    if (value == null /** || value === undefined */) {\n      ngDevMode && ngDevMode.rendererRemoveStyle++;\n      if (isProcedural) {\n        (renderer as Renderer2).removeStyle(rNode, prop, flags);\n      } else {\n        (rNode as HTMLElement).style.removeProperty(prop);\n      }\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags! |= RendererStyleFlags2.Important;\n      }\n\n      ngDevMode && ngDevMode.rendererSetStyle++;\n      if (isProcedural) {\n        (renderer as Renderer2).setStyle(rNode, prop, value, flags);\n      } else {\n        ngDevMode && assertDefined((rNode as HTMLElement).style, 'HTMLElement expected');\n        (rNode as HTMLElement).style.setProperty(prop, value, isImportant ? 'important' : '');\n      }\n    }\n  }\n}\n\n\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nexport function writeDirectStyle(renderer: Renderer3, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  if (isProceduralRenderer(renderer)) {\n    renderer.setAttribute(element, 'style', newValue);\n  } else {\n    (element as HTMLElement).style.cssText = newValue;\n  }\n  ngDevMode && ngDevMode.rendererSetStyle++;\n}\n\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nexport function writeDirectClass(renderer: Renderer3, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  if (isProceduralRenderer(renderer)) {\n    if (newValue === '') {\n      // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n      renderer.removeAttribute(element, 'class');\n    } else {\n      renderer.setAttribute(element, 'class', newValue);\n    }\n  } else {\n    element.className = newValue;\n  }\n  ngDevMode && ngDevMode.rendererSetClassName++;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertNotEqual} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\n\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nexport function classIndexOf(\n    className: string, classToSearch: string, startingIndex: number): number {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= CharCode.SPACE) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (foundIndex + length === end ||\n          className.charCodeAt(foundIndex + length) <= CharCode.SPACE) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {assertDefined, assertEqual, assertNotEqual} from '../util/assert';\n\nimport {AttributeMarker, TAttributes, TNode, TNodeType, unusedValueExportToPlacateAjd as unused1} from './interfaces/node';\nimport {CssSelector, CssSelectorList, SelectorFlags, unusedValueExportToPlacateAjd as unused2} from './interfaces/projection';\nimport {classIndexOf} from './styling/class_differ';\nimport {isNameOnlyAttributeMarker} from './util/attrs_utils';\n\nconst unusedValueToPlacateAjd = unused1 + unused2;\n\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(\n    attrs: TAttributes, cssClassToMatch: string, isProjectionMode: boolean): boolean {\n  // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n  // It is strange to me that sometimes the class information comes in form of `class` attribute\n  // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n  // if that is the right behavior.\n  ngDevMode &&\n      assertEqual(\n          cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n  let i = 0;\n  while (i < attrs.length) {\n    let item = attrs[i++];\n    if (isProjectionMode && item === 'class') {\n      item = attrs[i] as string;\n      if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {\n        return true;\n      }\n    } else if (item === AttributeMarker.Classes) {\n      // We found the classes section. Start searching for the class.\n      while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n        // while we have strings\n        if (item.toLowerCase() === cssClassToMatch) return true;\n      }\n      return false;\n    }\n  }\n  return false;\n}\n\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nexport function isInlineTemplate(tNode: TNode): boolean {\n  return tNode.type === TNodeType.Container && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(\n    tNode: TNode, currentSelector: string, isProjectionMode: boolean): boolean {\n  const tagNameToCompare =\n      tNode.type === TNodeType.Container && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nexport function isNodeMatchingSelector(\n    tNode: TNode, selector: CssSelector, isProjectionMode: boolean): boolean {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode: SelectorFlags = SelectorFlags.ELEMENT;\n  const nodeAttrs = tNode.attrs || [];\n\n  // Find the index of first attribute that has no value, only a name.\n  const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  let skipToNextSelector = false;\n\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = (current as number) | (mode & SelectorFlags.NOT);\n      continue;\n    }\n\n    if (skipToNextSelector) continue;\n\n    if (mode & SelectorFlags.ELEMENT) {\n      mode = SelectorFlags.ATTRIBUTE | mode & SelectorFlags.NOT;\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n          current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = mode & SelectorFlags.CLASS ? current : selector[++i];\n\n      // special case for matching against classes when a tNode has been instantiated with\n      // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n      if ((mode & SelectorFlags.CLASS) && tNode.attrs !== null) {\n        if (!isCssClassMatching(tNode.attrs, selectorAttrValue as string, isProjectionMode)) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n        continue;\n      }\n\n      const attrName = (mode & SelectorFlags.CLASS) ? 'class' : current;\n      const attrIndexInNode =\n          findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue: string;\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode &&\n              assertNotEqual(\n                  nodeAttrs[attrIndexInNode], AttributeMarker.NamespaceURI,\n                  'We do not match directives on namespaced attributes');\n          // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n          nodeAttrValue = (nodeAttrs[attrIndexInNode + 1] as string).toLowerCase();\n        }\n\n        const compareAgainstClassName = mode & SelectorFlags.CLASS ? nodeAttrValue : null;\n        if (compareAgainstClassName &&\n                classIndexOf(compareAgainstClassName, selectorAttrValue as string, 0) !== -1 ||\n            mode & SelectorFlags.ATTRIBUTE && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n\n  return isPositive(mode) || skipToNextSelector;\n}\n\nfunction isPositive(mode: SelectorFlags): boolean {\n  return (mode & SelectorFlags.NOT) === 0;\n}\n\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(\n    name: string, attrs: TAttributes|null, isInlineTemplate: boolean,\n    isProjectionMode: boolean): number {\n  if (attrs === null) return -1;\n\n  let i = 0;\n\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n      if (maybeAttrName === name) {\n        return i;\n      } else if (\n          maybeAttrName === AttributeMarker.Bindings || maybeAttrName === AttributeMarker.I18n) {\n        bindingsMode = true;\n      } else if (\n          maybeAttrName === AttributeMarker.Classes || maybeAttrName === AttributeMarker.Styles) {\n        let value = attrs[++i];\n        // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n        continue;\n      } else if (maybeAttrName === AttributeMarker.Template) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === AttributeMarker.NamespaceURI) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      }\n      // In binding mode there are only names, rather than name-value pairs.\n      i += bindingsMode ? 1 : 2;\n    }\n    // We did not match the attribute\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\n\nexport function isNodeMatchingSelectorList(\n    tNode: TNode, selector: CssSelectorList, isProjectionMode: boolean = false): boolean {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function getProjectAsAttrValue(tNode: TNode): CssSelector|null {\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(AttributeMarker.ProjectAs);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1] as CssSelector;\n    }\n  }\n  return null;\n}\n\nfunction getNameOnlyMarkerIndex(nodeAttrs: TAttributes) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n  return nodeAttrs.length;\n}\n\nfunction matchTemplateAttribute(attrs: TAttributes, name: string): number {\n  let i = attrs.indexOf(AttributeMarker.Template);\n  if (i > -1) {\n    i++;\n    while (i < attrs.length) {\n      const attr = attrs[i];\n      // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n  return -1;\n}\n\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nexport function isSelectorInSelectorList(selector: CssSelector, list: CssSelectorList): boolean {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction maybeWrapInNotSelector(isNegativeMode: boolean, chunk: string): string {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\n\nfunction stringifyCSSSelector(selector: CssSelector): string {\n  let result = selector[0] as string;\n  let i = 1;\n  let mode = SelectorFlags.ATTRIBUTE;\n  let currentChunk = '';\n  let isNegativeMode = false;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode & SelectorFlags.ATTRIBUTE) {\n        const attrValue = selector[++i] as string;\n        currentChunk +=\n            '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & SelectorFlags.CLASS) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & SelectorFlags.ELEMENT) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n      mode = valueOrMarker;\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n    i++;\n  }\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n  return result;\n}\n\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nexport function stringifyCSSSelectorList(selectorList: CssSelectorList): string {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nexport function extractAttrsAndClassesFromSelector(selector: CssSelector):\n    {attrs: string[], classes: string[]} {\n  const attrs: string[] = [];\n  const classes: string[] = [];\n  let i = 1;\n  let mode = SelectorFlags.ATTRIBUTE;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode === SelectorFlags.ATTRIBUTE) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i] as string);\n        }\n      } else if (mode === SelectorFlags.CLASS) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n    i++;\n  }\n  return {attrs, classes};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface NO_CHANGE {\n  // This is a brand that ensures that this type can never match anything else\n  __brand__: 'NO_CHANGE';\n}\n\n/** A special value which designates that a value has not changed. */\nexport const NO_CHANGE: NO_CHANGE =\n    (typeof ngDevMode === 'undefined' || ngDevMode) ? {__brand__: 'NO_CHANGE'} : ({} as NO_CHANGE);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertGreaterThan} from '../../util/assert';\nimport {assertIndexInDeclRange} from '../assert';\nimport {executeCheckHooks, executeInitAndCheckHooks} from '../hooks';\nimport {FLAGS, InitPhaseState, LView, LViewFlags, TView} from '../interfaces/view';\nimport {getLView, getSelectedIndex, getTView, isInCheckNoChangesMode, setSelectedIndex} from '../state';\n\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nexport function ɵɵadvance(delta: number): void {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, isInCheckNoChangesMode());\n}\n\nexport function selectIndexInternal(\n    tView: TView, lView: LView, index: number, checkNoChangesMode: boolean) {\n  ngDevMode && assertIndexInDeclRange(lView, index);\n\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted =\n        (lView[FLAGS] & LViewFlags.InitPhaseStateMask) === InitPhaseState.InitPhaseCompleted;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, InitPhaseState.OnInitHooksToBeRun, index);\n      }\n    }\n  }\n\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueArray} from '../../util/array_utils';\nimport {assertNumber, assertNumberInRange} from '../../util/assert';\n\n/**\n * Value stored in the `TData` which is needed to re-concatenate the styling.\n *\n * See: `TStylingKeyPrimitive` and `TStylingStatic`\n */\nexport type TStylingKey = TStylingKeyPrimitive|TStylingStatic;\n\n\n/**\n * The primitive portion (`TStylingStatic` removed) of the value stored in the `TData` which is\n * needed to re-concatenate the styling.\n *\n * - `string`: Stores the property name. Used with `ɵɵstyleProp`/`ɵɵclassProp` instruction.\n * - `null`: Represents map, so there is no name. Used with `ɵɵstyleMap`/`ɵɵclassMap`.\n * - `false`: Represents an ignore case. This happens when `ɵɵstyleProp`/`ɵɵclassProp` instruction\n *   is combined with directive which shadows its input `@Input('class')`. That way the binding\n *   should not participate in the styling resolution.\n */\nexport type TStylingKeyPrimitive = string|null|false;\n\n/**\n * Store the static values for the styling binding.\n *\n * The `TStylingStatic` is just `KeyValueArray` where key `\"\"` (stored at location 0) contains the\n * `TStylingKey` (stored at location 1). In other words this wraps the `TStylingKey` such that the\n * `\"\"` contains the wrapped value.\n *\n * When instructions are resolving styling they may need to look forward or backwards in the linked\n * list to resolve the value. For this reason we have to make sure that he linked list also contains\n * the static values. However the list only has space for one item per styling instruction. For this\n * reason we store the static values here as part of the `TStylingKey`. This means that the\n * resolution function when looking for a value needs to first look at the binding value, and than\n * at `TStylingKey` (if it exists).\n *\n * Imagine we have:\n *\n * ```\n * <div class=\"TEMPLATE\" my-dir>\n *\n * @Directive({\n *   host: {\n *     class: 'DIR',\n *     '[class.dynamic]': 'exp' // ɵɵclassProp('dynamic', ctx.exp);\n *   }\n * })\n * ```\n *\n * In the above case the linked list will contain one item:\n *\n * ```\n *   // assume binding location: 10 for `ɵɵclassProp('dynamic', ctx.exp);`\n *   tData[10] = <TStylingStatic>[\n *     '': 'dynamic', // This is the wrapped value of `TStylingKey`\n *     'DIR': true,   // This is the default static value of directive binding.\n *   ];\n *   tData[10 + 1] = 0; // We don't have prev/next.\n *\n *   lView[10] = undefined;     // assume `ctx.exp` is `undefined`\n *   lView[10 + 1] = undefined; // Just normalized `lView[10]`\n * ```\n *\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into the static `TStylingStatic` too see if there is a default value for\n * `dynamic` (there is not). Therefore it is safe to remove it.\n *\n * If setting `true` case:\n * ```\n *   lView[10] = true;     // assume `ctx.exp` is `true`\n *   lView[10 + 1] = true; // Just normalized `lView[10]`\n * ```\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into `TNode.residualClass` (TNode.residualStyle) which contains\n * ```\n *   tNode.residualClass = [\n *     'TEMPLATE': true,\n *   ];\n * ```\n *\n * This means that it is safe to add class.\n */\nexport interface TStylingStatic extends KeyValueArray<any> {}\n\n/**\n * This is a branded number which contains previous and next index.\n *\n * When we come across styling instructions we need to store the `TStylingKey` in the correct\n * order so that we can re-concatenate the styling value in the desired priority.\n *\n * The insertion can happen either at the:\n * - end of template as in the case of coming across additional styling instruction in the template\n * - in front of the template in the case of coming across additional instruction in the\n *   `hostBindings`.\n *\n * We use `TStylingRange` to store the previous and next index into the `TData` where the template\n * bindings can be found.\n *\n * - bit 0 is used to mark that the previous index has a duplicate for current value.\n * - bit 1 is used to mark that the next index has a duplicate for the current value.\n * - bits 2-16 are used to encode the next/tail of the template.\n * - bits 17-32 are used to encode the previous/head of template.\n *\n * NODE: *duplicate* false implies that it is statically known that this binding will not collide\n * with other bindings and therefore there is no need to check other bindings. For example the\n * bindings in `<div [style.color]=\"exp\" [style.width]=\"exp\">` will never collide and will have\n * their bits set accordingly. Previous duplicate means that we may need to check previous if the\n * current binding is `null`. Next duplicate means that we may need to check next bindings if the\n * current binding is not `null`.\n *\n * NOTE: `0` has special significance and represents `null` as in no additional pointer.\n */\nexport interface TStylingRange {\n  __brand__: 'TStylingRange';\n}\n\n/**\n * Shift and masks constants for encoding two numbers into and duplicate info into a single number.\n */\nexport const enum StylingRange {\n  /// Number of bits to shift for the previous pointer\n  PREV_SHIFT = 17,\n  /// Previous pointer mask.\n  PREV_MASK = 0xFFFE0000,\n\n  /// Number of bits to shift for the next pointer\n  NEXT_SHIFT = 2,\n  /// Next pointer mask.\n  NEXT_MASK = 0x001FFFC,\n\n  // Mask to remove nagative bit. (interpret number as positive)\n  UNSIGNED_MASK = 0x7FFF,\n\n  /**\n   * This bit is set if the previous bindings contains a binding which could possibly cause a\n   * duplicate. For example: `<div [style]=\"map\" [style.width]=\"width\">`, the `width` binding will\n   * have previous duplicate set. The implication is that if `width` binding becomes `null`, it is\n   * necessary to defer the value to `map.width`. (Because `width` overwrites `map.width`.)\n   */\n  PREV_DUPLICATE = 0x02,\n\n  /**\n   * This bit is set to if the next binding contains a binding which could possibly cause a\n   * duplicate. For example: `<div [style]=\"map\" [style.width]=\"width\">`, the `map` binding will\n   * have next duplicate set. The implication is that if `map.width` binding becomes not `null`, it\n   * is necessary to defer the value to `width`. (Because `width` overwrites `map.width`.)\n   */\n  NEXT_DUPLICATE = 0x01,\n}\n\n\nexport function toTStylingRange(prev: number, next: number): TStylingRange {\n  ngDevMode && assertNumberInRange(prev, 0, StylingRange.UNSIGNED_MASK);\n  ngDevMode && assertNumberInRange(next, 0, StylingRange.UNSIGNED_MASK);\n  return (prev << StylingRange.PREV_SHIFT | next << StylingRange.NEXT_SHIFT) as any;\n}\n\nexport function getTStylingRangePrev(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) >> StylingRange.PREV_SHIFT) & StylingRange.UNSIGNED_MASK;\n}\n\nexport function getTStylingRangePrevDuplicate(tStylingRange: TStylingRange): boolean {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) & StylingRange.PREV_DUPLICATE) ==\n      StylingRange.PREV_DUPLICATE;\n}\n\nexport function setTStylingRangePrev(\n    tStylingRange: TStylingRange, previous: number): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, StylingRange.UNSIGNED_MASK);\n  return (((tStylingRange as any as number) & ~StylingRange.PREV_MASK) |\n          (previous << StylingRange.PREV_SHIFT)) as any;\n}\n\nexport function setTStylingRangePrevDuplicate(tStylingRange: TStylingRange): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) | StylingRange.PREV_DUPLICATE) as any;\n}\n\nexport function getTStylingRangeNext(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) & StylingRange.NEXT_MASK) >> StylingRange.NEXT_SHIFT;\n}\n\nexport function setTStylingRangeNext(tStylingRange: TStylingRange, next: number): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, StylingRange.UNSIGNED_MASK);\n  return (((tStylingRange as any as number) & ~StylingRange.NEXT_MASK) |  //\n          next << StylingRange.NEXT_SHIFT) as any;\n}\n\nexport function getTStylingRangeNextDuplicate(tStylingRange: TStylingRange): boolean {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) & StylingRange.NEXT_DUPLICATE) ===\n      StylingRange.NEXT_DUPLICATE;\n}\n\nexport function setTStylingRangeNextDuplicate(tStylingRange: TStylingRange): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) | StylingRange.NEXT_DUPLICATE) as any;\n}\n\nexport function getTStylingRangeTail(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  const next = getTStylingRangeNext(tStylingRange);\n  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injector} from '../../di';\nimport {ErrorHandler} from '../../error_handler';\nimport {formatRuntimeError, RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {DoCheck, OnChanges, OnInit} from '../../interface/lifecycle_hooks';\nimport {CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, SchemaMetadata} from '../../metadata/schema';\nimport {ViewEncapsulation} from '../../metadata/view';\nimport {validateAgainstEventAttributes, validateAgainstEventProperties} from '../../sanitization/sanitization';\nimport {Sanitizer} from '../../sanitization/sanitizer';\nimport {assertDefined, assertDomNode, assertEqual, assertGreaterThanOrEqual, assertIndexInRange, assertNotEqual, assertNotSame, assertSame, assertString} from '../../util/assert';\nimport {escapeCommentText} from '../../util/dom';\nimport {normalizeDebugBindingName, normalizeDebugBindingValue} from '../../util/ng_reflect';\nimport {stringify} from '../../util/stringify';\nimport {assertFirstCreatePass, assertFirstUpdatePass, assertLContainer, assertLView, assertTNodeForLView, assertTNodeForTView} from '../assert';\nimport {attachPatchData, readPatchedLView} from '../context_discovery';\nimport {getFactoryDef} from '../definition_factory';\nimport {diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode} from '../di';\nimport {throwMultipleComponentError} from '../errors';\nimport {executeCheckHooks, executeInitAndCheckHooks, incrementInitPhaseFlags} from '../hooks';\nimport {CONTAINER_HEADER_OFFSET, HAS_TRANSPLANTED_VIEWS, LContainer, MOVED_VIEWS} from '../interfaces/container';\nimport {ComponentDef, ComponentTemplate, DirectiveDef, DirectiveDefListOrFactory, HostBindingsFunction, PipeDefListOrFactory, RenderFlags, ViewQueriesFunction} from '../interfaces/definition';\nimport {NodeInjectorFactory} from '../interfaces/injector';\nimport {AttributeMarker, InitialInputData, InitialInputs, LocalRefExtractor, PropertyAliases, PropertyAliasValue, TAttributes, TConstantsOrFactory, TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TIcuContainerNode, TNode, TNodeFlags, TNodeType, TProjectionNode} from '../interfaces/node';\nimport {isProceduralRenderer, Renderer3, RendererFactory3} from '../interfaces/renderer';\nimport {RComment, RElement, RNode, RText} from '../interfaces/renderer_dom';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {isComponentDef, isComponentHost, isContentQueryHost, isRootView} from '../interfaces/type_checks';\nimport {CHILD_HEAD, CHILD_TAIL, CLEANUP, CONTEXT, DECLARATION_COMPONENT_VIEW, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HostBindingOpCodes, InitPhaseState, INJECTOR, LView, LViewFlags, NEXT, PARENT, RENDERER, RENDERER_FACTORY, RootContext, RootContextFlags, SANITIZER, T_HOST, TData, TRANSPLANTED_VIEWS_TO_REFRESH, TVIEW, TView, TViewType} from '../interfaces/view';\nimport {assertPureTNodeType, assertTNodeType} from '../node_assert';\nimport {updateTextNode} from '../node_manipulation';\nimport {isInlineTemplate, isNodeMatchingSelectorList} from '../node_selector_matcher';\nimport {profiler, ProfilerEvent} from '../profiler';\nimport {enterView, getBindingsEnabled, getCurrentDirectiveIndex, getCurrentParentTNode, getCurrentTNode, getCurrentTNodePlaceholderOk, getSelectedIndex, isCurrentTNodeParent, isInCheckNoChangesMode, isInI18nBlock, leaveView, setBindingIndex, setBindingRootForHostBindings, setCurrentDirectiveIndex, setCurrentQueryIndex, setCurrentTNode, setIsInCheckNoChangesMode, setSelectedIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {isAnimationProp, mergeHostAttrs} from '../util/attrs_utils';\nimport {INTERPOLATION_DELIMITER} from '../util/misc_utils';\nimport {renderStringify, stringifyForError} from '../util/stringify_utils';\nimport {getFirstLContainer, getLViewParent, getNextLContainer} from '../util/view_traversal_utils';\nimport {getComponentLViewByIndex, getNativeByIndex, getNativeByTNode, isCreationMode, resetPreOrderHookFlags, unwrapLView, updateTransplantedViewCount, viewAttachedToChangeDetector} from '../util/view_utils';\n\nimport {selectIndexInternal} from './advance';\nimport {attachLContainerDebug, attachLViewDebug, cloneToLViewFromTViewBlueprint, cloneToTViewData, LCleanup, LViewBlueprint, MatchesArray, TCleanup, TNodeDebug, TNodeInitialInputs, TNodeLocalNames, TViewComponents, TViewConstructor} from './lview_debug';\n\n\n\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n */\nconst _CLEAN_PROMISE = (() => Promise.resolve(null))();\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nexport function processHostBindingOpCodes(tView: TView, lView: LView): void {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i] as number;\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i] as number;\n        const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        hostBindingFn(RenderFlags.Update, context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\n\n\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView: TView, lView: LView): void {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    for (let i = 0; i < contentQueries.length; i += 2) {\n      const queryStartIdx = contentQueries[i];\n      const directiveDefIdx = contentQueries[i + 1];\n      if (directiveDefIdx !== -1) {\n        const directiveDef = tView.data[directiveDefIdx] as DirectiveDef<any>;\n        ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n        ngDevMode &&\n            assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n        setCurrentQueryIndex(queryStartIdx);\n        directiveDef.contentQueries!(RenderFlags.Update, lView[directiveDefIdx], directiveDefIdx);\n      }\n    }\n  }\n}\n\n/** Refreshes child components in the current view (update mode). */\nfunction refreshChildComponents(hostLView: LView, components: number[]): void {\n  for (let i = 0; i < components.length; i++) {\n    refreshComponent(hostLView, components[i]);\n  }\n}\n\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView: LView, components: number[]): void {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\n\nexport function createLView<T>(\n    parentLView: LView|null, tView: TView, context: T|null, flags: LViewFlags, host: RElement|null,\n    tHostNode: TNode|null, rendererFactory: RendererFactory3|null, renderer: Renderer3|null,\n    sanitizer: Sanitizer|null, injector: Injector|null): LView {\n  const lView =\n      ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice() as LView;\n  lView[HOST] = host;\n  lView[FLAGS] = flags | LViewFlags.CreationMode | LViewFlags.Attached | LViewFlags.FirstLViewPass;\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY])!;\n  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n  lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER])!;\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null!;\n  lView[INJECTOR as any] = injector || parentLView && parentLView[INJECTOR] || null;\n  lView[T_HOST] = tHostNode;\n  ngDevMode &&\n      assertEqual(\n          tView.type == TViewType.Embedded ? parentLView !== null : true, true,\n          'Embedded views must have parentLView');\n  lView[DECLARATION_COMPONENT_VIEW] =\n      tView.type == TViewType.Embedded ? parentLView![DECLARATION_COMPONENT_VIEW] : lView;\n  ngDevMode && attachLViewDebug(lView);\n  return lView;\n}\n\n/**\n * Create and stores the TNode, and hooks it up to the tree.\n *\n * @param tView The current `TView`.\n * @param index The index at which the TNode should be saved (null if view, since they are not\n * saved).\n * @param type The type of TNode to create\n * @param native The native element for this node, if applicable\n * @param name The tag name of the associated native element, if applicable\n * @param attrs Any attrs for the native element, if applicable\n */\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Element|TNodeType.Text, name: string|null,\n    attrs: TAttributes|null): TElementNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Container, name: string|null,\n    attrs: TAttributes|null): TContainerNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Projection, name: null,\n    attrs: TAttributes|null): TProjectionNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.ElementContainer, name: string|null,\n    attrs: TAttributes|null): TElementContainerNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Icu, name: null,\n    attrs: TAttributes|null): TElementContainerNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType, name: string|null, attrs: TAttributes|null):\n    TElementNode&TContainerNode&TElementContainerNode&TProjectionNode&TIcuContainerNode {\n  ngDevMode && index !== 0 &&  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n                               // `view_engine_compatibility` for additional context.\n      assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index] as TNode;\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= TNodeFlags.isDetached;\n    }\n  } else if (tNode.type & TNodeType.Placeholder) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode as TElementNode & TContainerNode & TElementContainerNode & TProjectionNode &\n      TIcuContainerNode;\n}\n\nexport function createTNodeAtIndex(\n    tView: TView, index: number, type: TNodeType, name: string|null, attrs: TAttributes|null) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = tView.data[index] =\n      createTNode(tView, parent as TElementNode | TContainerNode, type, index, name, attrs);\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n      }\n    }\n  }\n  return tNode;\n}\n\n\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nexport function allocExpando(\n    tView: TView, lView: LView, numSlotsToAlloc: number, initialValue: any): number {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(\n        tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\n\n\n//////////////////////////\n//// Render\n//////////////////////////\n\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nexport function renderView<T>(tView: TView, lView: LView, context: T): void {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  enterView(lView);\n  try {\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(RenderFlags.Create, viewQuery, context);\n    }\n\n    // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n    const templateFn = tView.template;\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, RenderFlags.Create, context);\n    }\n\n    // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    }\n\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    }\n\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (tView.staticViewQueries) {\n      executeViewQueryFn(RenderFlags.Update, tView.viewQuery!, context);\n    }\n\n    // Render child component views.\n    const components = tView.components;\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n      tView.firstCreatePass = false;\n    }\n\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~LViewFlags.CreationMode;\n    leaveView();\n  }\n}\n\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nexport function refreshView<T>(\n    tView: TView, lView: LView, templateFn: ComponentTemplate<{}>|null, context: T) {\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n  const flags = lView[FLAGS];\n  if ((flags & LViewFlags.Destroyed) === LViewFlags.Destroyed) return;\n  enterView(lView);\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n  const isInCheckNoChangesPass = isInCheckNoChangesMode();\n  try {\n    resetPreOrderHookFlags(lView);\n\n    setBindingIndex(tView.bindingStartIndex);\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, RenderFlags.Update, context);\n    }\n\n    const hooksInitPhaseCompleted =\n        (flags & LViewFlags.InitPhaseStateMask) === InitPhaseState.InitPhaseCompleted;\n\n    // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, InitPhaseState.OnInitHooksToBeRun, null);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.OnInitHooksToBeRun);\n      }\n    }\n\n    // First mark transplanted views that are declared in this lView as needing a refresh at their\n    // insertion points. This is needed to avoid the situation where the template is defined in this\n    // `LView` but its declaration appears after the insertion component.\n    markTransplantedViewsForRefresh(lView);\n    refreshEmbeddedViews(lView);\n\n    // Content query results must be refreshed before content hooks are called.\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    }\n\n    // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(\n              lView, contentHooks, InitPhaseState.AfterContentInitHooksToBeRun);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.AfterContentInitHooksToBeRun);\n      }\n    }\n\n    processHostBindingOpCodes(tView, lView);\n\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n      refreshChildComponents(lView, components);\n    }\n\n    // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(RenderFlags.Update, viewQuery, context);\n    }\n\n    // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, InitPhaseState.AfterViewInitHooksToBeRun);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.AfterViewInitHooksToBeRun);\n      }\n    }\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    }\n\n    // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n    if (!isInCheckNoChangesPass) {\n      lView[FLAGS] &= ~(LViewFlags.Dirty | LViewFlags.FirstLViewPass);\n    }\n    if (lView[FLAGS] & LViewFlags.RefreshTransplantedView) {\n      lView[FLAGS] &= ~LViewFlags.RefreshTransplantedView;\n      updateTransplantedViewCount(lView[PARENT] as LContainer, -1);\n    }\n  } finally {\n    leaveView();\n  }\n}\n\nexport function renderComponentOrTemplate<T>(\n    tView: TView, lView: LView, templateFn: ComponentTemplate<{}>|null, context: T) {\n  const rendererFactory = lView[RENDERER_FACTORY];\n  const normalExecutionPath = !isInCheckNoChangesMode();\n  const creationModeIsActive = isCreationMode(lView);\n  try {\n    if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n      rendererFactory.begin();\n    }\n    if (creationModeIsActive) {\n      renderView(tView, lView, context);\n    }\n    refreshView(tView, lView, templateFn, context);\n  } finally {\n    if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n      rendererFactory.end();\n    }\n  }\n}\n\nfunction executeTemplate<T>(\n    tView: TView, lView: LView, templateFn: ComponentTemplate<T>, rf: RenderFlags, context: T) {\n  const prevSelectedIndex = getSelectedIndex();\n  const isUpdatePhase = rf & RenderFlags.Update;\n  try {\n    setSelectedIndex(-1);\n    if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, isInCheckNoChangesMode());\n    }\n\n    const preHookType =\n        isUpdatePhase ? ProfilerEvent.TemplateUpdateStart : ProfilerEvent.TemplateCreateStart;\n    profiler(preHookType, context);\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n\n    const postHookType =\n        isUpdatePhase ? ProfilerEvent.TemplateUpdateEnd : ProfilerEvent.TemplateCreateEnd;\n    profiler(postHookType, context);\n  }\n}\n\n//////////////////////////\n//// Element\n//////////////////////////\n\nexport function executeContentQueries(tView: TView, tNode: TNode, lView: LView) {\n  if (isContentQueryHost(tNode)) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n      const def = tView.data[directiveIndex] as DirectiveDef<any>;\n      if (def.contentQueries) {\n        def.contentQueries(RenderFlags.Create, lView[directiveIndex], directiveIndex);\n      }\n    }\n  }\n}\n\n\n/**\n * Creates directive instances.\n */\nexport function createDirectivesInstances(tView: TView, lView: LView, tNode: TDirectiveHostNode) {\n  if (!getBindingsEnabled()) return;\n  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n  if ((tNode.flags & TNodeFlags.hasHostBindings) === TNodeFlags.hasHostBindings) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nexport function saveResolvedLocalsInData(\n    viewData: LView, tNode: TDirectiveHostNode,\n    localRefExtractor: LocalRefExtractor = getNativeByTNode): void {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1] as number;\n      const value = index === -1 ?\n          localRefExtractor(\n              tNode as TElementNode | TContainerNode | TElementContainerNode, viewData) :\n          viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nexport function getOrCreateTComponentView(def: ComponentDef<any>): TView {\n  const tView = def.tView;\n\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return def.tView = createTView(\n               TViewType.Component, declTNode, def.template, def.decls, def.vars, def.directiveDefs,\n               def.pipeDefs, def.viewQuery, def.schemas, def.consts);\n  }\n\n  return tView;\n}\n\n\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nexport function createTView(\n    type: TViewType, declTNode: TNode|null, templateFn: ComponentTemplate<any>|null, decls: number,\n    vars: number, directives: DirectiveDefListOrFactory|null, pipes: PipeDefListOrFactory|null,\n    viewQuery: ViewQueriesFunction<any>|null, schemas: SchemaMetadata[]|null,\n    constsOrFactory: TConstantsOrFactory|null): TView {\n  ngDevMode && ngDevMode.tView++;\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = blueprint[TVIEW as any] = ngDevMode ?\n      new TViewConstructor(\n          type,        // type: TViewType,\n          blueprint,   // blueprint: LView,\n          templateFn,  // template: ComponentTemplate<{}>|null,\n          null,        // queries: TQueries|null\n          viewQuery,   // viewQuery: ViewQueriesFunction<{}>|null,\n          declTNode,   // declTNode: TNode|null,\n          cloneToTViewData(blueprint).fill(null, bindingStartIndex),  // data: TData,\n          bindingStartIndex,                                          // bindingStartIndex: number,\n          initialViewLength,                                          // expandoStartIndex: number,\n          null,                               // hostBindingOpCodes: HostBindingOpCodes,\n          true,                               // firstCreatePass: boolean,\n          true,                               // firstUpdatePass: boolean,\n          false,                              // staticViewQueries: boolean,\n          false,                              // staticContentQueries: boolean,\n          null,                               // preOrderHooks: HookData|null,\n          null,                               // preOrderCheckHooks: HookData|null,\n          null,                               // contentHooks: HookData|null,\n          null,                               // contentCheckHooks: HookData|null,\n          null,                               // viewHooks: HookData|null,\n          null,                               // viewCheckHooks: HookData|null,\n          null,                               // destroyHooks: DestroyHookData|null,\n          null,                               // cleanup: any[]|null,\n          null,                               // contentQueries: number[]|null,\n          null,                               // components: number[]|null,\n          typeof directives === 'function' ?  //\n              directives() :                  //\n              directives,                     // directiveRegistry: DirectiveDefList|null,\n          typeof pipes === 'function' ? pipes() : pipes,  // pipeRegistry: PipeDefList|null,\n          null,                                           // firstChild: TNode|null,\n          schemas,                                        // schemas: SchemaMetadata[]|null,\n          consts,                                         // consts: TConstants|null\n          false,                                          // incompleteFirstPass: boolean\n          decls,                                          // ngDevMode only: decls\n          vars,                                           // ngDevMode only: vars\n          ) :\n      {\n        type: type,\n        blueprint: blueprint,\n        template: templateFn,\n        queries: null,\n        viewQuery: viewQuery,\n        declTNode: declTNode,\n        data: blueprint.slice().fill(null, bindingStartIndex),\n        bindingStartIndex: bindingStartIndex,\n        expandoStartIndex: initialViewLength,\n        hostBindingOpCodes: null,\n        firstCreatePass: true,\n        firstUpdatePass: true,\n        staticViewQueries: false,\n        staticContentQueries: false,\n        preOrderHooks: null,\n        preOrderCheckHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n        schemas: schemas,\n        consts: consts,\n        incompleteFirstPass: false\n      };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\n\nfunction createViewBlueprint(bindingStartIndex: number, initialViewLength: number): LView {\n  const blueprint = ngDevMode ? new LViewBlueprint() : [];\n\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n\n  return blueprint as LView;\n}\n\nfunction createError(text: string, token: any) {\n  return new Error(`Renderer: ${text} [${stringifyForError(token)}]`);\n}\n\nfunction assertHostNodeExists(rElement: RElement, elementOrSelector: RElement|string) {\n  if (!rElement) {\n    if (typeof elementOrSelector === 'string') {\n      throw createError('Host node with selector not found:', elementOrSelector);\n    } else {\n      throw createError('Host node is required:', elementOrSelector);\n    }\n  }\n}\n\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param rendererFactory Factory function to create renderer instance.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n */\nexport function locateHostElement(\n    renderer: Renderer3, elementOrSelector: RElement|string,\n    encapsulation: ViewEncapsulation): RElement {\n  if (isProceduralRenderer(renderer)) {\n    // When using native Shadow DOM, do not clear host element to allow native slot projection\n    const preserveContent = encapsulation === ViewEncapsulation.ShadowDom;\n    return renderer.selectRootElement(elementOrSelector, preserveContent);\n  }\n\n  let rElement = typeof elementOrSelector === 'string' ?\n      renderer.querySelector(elementOrSelector)! :\n      elementOrSelector;\n  ngDevMode && assertHostNodeExists(rElement, elementOrSelector);\n\n  // Always clear host element's content when Renderer3 is in use. For procedural renderer case we\n  // make it depend on whether ShadowDom encapsulation is used (in which case the content should be\n  // preserved to allow native slot projection). ShadowDom encapsulation requires procedural\n  // renderer, and procedural renderer case is handled above.\n  rElement.textContent = '';\n\n  return rElement;\n}\n\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n *\n * This function can also be used to store instance specific cleanup fns. In that case the `context`\n * is `null` and the function is store in `LView` (rather than it `TView`).\n */\nexport function storeCleanupWithContext(\n    tView: TView, lView: LView, context: any, cleanupFn: Function): void {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  if (context === null) {\n    // If context is null that this is instance specific callback. These callbacks can only be\n    // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n    lCleanup.push(cleanupFn);\n  } else {\n    lCleanup.push(context);\n\n    if (tView.firstCreatePass) {\n      getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n    }\n  }\n}\n\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param tView `TView` to which this `TNode` belongs (used only in `ngDevMode`)\n * @param tParent Parent `TNode`\n * @param type The type of the node\n * @param index The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @param tViews Any TViews attached to this node\n * @returns the TNode object\n */\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Container,\n    index: number, tagName: string|null, attrs: TAttributes|null): TContainerNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Element|TNodeType.Text,\n    index: number, tagName: string|null, attrs: TAttributes|null): TElementNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.ElementContainer,\n    index: number, tagName: string|null, attrs: TAttributes|null): TElementContainerNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Icu, index: number,\n    tagName: string|null, attrs: TAttributes|null): TIcuContainerNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Projection,\n    index: number, tagName: string|null, attrs: TAttributes|null): TProjectionNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType, index: number,\n    tagName: string|null, attrs: TAttributes|null): TNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType, index: number,\n    value: string|null, attrs: TAttributes|null): TNode {\n  ngDevMode && index !== 0 &&  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n                               // `view_engine_compatibility` for additional context.\n      assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n  ngDevMode && ngDevMode.tNode++;\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  const tNode = ngDevMode ?\n      new TNodeDebug(\n          tView,          // tView_: TView\n          type,           // type: TNodeType\n          index,          // index: number\n          null,           // insertBeforeIndex: null|-1|number|number[]\n          injectorIndex,  // injectorIndex: number\n          -1,             // directiveStart: number\n          -1,             // directiveEnd: number\n          -1,             // directiveStylingLast: number\n          null,           // propertyBindings: number[]|null\n          0,              // flags: TNodeFlags\n          0,              // providerIndexes: TNodeProviderIndexes\n          value,          // value: string|null\n          attrs,          // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null\n          null,           // mergedAttrs\n          null,           // localNames: (string|number)[]|null\n          undefined,      // initialInputs: (string[]|null)[]|null|undefined\n          null,           // inputs: PropertyAliases|null\n          null,           // outputs: PropertyAliases|null\n          null,           // tViews: ITView|ITView[]|null\n          null,           // next: ITNode|null\n          null,           // projectionNext: ITNode|null\n          null,           // child: ITNode|null\n          tParent,        // parent: TElementNode|TContainerNode|null\n          null,           // projection: number|(ITNode|RNode[])[]|null\n          null,           // styles: string|null\n          null,           // stylesWithoutHost: string|null\n          undefined,      // residualStyles: string|null\n          null,           // classes: string|null\n          null,           // classesWithoutHost: string|null\n          undefined,      // residualClasses: string|null\n          0 as any,       // classBindings: TStylingRange;\n          0 as any,       // styleBindings: TStylingRange;\n          ) :\n      {\n        type,\n        index,\n        insertBeforeIndex: null,\n        injectorIndex,\n        directiveStart: -1,\n        directiveEnd: -1,\n        directiveStylingLast: -1,\n        propertyBindings: null,\n        flags: 0,\n        providerIndexes: 0,\n        value: value,\n        attrs: attrs,\n        mergedAttrs: null,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: null,\n        outputs: null,\n        tViews: null,\n        next: null,\n        projectionNext: null,\n        child: null,\n        parent: tParent,\n        projection: null,\n        styles: null,\n        stylesWithoutHost: null,\n        residualStyles: undefined,\n        classes: null,\n        classesWithoutHost: null,\n        residualClasses: undefined,\n        classBindings: 0 as any,\n        styleBindings: 0 as any,\n      };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n  return tNode;\n}\n\n\nfunction generatePropertyAliases(\n    inputAliasMap: {[publicName: string]: string}, directiveDefIdx: number,\n    propStore: PropertyAliases|null): PropertyAliases|null {\n  for (let publicName in inputAliasMap) {\n    if (inputAliasMap.hasOwnProperty(publicName)) {\n      propStore = propStore === null ? {} : propStore;\n      const internalName = inputAliasMap[publicName];\n\n      if (propStore.hasOwnProperty(publicName)) {\n        propStore[publicName].push(directiveDefIdx, internalName);\n      } else {\n        (propStore[publicName] = [directiveDefIdx, internalName]);\n      }\n    }\n  }\n  return propStore;\n}\n\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(tView: TView, tNode: TNode): void {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const tViewData = tView.data;\n\n  const tNodeAttrs = tNode.attrs;\n  const inputsFromAttrs: InitialInputData = ngDevMode ? new TNodeInitialInputs() : [];\n  let inputsStore: PropertyAliases|null = null;\n  let outputsStore: PropertyAliases|null = null;\n  for (let i = start; i < end; i++) {\n    const directiveDef = tViewData[i] as DirectiveDef<any>;\n    const directiveInputs = directiveDef.inputs;\n    // Do not use unbound attributes as inputs to structural directives, since structural\n    // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n    // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n    // should be set for inline templates.\n    const initialInputs = (tNodeAttrs !== null && !isInlineTemplate(tNode)) ?\n        generateInitialInputs(directiveInputs, tNodeAttrs) :\n        null;\n    inputsFromAttrs.push(initialInputs);\n    inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);\n    outputsStore = generatePropertyAliases(directiveDef.outputs, i, outputsStore);\n  }\n\n  if (inputsStore !== null) {\n    if (inputsStore.hasOwnProperty('class')) {\n      tNode.flags |= TNodeFlags.hasClassInput;\n    }\n    if (inputsStore.hasOwnProperty('style')) {\n      tNode.flags |= TNodeFlags.hasStyleInput;\n    }\n  }\n\n  tNode.initialInputs = inputsFromAttrs;\n  tNode.inputs = inputsStore;\n  tNode.outputs = outputsStore;\n}\n\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name: string): string {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\n\nexport function elementPropertyInternal<T>(\n    tView: TView, tNode: TNode, lView: LView, propName: string, value: T, renderer: Renderer3,\n    sanitizer: SanitizerFn|null|undefined, nativeOnly: boolean): void {\n  ngDevMode && assertNotSame(value, NO_CHANGE as any, 'Incoming value should never be NO_CHANGE.');\n  const element = getNativeByTNode(tNode, lView) as RElement | RComment;\n  let inputData = tNode.inputs;\n  let dataValue: PropertyAliasValue|undefined;\n  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n    setInputsForProperty(tView, lView, dataValue, propName, value);\n    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);\n    if (ngDevMode) {\n      setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n    }\n  } else if (tNode.type & TNodeType.AnyRNode) {\n    propName = mapPropName(propName);\n\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n      if (!validateProperty(tView, element, propName, tNode)) {\n        // Return here since we only log warnings for unknown properties.\n        logUnknownPropertyError(propName, tNode);\n        return;\n      }\n      ngDevMode.rendererSetProperty++;\n    }\n\n    // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? (sanitizer(value, tNode.value || '', propName) as any) : value;\n    if (isProceduralRenderer(renderer)) {\n      renderer.setProperty(element as RElement, propName, value);\n    } else if (!isAnimationProp(propName)) {\n      (element as RElement).setProperty ? (element as any).setProperty(propName, value) :\n                                          (element as any)[propName] = value;\n    }\n  } else if (tNode.type & TNodeType.AnyContainer) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(tView, tNode.value)) {\n      logUnknownPropertyError(propName, tNode);\n    }\n  }\n}\n\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView: LView, viewIndex: number): void {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & LViewFlags.CheckAlways)) {\n    childComponentLView[FLAGS] |= LViewFlags.Dirty;\n  }\n}\n\nfunction setNgReflectProperty(\n    lView: LView, element: RElement|RComment, type: TNodeType, attrName: string, value: any) {\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n  if (type & TNodeType.AnyRNode) {\n    if (value == null) {\n      isProceduralRenderer(renderer) ? renderer.removeAttribute((element as RElement), attrName) :\n                                       (element as RElement).removeAttribute(attrName);\n    } else {\n      isProceduralRenderer(renderer) ?\n          renderer.setAttribute((element as RElement), attrName, debugValue) :\n          (element as RElement).setAttribute(attrName, debugValue);\n    }\n  } else {\n    const textContent =\n        escapeCommentText(`bindings=${JSON.stringify({[attrName]: debugValue}, null, 2)}`);\n    if (isProceduralRenderer(renderer)) {\n      renderer.setValue((element as RComment), textContent);\n    } else {\n      (element as RComment).textContent = textContent;\n    }\n  }\n}\n\nexport function setNgReflectProperties(\n    lView: LView, element: RElement|RComment, type: TNodeType, dataValue: PropertyAliasValue,\n    value: any) {\n  if (type & (TNodeType.AnyRNode | TNodeType.Container)) {\n    /**\n     * dataValue is an array containing runtime input or output names for the directives:\n     * i+0: directive instance index\n     * i+1: privateName\n     *\n     * e.g. [0, 'change', 'change-minified']\n     * we want to set the reflected property with the privateName: dataValue[i+1]\n     */\n    for (let i = 0; i < dataValue.length; i += 2) {\n      setNgReflectProperty(lView, element, type, dataValue[i + 1] as string, value);\n    }\n  }\n}\n\nfunction validateProperty(\n    tView: TView, element: RElement|RComment, propName: string, tNode: TNode): boolean {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (tView.schemas === null) return true;\n\n  // The property is considered valid if the element matches the schema, it exists on the element\n  // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).\n  if (matchingSchemas(tView, tNode.value) || propName in element || isAnimationProp(propName)) {\n    return true;\n  }\n\n  // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we\n  // need to account for both here, while being careful for `typeof null` also returning 'object'.\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n\nexport function matchingSchemas(tView: TView, tagName: string|null): boolean {\n  const schemas = tView.schemas;\n\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n      if (schema === NO_ERRORS_SCHEMA ||\n          schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Logs an error that a property is not supported on an element.\n * @param propName Name of the invalid property.\n * @param tNode Node on which we encountered the property.\n */\nfunction logUnknownPropertyError(propName: string, tNode: TNode): void {\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tNode.value}'.`;\n  console.error(formatRuntimeError(RuntimeErrorCode.UNKNOWN_BINDING, message));\n}\n\n/**\n * Instantiate a root component.\n */\nexport function instantiateRootComponent<T>(tView: TView, lView: LView, def: ComponentDef<T>): T {\n  const rootTNode = getCurrentTNode()!;\n  if (tView.firstCreatePass) {\n    if (def.providersResolver) def.providersResolver(def);\n    const directiveIndex = allocExpando(tView, lView, 1, null);\n    ngDevMode &&\n        assertEqual(\n            directiveIndex, rootTNode.directiveStart,\n            'Because this is a root component the allocated expando should match the TNode component.');\n    configureViewWithDirective(tView, rootTNode, lView, directiveIndex, def);\n  }\n  const directive =\n      getNodeInjectable(lView, tView, rootTNode.directiveStart, rootTNode as TElementNode);\n  attachPatchData(directive, lView);\n  const native = getNativeByTNode(rootTNode, lView);\n  if (native) {\n    attachPatchData(native, lView);\n  }\n  return directive;\n}\n\n/**\n * Resolve the matched directives on a node.\n */\nexport function resolveDirectives(\n    tView: TView, lView: LView, tNode: TElementNode|TContainerNode|TElementContainerNode,\n    localRefs: string[]|null): boolean {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n  // tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n\n  let hasDirectives = false;\n  if (getBindingsEnabled()) {\n    const directiveDefs: DirectiveDef<any>[]|null = findDirectiveDefMatches(tView, lView, tNode);\n    const exportsMap: ({[key: string]: number}|null) = localRefs === null ? null : {'': -1};\n\n    if (directiveDefs !== null) {\n      hasDirectives = true;\n      initTNodeFlags(tNode, tView.data.length, directiveDefs.length);\n      // When the same token is provided by several directives on the same node, some rules apply in\n      // the viewEngine:\n      // - viewProviders have priority over providers\n      // - the last directive in NgModule.declarations has priority over the previous one\n      // So to match these rules, the order in which providers are added in the arrays is very\n      // important.\n      for (let i = 0; i < directiveDefs.length; i++) {\n        const def = directiveDefs[i];\n        if (def.providersResolver) def.providersResolver(def);\n      }\n      let preOrderHooksFound = false;\n      let preOrderCheckHooksFound = false;\n      let directiveIdx = allocExpando(tView, lView, directiveDefs.length, null);\n      ngDevMode &&\n          assertSame(\n              directiveIdx, tNode.directiveStart,\n              'TNode.directiveStart should point to just allocated space');\n\n      for (let i = 0; i < directiveDefs.length; i++) {\n        const def = directiveDefs[i];\n        // Merge the attrs in the order of matches. This assumes that the first directive is the\n        // component itself, so that the component has the least priority.\n        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n\n        configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n        saveNameToExportMap(directiveIdx, def, exportsMap);\n\n        if (def.contentQueries !== null) tNode.flags |= TNodeFlags.hasContentQuery;\n        if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)\n          tNode.flags |= TNodeFlags.hasHostBindings;\n\n        const lifeCycleHooks: OnChanges&OnInit&DoCheck = def.type.prototype;\n        // Only push a node index into the preOrderHooks array if this is the first\n        // pre-order hook found on this node.\n        if (!preOrderHooksFound &&\n            (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n          // We will push the actual hook function into this array later during dir instantiation.\n          // We cannot do it now because we must ensure hooks are registered in the same\n          // order that directives are created (i.e. injection order).\n          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index);\n          preOrderHooksFound = true;\n        }\n\n        if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index);\n          preOrderCheckHooksFound = true;\n        }\n\n        directiveIdx++;\n      }\n\n      initializeInputAndOutputAliases(tView, tNode);\n    }\n    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n  return hasDirectives;\n}\n\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param lView `LView` current `LView`\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nexport function registerHostBindingOpCodes(\n    tView: TView, tNode: TNode, lView: LView, directiveIdx: number, directiveVarsIdx: number,\n    def: ComponentDef<any>|DirectiveDef<any>): void {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  const hostBindings = def.hostBindings;\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [] as any as HostBindingOpCodes;\n    }\n    const elementIndx = ~tNode.index;\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes: HostBindingOpCodes): number {\n  let i = hostBindingOpCodes.length;\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n  return 0;\n}\n\n\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(\n    tView: TView, lView: LView, tNode: TDirectiveHostNode, native: RNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n\n  attachPatchData(native, lView);\n\n  const initialInputs = tNode.initialInputs;\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i] as DirectiveDef<any>;\n    const isComponent = isComponentDef(def);\n\n    if (isComponent) {\n      ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode);\n      addComponentLogic(lView, tNode as TElementNode, def as ComponentDef<any>);\n    }\n\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs!);\n    }\n\n    if (isComponent) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = directive;\n    }\n  }\n}\n\nfunction invokeDirectivesHostBindings(tView: TView, lView: LView, tNode: TNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const firstCreatePass = tView.firstCreatePass;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n  try {\n    setSelectedIndex(elementIndex);\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex] as DirectiveDef<unknown>;\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nexport function invokeHostBindingsInCreationMode(def: DirectiveDef<any>, directive: any) {\n  if (def.hostBindings !== null) {\n    def.hostBindings!(RenderFlags.Create, directive);\n  }\n}\n\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(\n    tView: TView, viewData: LView,\n    tNode: TElementNode|TContainerNode|TElementContainerNode): DirectiveDef<any>[]|null {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n\n  const registry = tView.directiveRegistry;\n  let matches: any[]|null = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i] as ComponentDef<any>| DirectiveDef<any>;\n      if (isNodeMatchingSelectorList(tNode, def.selectors!, /* isProjectionMode */ false)) {\n        matches || (matches = ngDevMode ? new MatchesArray() : []);\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);\n\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(\n                tNode, TNodeType.Element,\n                `\"${tNode.value}\" tags cannot be used as component hosts. ` +\n                    `Please use a different tag to activate the ${stringify(def.type)} component.`);\n\n            if (tNode.flags & TNodeFlags.isComponentHost) throwMultipleComponentError(tNode);\n          }\n          markAsComponentHost(tView, tNode);\n          // The component is always stored first with directives after.\n          matches.unshift(def);\n        } else {\n          matches.push(def);\n        }\n      }\n    }\n  }\n  return matches;\n}\n\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting appropriate TNode flags;\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nexport function markAsComponentHost(tView: TView, hostTNode: TNode): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  hostTNode.flags |= TNodeFlags.isComponentHost;\n  (tView.components || (tView.components = ngDevMode ? new TViewComponents() : []))\n      .push(hostTNode.index);\n}\n\n\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(\n    tNode: TNode, localRefs: string[]|null, exportsMap: {[key: string]: number}): void {\n  if (localRefs) {\n    const localNames: (string|number)[] = tNode.localNames = ngDevMode ? new TNodeLocalNames() : [];\n\n    // Local names must be stored in tNode in the same order that localRefs are defined\n    // in the template to ensure the data is loaded in the same slots as their refs\n    // in the template (for template queries).\n    for (let i = 0; i < localRefs.length; i += 2) {\n      const index = exportsMap[localRefs[i + 1]];\n      if (index == null)\n        throw new RuntimeError(\n            RuntimeErrorCode.EXPORT_NOT_FOUND, `Export of name '${localRefs[i + 1]}' not found!`);\n      localNames.push(localRefs[i], index);\n    }\n  }\n}\n\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(\n    directiveIdx: number, def: DirectiveDef<any>|ComponentDef<any>,\n    exportsMap: {[key: string]: number}|null) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nexport function initTNodeFlags(tNode: TNode, index: number, numberOfDirectives: number) {\n  ngDevMode &&\n      assertNotEqual(\n          numberOfDirectives, tNode.directiveEnd - tNode.directiveStart,\n          'Reached the max number of directives');\n  tNode.flags |= TNodeFlags.isDirectiveHost;\n  // When the first directive is created on a node, save the index\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective<T>(\n    tView: TView, tNode: TNode, lView: LView, directiveIndex: number, def: DirectiveDef<T>): void {\n  ngDevMode &&\n      assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory =\n      def.factory || ((def as {factory: Function}).factory = getFactoryDef(def.type, true));\n  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n\n  registerHostBindingOpCodes(\n      tView, tNode, lView, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE),\n      def);\n}\n\nfunction addComponentLogic<T>(lView: LView, hostTNode: TElementNode, def: ComponentDef<T>): void {\n  const native = getNativeByTNode(hostTNode, lView) as RElement;\n  const tView = getOrCreateTComponentView(def);\n\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[RENDERER_FACTORY];\n  const componentView = addToViewTree(\n      lView,\n      createLView(\n          lView, tView, null, def.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways, native,\n          hostTNode as TElementNode, rendererFactory, rendererFactory.createRenderer(native, def),\n          null, null));\n\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  lView[hostTNode.index] = componentView;\n}\n\nexport function elementAttributeInternal(\n    tNode: TNode, lView: LView, name: string, value: any, sanitizer: SanitizerFn|null|undefined,\n    namespace: string|null|undefined) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE as any, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(\n        tNode, TNodeType.Element,\n        `Attempted to set attribute \\`${name}\\` on a container node. ` +\n            `Host bindings are not valid on ng-container or ng-template.`);\n  }\n  const element = getNativeByTNode(tNode, lView) as RElement;\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\n\nexport function setElementAttribute(\n    renderer: Renderer3, element: RElement, namespace: string|null|undefined, tagName: string|null,\n    name: string, value: any, sanitizer: SanitizerFn|null|undefined) {\n  if (value == null) {\n    ngDevMode && ngDevMode.rendererRemoveAttribute++;\n    isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :\n                                     element.removeAttribute(name);\n  } else {\n    ngDevMode && ngDevMode.rendererSetAttribute++;\n    const strValue =\n        sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n\n\n    if (isProceduralRenderer(renderer)) {\n      renderer.setAttribute(element, name, strValue, namespace);\n    } else {\n      namespace ? element.setAttributeNS(namespace, name, strValue) :\n                  element.setAttribute(name, strValue);\n    }\n  }\n}\n\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs<T>(\n    lView: LView, directiveIndex: number, instance: T, def: DirectiveDef<T>, tNode: TNode,\n    initialInputData: InitialInputData): void {\n  const initialInputs: InitialInputs|null = initialInputData![directiveIndex];\n  if (initialInputs !== null) {\n    const setInput = def.setInput;\n    for (let i = 0; i < initialInputs.length;) {\n      const publicName = initialInputs[i++];\n      const privateName = initialInputs[i++];\n      const value = initialInputs[i++];\n      if (setInput !== null) {\n        def.setInput!(instance, value, publicName, privateName);\n      } else {\n        (instance as any)[privateName] = value;\n      }\n      if (ngDevMode) {\n        const nativeElement = getNativeByTNode(tNode, lView) as RElement;\n        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n      }\n    }\n  }\n}\n\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs The list of inputs from the directive def\n * @param attrs The static attrs on this node\n */\nfunction generateInitialInputs(inputs: {[key: string]: string}, attrs: TAttributes): InitialInputs|\n    null {\n  let inputsToStore: InitialInputs|null = null;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    if (attrName === AttributeMarker.NamespaceURI) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === AttributeMarker.ProjectAs) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    }\n\n    // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n    if (typeof attrName === 'number') break;\n\n    if (inputs.hasOwnProperty(attrName as string)) {\n      if (inputsToStore === null) inputsToStore = [];\n      inputsToStore.push(attrName as string, inputs[attrName as string], attrs[i + 1] as string);\n    }\n\n    i += 2;\n  }\n  return inputsToStore;\n}\n\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n\n// Not sure why I need to do `any` here but TS complains later.\nconst LContainerArray: any = class LContainer extends Array {};\n\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nexport function createLContainer(\n    hostNative: RElement|RComment|LView, currentView: LView, native: RComment,\n    tNode: TNode): LContainer {\n  ngDevMode && assertLView(currentView);\n  ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(native);\n  // https://jsperf.com/array-literal-vs-new-array-really\n  const lContainer: LContainer = new (ngDevMode ? LContainerArray : Array)(\n      hostNative,   // host native\n      true,         // Boolean `true` in this position signifies that this is an `LContainer`\n      false,        // has transplanted views\n      currentView,  // parent\n      null,         // next\n      0,            // transplanted views to refresh count\n      tNode,        // t_host\n      native,       // native,\n      null,         // view refs\n      null,         // moved views\n  );\n  ngDevMode &&\n      assertEqual(\n          lContainer.length, CONTAINER_HEADER_OFFSET,\n          'Should allocate correct number of slots for LContainer header.');\n  ngDevMode && attachLContainerDebug(lContainer);\n  return lContainer;\n}\n\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction refreshEmbeddedViews(lView: LView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null;\n       lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      const embeddedTView = embeddedLView[TVIEW];\n      ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]!);\n      }\n    }\n  }\n}\n\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView: LView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null;\n       lContainer = getNextLContainer(lContainer)) {\n    if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;\n\n    const movedViews = lContainer[MOVED_VIEWS]!;\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i]!;\n      const insertionLContainer = movedLView[PARENT] as LContainer;\n      ngDevMode && assertLContainer(insertionLContainer);\n      // We don't want to increment the counter if the moved LView was already marked for\n      // refresh.\n      if ((movedLView[FLAGS] & LViewFlags.RefreshTransplantedView) === 0) {\n        updateTransplantedViewCount(insertionLContainer, 1);\n      }\n      // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*\n      // those that aren't (declaration component === insertion component). In the latter case,\n      // it's fine to add the flag, as we will clear it immediately in\n      // `refreshEmbeddedViews` for the view currently being refreshed.\n      movedLView[FLAGS] |= LViewFlags.RefreshTransplantedView;\n    }\n  }\n}\n\n/////////////\n\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction refreshComponent(hostLView: LView, componentHostIdx: number): void {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n  if (viewAttachedToChangeDetector(componentView)) {\n    const tView = componentView[TVIEW];\n    if (componentView[FLAGS] & (LViewFlags.CheckAlways | LViewFlags.Dirty)) {\n      refreshView(tView, componentView, tView.template, componentView[CONTEXT]);\n    } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      refreshContainsDirtyView(componentView);\n    }\n  }\n}\n\n/**\n * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are\n * children or descendants of the given lView.\n *\n * @param lView The lView which contains descendant transplanted views that need to be refreshed.\n */\nfunction refreshContainsDirtyView(lView: LView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null;\n       lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      if (embeddedLView[FLAGS] & LViewFlags.RefreshTransplantedView) {\n        const embeddedTView = embeddedLView[TVIEW];\n        ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]!);\n      } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n        refreshContainsDirtyView(embeddedLView);\n      }\n    }\n  }\n\n  const tView = lView[TVIEW];\n  // Refresh child component views.\n  const components = tView.components;\n  if (components !== null) {\n    for (let i = 0; i < components.length; i++) {\n      const componentView = getComponentLViewByIndex(components[i], lView);\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      if (viewAttachedToChangeDetector(componentView) &&\n          componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n        refreshContainsDirtyView(componentView);\n      }\n    }\n  }\n}\n\nfunction renderComponent(hostLView: LView, componentHostIdx: number) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView: TView, lView: LView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nexport function addToViewTree<T extends LView|LContainer>(lView: LView, lViewOrLContainer: T): T {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL]![NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n\n\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nexport function markViewDirty(lView: LView): LView|null {\n  while (lView) {\n    lView[FLAGS] |= LViewFlags.Dirty;\n    const parent = getLViewParent(lView);\n    // Stop traversing up as soon as you find a root view that wasn't attached to any container\n    if (isRootView(lView) && !parent) {\n      return lView;\n    }\n    // continue otherwise\n    lView = parent!;\n  }\n  return null;\n}\n\n\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n */\nexport function scheduleTick(rootContext: RootContext, flags: RootContextFlags) {\n  const nothingScheduled = rootContext.flags === RootContextFlags.Empty;\n  if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n    // https://github.com/angular/angular/issues/39296\n    // should only attach the flags when really scheduling a tick\n    rootContext.flags |= flags;\n    let res: null|((val: null) => void);\n    rootContext.clean = new Promise<null>((r) => res = r);\n    rootContext.scheduler(() => {\n      if (rootContext.flags & RootContextFlags.DetectChanges) {\n        rootContext.flags &= ~RootContextFlags.DetectChanges;\n        tickRootContext(rootContext);\n      }\n\n      if (rootContext.flags & RootContextFlags.FlushPlayers) {\n        rootContext.flags &= ~RootContextFlags.FlushPlayers;\n        const playerHandler = rootContext.playerHandler;\n        if (playerHandler) {\n          playerHandler.flushPlayers();\n        }\n      }\n\n      rootContext.clean = _CLEAN_PROMISE;\n      res!(null);\n    });\n  }\n}\n\nexport function tickRootContext(rootContext: RootContext) {\n  for (let i = 0; i < rootContext.components.length; i++) {\n    const rootComponent = rootContext.components[i];\n    const lView = readPatchedLView(rootComponent)!;\n    const tView = lView[TVIEW];\n    renderComponentOrTemplate(tView, lView, tView.template, rootComponent);\n  }\n}\n\nexport function detectChangesInternal<T>(tView: TView, lView: LView, context: T) {\n  const rendererFactory = lView[RENDERER_FACTORY];\n  if (rendererFactory.begin) rendererFactory.begin();\n  try {\n    refreshView(tView, lView, tView.template, context);\n  } catch (error) {\n    handleError(lView, error);\n    throw error;\n  } finally {\n    if (rendererFactory.end) rendererFactory.end();\n  }\n}\n\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param lView The view which the change detection should be performed on.\n */\nexport function detectChangesInRootView(lView: LView): void {\n  tickRootContext(lView[CONTEXT] as RootContext);\n}\n\nexport function checkNoChangesInternal<T>(tView: TView, view: LView, context: T) {\n  setIsInCheckNoChangesMode(true);\n  try {\n    detectChangesInternal(tView, view, context);\n  } finally {\n    setIsInCheckNoChangesMode(false);\n  }\n}\n\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param lView The view which the change detection should be checked on.\n */\nexport function checkNoChangesInRootView(lView: LView): void {\n  setIsInCheckNoChangesMode(true);\n  try {\n    detectChangesInRootView(lView);\n  } finally {\n    setIsInCheckNoChangesMode(false);\n  }\n}\n\nfunction executeViewQueryFn<T>(\n    flags: RenderFlags, viewQueryFn: ViewQueriesFunction<{}>, component: T): void {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  viewQueryFn(flags, component);\n}\n\n\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nexport function storePropertyBindingMetadata(\n    tData: TData, tNode: TNode, propertyName: string, bindingIndex: number,\n    ...interpolationParts: string[]) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n      if (interpolationParts.length > 0) {\n        bindingMetadata +=\n            INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\n\nexport const CLEAN_PROMISE = _CLEAN_PROMISE;\n\nexport function getOrCreateLViewCleanup(view: LView): any[] {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);\n}\n\nexport function getOrCreateTViewCleanup(tView: TView): any[] {\n  return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);\n}\n\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nexport function loadComponentRenderer(\n    currentDef: DirectiveDef<any>|null, tNode: TNode, lView: LView): Renderer3 {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index])!;\n  }\n  return lView[RENDERER];\n}\n\n/** Handles an error thrown in an LView. */\nexport function handleError(lView: LView, error: any): void {\n  const injector = lView[INJECTOR];\n  const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n  errorHandler && errorHandler.handleError(error);\n}\n\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\nexport function setInputsForProperty(\n    tView: TView, lView: LView, inputs: PropertyAliasValue, publicName: string, value: any): void {\n  for (let i = 0; i < inputs.length;) {\n    const index = inputs[i++] as number;\n    const privateName = inputs[i++] as string;\n    const instance = lView[index];\n    ngDevMode && assertIndexInRange(lView, index);\n    const def = tView.data[index] as DirectiveDef<any>;\n    if (def.setInput !== null) {\n      def.setInput!(instance, value, publicName, privateName);\n    } else {\n      instance[privateName] = value;\n    }\n  }\n}\n\n/**\n * Updates a text binding at a given index in a given LView.\n */\nexport function textBindingInternal(lView: LView, index: number, value: string): void {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE as any, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView) as any as RText;\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {concatStringsWithSpace} from '../../util/stringify';\nimport {assertFirstCreatePass} from '../assert';\nimport {AttributeMarker, TAttributes, TNode} from '../interfaces/node';\nimport {getTView} from '../state';\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nexport function computeStaticStyling(\n    tNode: TNode, attrs: TAttributes|null, writeToHost: boolean): void {\n  ngDevMode &&\n      assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles: string|null = writeToHost ? tNode.styles : null;\n  let classes: string|null = writeToHost ? tNode.classes : null;\n  let mode: AttributeMarker|0 = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == AttributeMarker.Classes) {\n        classes = concatStringsWithSpace(classes, value as string);\n      } else if (mode == AttributeMarker.Styles) {\n        const style = value as string;\n        const styleValue = attrs[++i] as string;\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './injection_token';\nimport {Injector} from './injector';\nimport {InjectorMarkers} from './injector_marker';\n\n\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport const INJECTOR = new InjectionToken<Injector>(\n    'INJECTOR',\n    // Dissable tslint because this is const enum which gets inlined not top level prop access.\n    // tslint:disable-next-line: no-toplevel-property-access\n    InjectorMarkers.Injector as any,  // Special value used by Ivy to identify `Injector`.\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../util/stringify';\nimport {Injector} from './injector';\nimport {THROW_IF_NOT_FOUND} from './injector_compatibility';\n\nexport class NullInjector implements Injector {\n  get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n      error.name = 'NullInjectorError';\n      throw error;\n    }\n    return notFoundValue;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './injection_token';\n\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport const INJECTOR_SCOPE = new InjectionToken<'root'|'platform'|null>('Set Injector scope.');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {OnDestroy} from '../interface/lifecycle_hooks';\nimport {Type} from '../interface/type';\nimport {FactoryFn, getFactoryDef} from '../render3/definition_factory';\nimport {throwCyclicDependencyError, throwInvalidProviderError, throwMixedMultiProviderError} from '../render3/errors_di';\nimport {deepForEach, newArray} from '../util/array_utils';\nimport {EMPTY_ARRAY} from '../util/empty';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {setInjectImplementation} from './inject_switch';\nimport {InjectionToken} from './injection_token';\nimport {Injector} from './injector';\nimport {catchInjectorError, injectArgs, NG_TEMP_TOKEN_PATH, setCurrentInjector, THROW_IF_NOT_FOUND, USE_VALUE, ɵɵinject} from './injector_compatibility';\nimport {INJECTOR} from './injector_token';\nimport {getInheritedInjectableDef, getInjectableDef, getInjectorDef, InjectorType, InjectorTypeWithProviders, ɵɵInjectableDeclaration} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, StaticProvider, TypeProvider, ValueProvider} from './interface/provider';\nimport {NullInjector} from './null_injector';\nimport {ProviderToken} from './provider_token';\nimport {INJECTOR_SCOPE} from './scope';\n\n\n\n/**\n * Internal type for a single provider in a deep provider array.\n */\ntype SingleProvider = TypeProvider|ValueProvider|ClassProvider|ConstructorProvider|ExistingProvider|\n    FactoryProvider|StaticClassProvider;\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR: Injector|undefined = undefined;\n\nfunction getNullInjector(): Injector {\n  if (NULL_INJECTOR === undefined) {\n    NULL_INJECTOR = new NullInjector();\n  }\n  return NULL_INJECTOR;\n}\n\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n */\ninterface Record<T> {\n  factory: (() => T)|undefined;\n  value: T|{};\n  multi: any[]|undefined;\n}\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nexport function createInjector(\n    defType: /* InjectorType<any> */ any, parent: Injector|null = null,\n    additionalProviders: StaticProvider[]|null = null, name?: string): Injector {\n  const injector =\n      createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n  injector._resolveInjectorDefTypes();\n  return injector;\n}\n\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nexport function createInjectorWithoutInjectorInstances(\n    defType: /* InjectorType<any> */ any, parent: Injector|null = null,\n    additionalProviders: StaticProvider[]|null = null, name?: string): R3Injector {\n  return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);\n}\n\nexport class R3Injector {\n  /**\n   * Map of tokens to records which contain the instances of those tokens.\n   * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n   * to prevent further searches.\n   */\n  private records = new Map<ProviderToken<any>, Record<any>|null>();\n\n  /**\n   * The transitive set of `InjectorType`s which define this injector.\n   */\n  private injectorDefTypes = new Set<InjectorType<any>>();\n\n  /**\n   * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n   */\n  private onDestroy = new Set<OnDestroy>();\n\n  /**\n   * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n   * root scope.\n   */\n  private readonly scope: 'root'|'platform'|null;\n\n  readonly source: string|null;\n\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n  private _destroyed = false;\n\n  constructor(\n      def: InjectorType<any>, additionalProviders: StaticProvider[]|null, readonly parent: Injector,\n      source: string|null = null) {\n    const dedupStack: InjectorType<any>[] = [];\n\n    // Start off by creating Records for every provider declared in every InjectorType\n    // included transitively in additional providers then do the same for `def`. This order is\n    // important because `def` may include providers that override ones in additionalProviders.\n    additionalProviders &&\n        deepForEach(\n            additionalProviders,\n            provider => this.processProvider(provider, def, additionalProviders));\n\n    deepForEach([def], injectorDef => this.processInjectorType(injectorDef, [], dedupStack));\n\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR, makeRecord(undefined, this));\n\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    const record = this.records.get(INJECTOR_SCOPE);\n    this.scope = record != null ? record.value : null;\n\n    // Source name, used for debugging\n    this.source = source || (typeof def === 'object' ? null : stringify(def));\n  }\n\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n  destroy(): void {\n    this.assertNotDestroyed();\n\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this._destroyed = true;\n    try {\n      // Call all the lifecycle hooks.\n      this.onDestroy.forEach(service => service.ngOnDestroy());\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this.onDestroy.clear();\n      this.injectorDefTypes.clear();\n    }\n  }\n\n  get<T>(\n      token: ProviderToken<T>, notFoundValue: any = THROW_IF_NOT_FOUND,\n      flags = InjectFlags.Default): T {\n    this.assertNotDestroyed();\n    // Set the injection context.\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record: Record<T>|undefined|null = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n          this.records.set(token, record);\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record != null /* NOT null || undefined */) {\n          return this.hydrate(token, record);\n        }\n      }\n\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n      // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n      notFoundValue = (flags & InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?\n          null :\n          notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (e) {\n      if (e.name === 'NullInjectorError') {\n        const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(stringify(token));\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw e;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          return catchInjectorError(e, token, 'R3InjectorError', this.source);\n        }\n      } else {\n        throw e;\n      }\n    } finally {\n      // Lastly, restore the previous injection context.\n      setInjectImplementation(previousInjectImplementation);\n      setCurrentInjector(previousInjector);\n    }\n  }\n\n  /** @internal */\n  _resolveInjectorDefTypes() {\n    this.injectorDefTypes.forEach(defType => this.get(defType));\n  }\n\n  toString() {\n    const tokens = <string[]>[], records = this.records;\n    records.forEach((v, token) => tokens.push(stringify(token)));\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n\n  private assertNotDestroyed(): void {\n    if (this._destroyed) {\n      throw new Error('Injector has already been destroyed.');\n    }\n  }\n\n  /**\n   * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers\n   * to this injector.\n   *\n   * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n   * the function will return \"true\" to indicate that the providers of the type definition need\n   * to be processed. This allows us to process providers of injector types after all imports of\n   * an injector definition are processed. (following View Engine semantics: see FW-1349)\n   */\n  private processInjectorType(\n      defOrWrappedDef: InjectorType<any>|InjectorTypeWithProviders<any>,\n      parents: InjectorType<any>[],\n      dedupStack: InjectorType<any>[]): defOrWrappedDef is InjectorTypeWithProviders<any> {\n    defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n    if (!defOrWrappedDef) return false;\n\n    // Either the defOrWrappedDef is an InjectorType (with injector def) or an\n    // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n    // read, so care is taken to only do the read once.\n\n    // First attempt to read the injector def (`ɵinj`).\n    let def = getInjectorDef(defOrWrappedDef);\n\n    // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n    const ngModule =\n        (def == null) && (defOrWrappedDef as InjectorTypeWithProviders<any>).ngModule || undefined;\n\n    // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n    // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n    // is the `ngModule`.\n    const defType: InjectorType<any> =\n        (ngModule === undefined) ? (defOrWrappedDef as InjectorType<any>) : ngModule;\n\n    // Check for circular dependencies.\n    if (ngDevMode && parents.indexOf(defType) !== -1) {\n      const defName = stringify(defType);\n      const path = parents.map(stringify);\n      throwCyclicDependencyError(defName, path);\n    }\n\n    // Check for multiple imports of the same module\n    const isDuplicate = dedupStack.indexOf(defType) !== -1;\n\n    // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n    // `InjectorDef` is on its `ngModule`.\n    if (ngModule !== undefined) {\n      def = getInjectorDef(ngModule);\n    }\n\n    // If no definition was found, it might be from exports. Remove it.\n    if (def == null) {\n      return false;\n    }\n\n    // Add providers in the same way that @NgModule resolution did:\n\n    // First, include providers from any imports.\n    if (def.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedupStack.push(defType);\n\n      let importTypesWithProviders: (InjectorTypeWithProviders<any>[])|undefined;\n      try {\n        deepForEach(def.imports, imported => {\n          if (this.processInjectorType(imported, parents, dedupStack)) {\n            if (importTypesWithProviders === undefined) importTypesWithProviders = [];\n            // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n\n      // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n      if (importTypesWithProviders !== undefined) {\n        for (let i = 0; i < importTypesWithProviders.length; i++) {\n          const {ngModule, providers} = importTypesWithProviders[i];\n          deepForEach(\n              providers!,\n              provider => this.processProvider(provider, ngModule, providers || EMPTY_ARRAY));\n        }\n      }\n    }\n    // Track the InjectorType and add a provider for it. It's important that this is done after the\n    // def's imports.\n    this.injectorDefTypes.add(defType);\n    const factory = getFactoryDef(defType) || (() => new defType());\n    this.records.set(defType, makeRecord(factory, NOT_YET));\n\n    // Next, include providers listed on the definition itself.\n    const defProviders = def.providers;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = defOrWrappedDef as InjectorType<any>;\n      deepForEach(\n          defProviders, provider => this.processProvider(provider, injectorType, defProviders));\n    }\n\n    return (\n        ngModule !== undefined &&\n        (defOrWrappedDef as InjectorTypeWithProviders<any>).providers !== undefined);\n  }\n\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n  private processProvider(\n      provider: SingleProvider, ngModuleType: InjectorType<any>, providers: any[]): void {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token: any =\n        isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider, ngModuleType, providers);\n\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord!.multi!);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi!.push(provider);\n    } else {\n      const existing = this.records.get(token);\n      if (ngDevMode && existing && existing.multi !== undefined) {\n        throwMixedMultiProviderError();\n      }\n    }\n    this.records.set(token, record);\n  }\n\n  private hydrate<T>(token: ProviderToken<T>, record: Record<T>): T {\n    if (ngDevMode && record.value === CIRCULAR) {\n      throwCyclicDependencyError(stringify(token));\n    } else if (record.value === NOT_YET) {\n      record.value = CIRCULAR;\n      record.value = record.factory!();\n    }\n    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n      this.onDestroy.add(record.value);\n    }\n    return record.value as T;\n  }\n\n  private injectableDefInScope(def: ɵɵInjectableDeclaration<any>): boolean {\n    if (!def.providedIn) {\n      return false;\n    }\n    const providedIn = resolveForwardRef(def.providedIn);\n    if (typeof providedIn === 'string') {\n      return providedIn === 'any' || (providedIn === this.scope);\n    } else {\n      return this.injectorDefTypes.has(providedIn);\n    }\n  }\n}\n\nfunction injectableDefOrInjectorDefFactory(token: ProviderToken<any>): FactoryFn<any> {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n\n  if (factory !== null) {\n    return factory;\n  }\n\n  // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n  if (token instanceof InjectionToken) {\n    throw new Error(`Token ${stringify(token)} is missing a ɵprov definition.`);\n  }\n\n  // Undecorated types can sometimes be created if they have no constructor arguments.\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  }\n\n  // There was no way to resolve a factory for this token.\n  throw new Error('unreachable');\n}\n\nfunction getUndecoratedInjectableFactory(token: Function) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n  if (paramLength > 0) {\n    const args: string[] = newArray(paramLength, '?');\n    throw new Error(`Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n  }\n\n  // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token as Type<any>);\n  } else {\n    return () => new (token as Type<any>)();\n  }\n}\n\nfunction providerToRecord(\n    provider: SingleProvider, ngModuleType: InjectorType<any>, providers: any[]): Record<any> {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory: (() => any)|undefined = providerToFactory(provider, ngModuleType, providers);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nexport function providerToFactory(\n    provider: SingleProvider, ngModuleType?: InjectorType<any>, providers?: any[]): () => any {\n  let factory: (() => any)|undefined = undefined;\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n    } else {\n      const classRef = resolveForwardRef(\n          provider &&\n          ((provider as StaticClassProvider | ClassProvider).useClass || provider.provide));\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new (classRef)(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\n\nfunction makeRecord<T>(\n    factory: (() => T)|undefined, value: T|{}, multi: boolean = false): Record<T> {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined,\n  };\n}\n\nfunction isValueProvider(value: SingleProvider): value is ValueProvider {\n  return value !== null && typeof value == 'object' && USE_VALUE in value;\n}\n\nfunction isExistingProvider(value: SingleProvider): value is ExistingProvider {\n  return !!(value && (value as ExistingProvider).useExisting);\n}\n\nfunction isFactoryProvider(value: SingleProvider): value is FactoryProvider {\n  return !!(value && (value as FactoryProvider).useFactory);\n}\n\nexport function isTypeProvider(value: SingleProvider): value is TypeProvider {\n  return typeof value === 'function';\n}\n\nexport function isClassProvider(value: SingleProvider): value is ClassProvider {\n  return !!(value as StaticClassProvider | ClassProvider).useClass;\n}\n\nfunction hasDeps(value: ClassProvider|ConstructorProvider|\n                 StaticClassProvider): value is ClassProvider&{deps: any[]} {\n  return !!(value as any).deps;\n}\n\nfunction hasOnDestroy(value: any): value is OnDestroy {\n  return value !== null && typeof value === 'object' &&\n      typeof (value as OnDestroy).ngOnDestroy === 'function';\n}\n\nfunction couldBeInjectableType(value: any): value is ProviderToken<any> {\n  return (typeof value === 'function') ||\n      (typeof value === 'object' && value instanceof InjectionToken);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {THROW_IF_NOT_FOUND, ɵɵinject} from './injector_compatibility';\nimport {InjectorMarkers} from './injector_marker';\nimport {INJECTOR} from './injector_token';\nimport {ɵɵdefineInjectable} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {StaticProvider} from './interface/provider';\nimport {NullInjector} from './null_injector';\nimport {ProviderToken} from './provider_token';\nimport {createInjector} from './r3_injector';\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n  static NULL: Injector = (/* @__PURE__ */ new NullInjector());\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  /**\n   * @deprecated from v4.0.0 use ProviderToken<T>\n   * @suppress {duplicate}\n   */\n  abstract get(token: any, notFoundValue?: any): any;\n\n  /**\n   * @deprecated from v5 use the new signature Injector.create(options)\n   */\n  static create(providers: StaticProvider[], parent?: Injector): Injector;\n\n  /**\n   * Creates a new injector instance that provides one or more dependencies,\n   * according to a given type or types of `StaticProvider`.\n   *\n   * @param options An object with the following properties:\n   * * `providers`: An array of providers of the [StaticProvider type](api/core/StaticProvider).\n   * * `parent`: (optional) A parent injector.\n   * * `name`: (optional) A developer-defined identifying name for the new injector.\n   *\n   * @returns The new injector instance.\n   *\n   */\n  static create(options: {providers: StaticProvider[], parent?: Injector, name?: string}): Injector;\n\n\n  static create(\n      options: StaticProvider[]|{providers: StaticProvider[], parent?: Injector, name?: string},\n      parent?: Injector): Injector {\n    if (Array.isArray(options)) {\n      return createInjector({name: ''}, parent, options, '');\n    } else {\n      const name = options.name ?? '';\n      return createInjector({name}, options.parent, options.providers, name);\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable({\n    token: Injector,\n    providedIn: 'any',\n    factory: () => ɵɵinject(INJECTOR),\n  });\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__ = InjectorMarkers.Injector;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\nimport {Sanitizer} from '../sanitization/sanitizer';\nimport {assertDefined, assertIndexInRange} from '../util/assert';\n\nimport {assertComponentType} from './assert';\nimport {readPatchedLView} from './context_discovery';\nimport {getComponentDef} from './definition';\nimport {diPublicInInjector, getOrCreateNodeInjectorForNode} from './di';\nimport {throwProviderNotFoundError} from './errors_di';\nimport {registerPostOrderHooks} from './hooks';\nimport {addToViewTree, CLEAN_PROMISE, createLView, createTView, getOrCreateTComponentView, getOrCreateTNode, initTNodeFlags, instantiateRootComponent, invokeHostBindingsInCreationMode, locateHostElement, markAsComponentHost, refreshView, registerHostBindingOpCodes, renderView} from './instructions/shared';\nimport {ComponentDef, ComponentType, RenderFlags} from './interfaces/definition';\nimport {TElementNode, TNodeType} from './interfaces/node';\nimport {PlayerHandler} from './interfaces/player';\nimport {domRendererFactory3, Renderer3, RendererFactory3} from './interfaces/renderer';\nimport {RElement} from './interfaces/renderer_dom';\nimport {CONTEXT, HEADER_OFFSET, LView, LViewFlags, RootContext, RootContextFlags, TVIEW, TViewType} from './interfaces/view';\nimport {writeDirectClass, writeDirectStyle} from './node_manipulation';\nimport {enterView, getCurrentTNode, leaveView, setSelectedIndex} from './state';\nimport {computeStaticStyling} from './styling/static_styling';\nimport {setUpAttributes} from './util/attrs_utils';\nimport {publishDefaultGlobalUtils} from './util/global_utils';\nimport {defaultScheduler} from './util/misc_utils';\nimport {getRootContext} from './util/view_traversal_utils';\n\n\n\n/** Options that control how the component should be bootstrapped. */\nexport interface CreateComponentOptions {\n  /** Which renderer factory to use. */\n  rendererFactory?: RendererFactory3;\n\n  /** A custom sanitizer instance */\n  sanitizer?: Sanitizer;\n\n  /** A custom animation player handler */\n  playerHandler?: PlayerHandler;\n\n  /**\n   * Host element on which the component will be bootstrapped. If not specified,\n   * the component definition's `tag` is used to query the existing DOM for the\n   * element to bootstrap.\n   */\n  host?: RElement|string;\n\n  /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n  injector?: Injector;\n\n  /**\n   * List of features to be applied to the created component. Features are simply\n   * functions that decorate a component with a certain behavior.\n   *\n   * Typically, the features in this list are features that cannot be added to the\n   * other features list in the component definition because they rely on other factors.\n   *\n   * Example: `LifecycleHooksFeature` is a function that adds lifecycle hook capabilities\n   * to root components in a tree-shakable way. It cannot be added to the component\n   * features list because there's no way of knowing when the component will be used as\n   * a root component.\n   */\n  hostFeatures?: HostFeature[];\n\n  /**\n   * A function which is used to schedule change detection work in the future.\n   *\n   * When marking components as dirty, it is necessary to schedule the work of\n   * change detection in the future. This is done to coalesce multiple\n   * {@link markDirty} calls into a single changed detection processing.\n   *\n   * The default value of the scheduler is the `requestAnimationFrame` function.\n   *\n   * It is also useful to override this function for testing purposes.\n   */\n  scheduler?: (work: () => void) => void;\n}\n\n/** See CreateComponentOptions.hostFeatures */\ntype HostFeature = (<T>(component: T, componentDef: ComponentDef<T>) => void);\n\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport const NULL_INJECTOR: Injector = {\n  get: (token: any, notFoundValue?: any) => {\n    throwProviderNotFoundError(token, 'NullInjector');\n  }\n};\n\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport function renderComponent<T>(\n    componentType: ComponentType<T>|\n    Type<T>/* Type as workaround for: Microsoft/TypeScript/issues/4881 */\n    ,\n    opts: CreateComponentOptions = {}): T {\n  ngDevMode && publishDefaultGlobalUtils();\n  ngDevMode && assertComponentType(componentType);\n\n  const rendererFactory = opts.rendererFactory || domRendererFactory3;\n  const sanitizer = opts.sanitizer || null;\n  const componentDef = getComponentDef<T>(componentType)!;\n  if (componentDef.type != componentType) (componentDef as {type: Type<any>}).type = componentType;\n\n  // The first index of the first selector is the tag name.\n  const componentTag = componentDef.selectors![0]![0] as string;\n  const hostRenderer = rendererFactory.createRenderer(null, null);\n  const hostRNode =\n      locateHostElement(hostRenderer, opts.host || componentTag, componentDef.encapsulation);\n  const rootFlags = componentDef.onPush ? LViewFlags.Dirty | LViewFlags.IsRoot :\n                                          LViewFlags.CheckAlways | LViewFlags.IsRoot;\n  const rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n\n  const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n  const rootTView = createTView(TViewType.Root, null, null, 1, 0, null, null, null, null, null);\n  const rootView: LView = createLView(\n      null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, null,\n      opts.injector || null);\n\n  enterView(rootView);\n  let component: T;\n\n  try {\n    if (rendererFactory.begin) rendererFactory.begin();\n    const componentView = createRootComponentView(\n        hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n    component = createRootComponent(\n        componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n\n    // create mode pass\n    renderView(rootTView, rootView, null);\n    // update mode pass\n    refreshView(rootTView, rootView, null, null);\n\n  } finally {\n    leaveView();\n    if (rendererFactory.end) rendererFactory.end();\n  }\n\n  return component;\n}\n\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nexport function createRootComponentView(\n    rNode: RElement|null, def: ComponentDef<any>, rootView: LView,\n    rendererFactory: RendererFactory3, hostRenderer: Renderer3, sanitizer?: Sanitizer|null): LView {\n  const tView = rootView[TVIEW];\n  const index = HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(rootView, index);\n  rootView[index] = rNode;\n  // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n  // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n  // representing a host element.\n  const tNode: TElementNode = getOrCreateTNode(tView, index, TNodeType.Element, '#host', null);\n  const mergedAttrs = tNode.mergedAttrs = def.hostAttrs;\n  if (mergedAttrs !== null) {\n    computeStaticStyling(tNode, mergedAttrs, true);\n    if (rNode !== null) {\n      setUpAttributes(hostRenderer, rNode, mergedAttrs);\n      if (tNode.classes !== null) {\n        writeDirectClass(hostRenderer, rNode, tNode.classes);\n      }\n      if (tNode.styles !== null) {\n        writeDirectStyle(hostRenderer, rNode, tNode.styles);\n      }\n    }\n  }\n\n  const viewRenderer = rendererFactory.createRenderer(rNode, def);\n  const componentView = createLView(\n      rootView, getOrCreateTComponentView(def), null,\n      def.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways, rootView[index], tNode,\n      rendererFactory, viewRenderer, sanitizer || null, null);\n\n  if (tView.firstCreatePass) {\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);\n    markAsComponentHost(tView, tNode);\n    initTNodeFlags(tNode, rootView.length, 1);\n  }\n\n  addToViewTree(rootView, componentView);\n\n  // Store component view at node index, with node as the HOST\n  return rootView[index] = componentView;\n}\n\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nexport function createRootComponent<T>(\n    componentView: LView, componentDef: ComponentDef<T>, rootLView: LView, rootContext: RootContext,\n    hostFeatures: HostFeature[]|null): any {\n  const tView = rootLView[TVIEW];\n  // Create directive instance with factory() and store at next index in viewData\n  const component = instantiateRootComponent(tView, rootLView, componentDef);\n\n  rootContext.components.push(component);\n  componentView[CONTEXT] = component;\n\n  hostFeatures && hostFeatures.forEach((feature) => feature(component, componentDef));\n\n  // We want to generate an empty QueryList for root content queries for backwards\n  // compatibility with ViewEngine.\n  if (componentDef.contentQueries) {\n    const tNode = getCurrentTNode()!;\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    componentDef.contentQueries(RenderFlags.Create, component, tNode.directiveStart);\n  }\n\n  const rootTNode = getCurrentTNode()!;\n  ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n  if (tView.firstCreatePass &&\n      (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {\n    setSelectedIndex(rootTNode.index);\n\n    const rootTView = rootLView[TVIEW];\n    registerHostBindingOpCodes(\n        rootTView, rootTNode, rootLView, rootTNode.directiveStart, rootTNode.directiveEnd,\n        componentDef);\n\n    invokeHostBindingsInCreationMode(componentDef, component);\n  }\n  return component;\n}\n\n\nexport function createRootContext(\n    scheduler?: (workFn: () => void) => void, playerHandler?: PlayerHandler|null): RootContext {\n  return {\n    components: [],\n    scheduler: scheduler || defaultScheduler,\n    clean: CLEAN_PROMISE,\n    playerHandler: playerHandler || null,\n    flags: RootContextFlags.Empty\n  };\n}\n\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\nexport function LifecycleHooksFeature(component: any, def: ComponentDef<any>): void {\n  const lView = readPatchedLView(component)!;\n  ngDevMode && assertDefined(lView, 'LView is required');\n  const tView = lView[TVIEW];\n  const tNode = getCurrentTNode()!;\n  ngDevMode && assertDefined(tNode, 'TNode is required');\n  registerPostOrderHooks(tView, tNode);\n}\n\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component: any): Promise<null> {\n  return getRootContext(component).clean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type, Writable} from '../../interface/type';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../../util/empty';\nimport {fillProperties} from '../../util/property';\nimport {ComponentDef, ContentQueriesFunction, DirectiveDef, DirectiveDefFeature, HostBindingsFunction, RenderFlags, ViewQueriesFunction} from '../interfaces/definition';\nimport {TAttributes} from '../interfaces/node';\nimport {isComponentDef} from '../interfaces/type_checks';\nimport {mergeHostAttrs} from '../util/attrs_utils';\n\nexport function getSuperType(type: Type<any>): Type<any>&\n    {ɵcmp?: ComponentDef<any>, ɵdir?: DirectiveDef<any>} {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n\ntype WritableDef = Writable<DirectiveDef<any>|ComponentDef<any>>;\n\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nexport function ɵɵInheritDefinitionFeature(definition: DirectiveDef<any>|ComponentDef<any>): void {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain: WritableDef[] = [definition];\n\n  while (superType) {\n    let superDef: DirectiveDef<any>|ComponentDef<any>|undefined = undefined;\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new Error('Directives cannot inherit Components');\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵdir;\n    }\n\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef);\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        const writeableDef = definition as WritableDef;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n\n        // Merge hostBindings\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings);\n\n        // Merge queries\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries);\n\n        // Merge inputs and outputs\n        fillProperties(definition.inputs, superDef.inputs);\n        fillProperties(definition.declaredInputs, superDef.declaredInputs);\n        fillProperties(definition.outputs, superDef.outputs);\n\n        // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = (definition as ComponentDef<any>).data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      }\n\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n          if (feature && feature.ngInherit) {\n            (feature as DirectiveDefFeature)(definition);\n          }\n          // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n\n    superType = Object.getPrototypeOf(superType);\n  }\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain: WritableDef[]) {\n  let hostVars: number = 0;\n  let hostAttrs: TAttributes|null = null;\n  // We process the inheritance order from the base to the leaves here.\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i];\n    // For each `hostVars`, we need to add the superclass amount.\n    def.hostVars = (hostVars += def.hostVars);\n    // for each `hostAttrs` we need to merge it with superclass.\n    def.hostAttrs =\n        mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n  }\n}\n\nfunction maybeUnwrapEmpty<T>(value: T[]): T[];\nfunction maybeUnwrapEmpty<T>(value: T): T;\nfunction maybeUnwrapEmpty(value: any): any {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\n\nfunction inheritViewQuery(definition: WritableDef, superViewQuery: ViewQueriesFunction<any>) {\n  const prevViewQuery = definition.viewQuery;\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\n\nfunction inheritContentQueries(\n    definition: WritableDef, superContentQueries: ContentQueriesFunction<any>) {\n  const prevContentQueries = definition.contentQueries;\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\n\nfunction inheritHostBindings(\n    definition: WritableDef, superHostBindings: HostBindingsFunction<any>) {\n  const prevHostBindings = definition.hostBindings;\n  if (prevHostBindings) {\n    definition.hostBindings = (rf: RenderFlags, ctx: any) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentDef, DirectiveDef} from '../interfaces/definition';\nimport {isComponentDef} from '../interfaces/type_checks';\n\nimport {getSuperType} from './inherit_definition_feature';\n\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\nconst COPY_DIRECTIVE_FIELDS: (keyof DirectiveDef<unknown>)[] = [\n  // The child class should use the providers of its parent.\n  'providersResolver',\n\n  // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n  // as inputs, outputs, and host binding functions.\n];\n\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\nconst COPY_COMPONENT_FIELDS: Exclude<keyof ComponentDef<unknown>, keyof DirectiveDef<unknown>>[] = [\n  // The child class should use the template function of its parent, including all template\n  // semantics.\n  'template',\n  'decls',\n  'consts',\n  'vars',\n  'onPush',\n  'ngContentSelectors',\n\n  // The child class should use the CSS styles of its parent, including all styling semantics.\n  'styles',\n  'encapsulation',\n\n  // The child class should be checked by the runtime in the same way as its parent.\n  'schemas',\n];\n\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nexport function ɵɵCopyDefinitionFeature(definition: DirectiveDef<any>|ComponentDef<any>): void {\n  let superType = getSuperType(definition.type)!;\n\n  let superDef: DirectiveDef<any>|ComponentDef<any>|undefined = undefined;\n  if (isComponentDef(definition)) {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵcmp!;\n  } else {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵdir!;\n  }\n\n  // Needed because `definition` fields are readonly.\n  const defAny = (definition as any);\n\n  // Copy over any fields that apply to either directives or components.\n  for (const field of COPY_DIRECTIVE_FIELDS) {\n    defAny[field] = superDef[field];\n  }\n\n  if (isComponentDef(superDef)) {\n    // Copy over any component-specific fields.\n    for (const field of COPY_COMPONENT_FIELDS) {\n      defAny[field] = superDef[field];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global as _global} from './global';\n\n// When Symbol.iterator doesn't exist, retrieves the key used in es6-shim\ndeclare const Symbol: any;\nlet _symbolIterator: any = null;\nexport function getSymbolIterator(): string|symbol {\n  if (!_symbolIterator) {\n    const Symbol = _global['Symbol'];\n    if (Symbol && Symbol.iterator) {\n      _symbolIterator = Symbol.iterator;\n    } else {\n      // es6-shim specific logic\n      const keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (key !== 'entries' && key !== 'size' &&\n            (Map as any).prototype[key] === Map.prototype['entries']) {\n          _symbolIterator = key;\n        }\n      }\n    }\n  }\n  return _symbolIterator;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getSymbolIterator} from '../util/symbol';\n\nexport function devModeEqual(a: any, b: any): boolean {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return Object.is(a, b);\n    }\n  }\n}\n\nexport function isListLikeIterable(obj: any): boolean {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) ||\n      (!(obj instanceof Map) &&      // JS Map are iterables but return entries as [k, v]\n       getSymbolIterator() in obj);  // JS Iterable have a Symbol.iterator prop\n}\n\nexport function areIterablesEqual(\n    a: any, b: any, comparator: (a: any, b: any) => boolean): boolean {\n  const iterator1 = a[getSymbolIterator()]();\n  const iterator2 = b[getSymbolIterator()]();\n\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n\nexport function iterateListLike(obj: any, fn: (p: any) => any) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[getSymbolIterator()]();\n    let item: any;\n    while (!((item = iterator.next()).done)) {\n      fn(item.value);\n    }\n  }\n}\n\nexport function isJsObject(o: any): boolean {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {devModeEqual} from '../change_detection/change_detection_util';\nimport {assertIndexInRange, assertLessThan, assertNotSame} from '../util/assert';\n\nimport {getExpressionChangedErrorDetails, throwErrorIfNoChangesMode} from './errors';\nimport {LView} from './interfaces/view';\nimport {isInCheckNoChangesMode} from './state';\nimport {NO_CHANGE} from './tokens';\n\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nexport function updateBinding(lView: LView, bindingIndex: number, value: any): any {\n  return lView[bindingIndex] = value;\n}\n\n\n/** Gets the current binding value. */\nexport function getBinding(lView: LView, bindingIndex: number): any {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode &&\n      assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nexport function bindingUpdated(lView: LView, bindingIndex: number, value: any): boolean {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  ngDevMode &&\n      assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  const oldValue = lView[bindingIndex];\n\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details =\n            getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n        throwErrorIfNoChangesMode(\n            oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);\n      }\n      // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n      return false;\n    }\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nexport function bindingUpdated2(lView: LView, bindingIndex: number, exp1: any, exp2: any): boolean {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nexport function bindingUpdated3(\n    lView: LView, bindingIndex: number, exp1: any, exp2: any, exp3: any): boolean {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nexport function bindingUpdated4(\n    lView: LView, bindingIndex: number, exp1: any, exp2: any, exp3: any, exp4: any): boolean {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\nimport {elementAttributeInternal, storePropertyBindingMetadata} from './shared';\n\n\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nexport function ɵɵattribute(\n    name: string, value: any, sanitizer?: SanitizerFn|null,\n    namespace?: string): typeof ɵɵattribute {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n  return ɵɵattribute;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertLessThan} from '../../util/assert';\nimport {bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4} from '../bindings';\nimport {LView} from '../interfaces/view';\nimport {getBindingIndex, incrementBindingIndex, nextBindingIndex, setBindingIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {renderStringify} from '../util/stringify_utils';\n\n\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function interpolationV(lView: LView, values: any[]): string|NO_CHANGE {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n  setBindingIndex(bindingIndex);\n\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  }\n\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    content += renderStringify(values[i]) + values[i + 1];\n  }\n\n  return content;\n}\n\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nexport function interpolation1(lView: LView, prefix: string, v0: any, suffix: string): string|\n    NO_CHANGE {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nexport function interpolation2(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nexport function interpolation3(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n      NO_CHANGE;\n}\n\n/**\n * Create an interpolation binding with 4 expressions.\n */\nexport function interpolation4(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + suffix :\n                     NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nexport function interpolation5(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n                     NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nexport function interpolation6(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n          renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n      NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nexport function interpolation7(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): string|\n    NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n          renderStringify(v5) + i5 + renderStringify(v6) + suffix :\n                     NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nexport function interpolation8(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n          renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n                     NO_CHANGE;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {getBindingIndex, getLView, getSelectedTNode, getTView} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {elementAttributeInternal, storePropertyBindingMetadata} from './shared';\n\n\n\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate1(\n    attrName: string, prefix: string, v0: any, suffix: string, sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵattributeInterpolate1;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate2(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, suffix: string,\n    sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵattributeInterpolate2;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate3(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1,\n            suffix);\n  }\n  return ɵɵattributeInterpolate3;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate4(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string, sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2,\n            suffix);\n  }\n  return ɵɵattributeInterpolate4;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate5(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string, sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2,\n            i3, suffix);\n  }\n  return ɵɵattributeInterpolate5;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate6(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string, sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2,\n            i3, i4, suffix);\n  }\n  return ɵɵattributeInterpolate6;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate7(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string,\n    sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2,\n            i3, i4, i5, suffix);\n  }\n  return ɵɵattributeInterpolate7;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate8(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2,\n            i3, i4, i5, i6, suffix);\n  }\n  return ɵɵattributeInterpolate8;\n}\n\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolateV(\n    attrName: string, values: any[], sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolateV {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]];  // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(\n          getTView().data, tNode, 'attr.' + attrName,\n          getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n  return ɵɵattributeInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertFirstCreatePass} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {registerPostOrderHooks} from '../hooks';\nimport {ComponentTemplate} from '../interfaces/definition';\nimport {LocalRefExtractor, TAttributes, TContainerNode, TNodeType} from '../interfaces/node';\nimport {isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, LView, RENDERER, TView, TViewType} from '../interfaces/view';\nimport {appendChild} from '../node_manipulation';\nimport {getLView, getTView, setCurrentTNode} from '../state';\nimport {getConstant} from '../util/view_utils';\nimport {addToViewTree, createDirectivesInstances, createLContainer, createTView, getOrCreateTNode, resolveDirectives, saveResolvedLocalsInData} from './shared';\n\n\n\nfunction templateFirstCreatePass(\n    index: number, tView: TView, lView: LView, templateFn: ComponentTemplate<any>|null,\n    decls: number, vars: number, tagName?: string|null, attrsIndex?: number|null,\n    localRefsIndex?: number|null): TContainerNode {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n  const tNode = getOrCreateTNode(\n      tView, index, TNodeType.Container, tagName || null,\n      getConstant<TAttributes>(tViewConsts, attrsIndex));\n\n  resolveDirectives(tView, lView, tNode, getConstant<string[]>(tViewConsts, localRefsIndex));\n  registerPostOrderHooks(tView, tNode);\n\n  const embeddedTView = tNode.tViews = createTView(\n      TViewType.Embedded, tNode, templateFn, decls, vars, tView.directiveRegistry,\n      tView.pipeRegistry, null, tView.schemas, tViewConsts);\n\n  if (tView.queries !== null) {\n    tView.queries.template(tView, tNode);\n    embeddedTView.queries = tView.queries.embeddedTView(tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nexport function ɵɵtemplate(\n    index: number, templateFn: ComponentTemplate<any>|null, decls: number, vars: number,\n    tagName?: string|null, attrsIndex?: number|null, localRefsIndex?: number|null,\n    localRefExtractor?: LocalRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  const tNode = tView.firstCreatePass ? templateFirstCreatePass(\n                                            adjustedIndex, tView, lView, templateFn, decls, vars,\n                                            tagName, attrsIndex, localRefsIndex) :\n                                        tView.data[adjustedIndex] as TContainerNode;\n  setCurrentTNode(tNode, false);\n\n  const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n  appendChild(tView, lView, comment, tNode);\n  attachPatchData(comment, lView);\n\n  addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {HEADER_OFFSET, LView, TView} from '../interfaces/view';\nimport {getContextLView} from '../state';\nimport {load} from '../util/view_utils';\n\n\n/** Store a value in the `data` at a given `index`. */\nexport function store<T>(tView: TView, lView: LView, index: number, value: T): void {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n  lView[index] = value;\n}\n\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nexport function ɵɵreference<T>(index: number) {\n  const contextLView = getContextLView();\n  return load<T>(contextLView, HEADER_OFFSET + index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {resolveForwardRef} from '../forward_ref';\nimport {ɵɵinject, ɵɵinvalidFactoryDep} from '../injector_compatibility';\nimport {ɵɵdefineInjectable, ɵɵdefineInjector} from '../interface/defs';\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nexport const angularCoreDiEnv: {[name: string]: Function} = {\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'resolveForwardRef': resolveForwardRef,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getCompilerFacade, JitCompilerUsage, R3InjectableMetadataFacade} from '../../compiler/compiler_facade';\nimport {Type} from '../../interface/type';\nimport {NG_FACTORY_DEF} from '../../render3/fields';\nimport {getClosureSafeProperty} from '../../util/property';\nimport {resolveForwardRef} from '../forward_ref';\nimport {Injectable} from '../injectable';\nimport {NG_PROV_DEF} from '../interface/defs';\nimport {ClassSansProvider, ExistingSansProvider, FactorySansProvider, ValueProvider, ValueSansProvider} from '../interface/provider';\n\nimport {angularCoreDiEnv} from './environment';\nimport {convertDependencies, reflectDependencies} from './util';\n\n\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nexport function compileInjectable(type: Type<any>, meta?: Injectable): void {\n  let ngInjectableDef: any = null;\n  let ngFactoryDef: any = null;\n\n  // if NG_PROV_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_PROV_DEF)) {\n    Object.defineProperty(type, NG_PROV_DEF, {\n      get: () => {\n        if (ngInjectableDef === null) {\n          const compiler =\n              getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'injectable', type});\n          ngInjectableDef = compiler.compileInjectable(\n              angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n        }\n        return ngInjectableDef;\n      },\n    });\n  }\n\n  // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n      get: () => {\n        if (ngFactoryDef === null) {\n          const compiler =\n              getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'injectable', type});\n          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n            name: type.name,\n            type,\n            typeArgumentCount: 0,  // In JIT mode types are not available nor used.\n            deps: reflectDependencies(type),\n            target: compiler.FactoryTarget.Injectable\n          });\n        }\n        return ngFactoryDef;\n      },\n      // Leave this configurable so that the factories from directives or pipes can take precedence.\n      configurable: true\n    });\n  }\n}\n\ntype UseClassProvider = Injectable&ClassSansProvider&{deps?: any[]};\n\nconst USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nfunction isUseClassProvider(meta: Injectable): meta is UseClassProvider {\n  return (meta as UseClassProvider).useClass !== undefined;\n}\n\nfunction isUseValueProvider(meta: Injectable): meta is Injectable&ValueSansProvider {\n  return USE_VALUE in meta;\n}\n\nfunction isUseFactoryProvider(meta: Injectable): meta is Injectable&FactorySansProvider {\n  return (meta as FactorySansProvider).useFactory !== undefined;\n}\n\nfunction isUseExistingProvider(meta: Injectable): meta is Injectable&ExistingSansProvider {\n  return (meta as ExistingSansProvider).useExisting !== undefined;\n}\n\nfunction getInjectableMetadata(type: Type<any>, srcMeta?: Injectable): R3InjectableMetadataFacade {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta: Injectable = srcMeta || {providedIn: null};\n  const compilerMeta: R3InjectableMetadataFacade = {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    providedIn: meta.providedIn,\n  };\n  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n    compilerMeta.deps = convertDependencies(meta.deps);\n  }\n  // Check to see if the user explicitly provided a `useXxxx` property.\n  if (isUseClassProvider(meta)) {\n    compilerMeta.useClass = meta.useClass;\n  } else if (isUseValueProvider(meta)) {\n    compilerMeta.useValue = meta.useValue;\n  } else if (isUseFactoryProvider(meta)) {\n    compilerMeta.useFactory = meta.useFactory;\n  } else if (isUseExistingProvider(meta)) {\n    compilerMeta.useExisting = meta.useExisting;\n  }\n  return compilerMeta;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {makeDecorator, TypeDecorator} from '../util/decorators';\n\nimport {ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueSansProvider} from './interface/provider';\nimport {compileInjectable} from './jit/injectable';\n\nexport {compileInjectable};\n\n/**\n * Injectable providers used in `@Injectable` decorator.\n *\n * @publicApi\n */\nexport type InjectableProvider = ValueSansProvider|ExistingSansProvider|StaticClassSansProvider|\n    ConstructorSansProvider|FactorySansProvider|ClassSansProvider;\n\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectableDecorator {\n  /**\n   * Decorator that marks a class as available to be\n   * provided and injected as a dependency.\n   *\n   * @see [Introduction to Services and DI](guide/architecture-services)\n   * @see [Dependency Injection Guide](guide/dependency-injection)\n   *\n   * @usageNotes\n   *\n   * Marking a class with `@Injectable` ensures that the compiler\n   * will generate the necessary metadata to create the class's\n   * dependencies when the class is injected.\n   *\n   * The following example shows how a service class is properly\n   *  marked so that a supporting service can be injected upon creation.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Injectable\"></code-example>\n   *\n   */\n  (): TypeDecorator;\n  (options?: {providedIn: Type<any>|'root'|'platform'|'any'|null}&\n   InjectableProvider): TypeDecorator;\n  new(): Injectable;\n  new(options?: {providedIn: Type<any>|'root'|'platform'|'any'|null}&\n      InjectableProvider): Injectable;\n}\n\n/**\n * Type of the Injectable metadata.\n *\n * @publicApi\n */\nexport interface Injectable {\n  /**\n   * Determines which injectors will provide the injectable.\n   *\n   * - `Type<any>` - associates the injectable with an `@NgModule` or other `InjectorType`,\n   * - 'null' : Equivalent to `undefined`. The injectable is not provided in any scope automatically\n   * and must be added to a `providers` array of an [@NgModule](api/core/NgModule#providers),\n   * [@Component](api/core/Directive#providers) or [@Directive](api/core/Directive#providers).\n   *\n   * The following options specify that this injectable should be provided in one of the following\n   * injectors:\n   * - 'root' : The application-level injector in most apps.\n   * - 'platform' : A special singleton platform injector shared by all\n   * applications on the page.\n   * - 'any' : Provides a unique instance in each lazy loaded module while all eagerly loaded\n   * modules share one instance.\n   *\n   */\n  providedIn?: Type<any>|'root'|'platform'|'any'|null;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Injectable: InjectableDecorator = makeDecorator(\n    'Injectable', undefined, undefined, undefined,\n    (type: Type<any>, meta: Injectable) => compileInjectable(type as any, meta));\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectFlags, resolveForwardRef} from '../../di';\nimport {assertInjectImplementationNotEqual} from '../../di/inject_switch';\nimport {ɵɵinject} from '../../di/injector_compatibility';\nimport {ProviderToken} from '../../di/provider_token';\nimport {getOrCreateInjectable} from '../di';\nimport {TDirectiveHostNode} from '../interfaces/node';\nimport {getCurrentTNode, getLView} from '../state';\n\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * `directiveInject` is intended to be used for directive, component and pipe factories.\n *  All other injection use `inject` which does not walk the node injector tree.\n *\n * Usage example (in factory function):\n *\n * ```ts\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ɵdir = ɵɵdefineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(ɵɵdirectiveInject(DirectiveA))\n *   });\n * }\n * ```\n * @param token the type or token to inject\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n *\n * @codeGenApi\n */\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>): T;\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>, flags: InjectFlags): T;\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>, flags = InjectFlags.Default): T|null {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return ɵɵinject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  return getOrCreateInjectable<T>(\n      tNode as TDirectiveHostNode, lView, resolveForwardRef(token), flags);\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport function ɵɵinvalidFactory(): never {\n  const msg =\n      ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n  throw new Error(msg);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {TNode} from '../interfaces/node';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {LView, RENDERER, TView} from '../interfaces/view';\nimport {getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\n\nimport {elementPropertyInternal, setInputsForProperty, storePropertyBindingMetadata} from './shared';\n\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵproperty<T>(\n    propName: string, value: T, sanitizer?: SanitizerFn|null): typeof ɵɵproperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵproperty;\n}\n\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nexport function setDirectiveInputsWhichShadowsStyling(\n    tView: TView, tNode: TNode, lView: LView, value: any, isClassBased: boolean) {\n  const inputs = tNode.inputs!;\n  const property = isClassBased ? 'class' : 'style';\n  // We support both 'class' and `className` hence the fallback.\n  setInputsForProperty(tView, lView, inputs[property], property, value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {formatRuntimeError, RuntimeErrorCode} from '../../errors';\nimport {assertDefined, assertEqual, assertIndexInRange} from '../../util/assert';\nimport {assertFirstCreatePass, assertHasParent} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {registerPostOrderHooks} from '../hooks';\nimport {hasClassInput, hasStyleInput, TAttributes, TElementNode, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {isContentQueryHost, isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, LView, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {appendChild, createElementNode, writeDirectClass, writeDirectStyle} from '../node_manipulation';\nimport {decreaseElementDepthCount, getBindingIndex, getCurrentTNode, getElementDepthCount, getLView, getNamespace, getTView, increaseElementDepthCount, isCurrentTNodeParent, setCurrentTNode, setCurrentTNodeAsNotParent} from '../state';\nimport {computeStaticStyling} from '../styling/static_styling';\nimport {setUpAttributes} from '../util/attrs_utils';\nimport {getConstant} from '../util/view_utils';\n\nimport {setDirectiveInputsWhichShadowsStyling} from './property';\nimport {createDirectivesInstances, executeContentQueries, getOrCreateTNode, matchingSchemas, resolveDirectives, saveResolvedLocalsInData} from './shared';\n\n\n\nfunction elementStartFirstCreatePass(\n    index: number, tView: TView, lView: LView, native: RElement, name: string,\n    attrsIndex?: number|null, localRefsIndex?: number): TElementNode {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n\n  const tViewConsts = tView.consts;\n  const attrs = getConstant<TAttributes>(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, TNodeType.Element, name, attrs);\n\n  const hasDirectives =\n      resolveDirectives(tView, lView, tNode, getConstant<string[]>(tViewConsts, localRefsIndex));\n  ngDevMode && logUnknownElementError(tView, native, tNode, hasDirectives);\n\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nexport function ɵɵelementStart(\n    index: number, name: string, attrsIndex?: number|null, localRefsIndex?: number): void {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = HEADER_OFFSET + index;\n\n  ngDevMode &&\n      assertEqual(\n          getBindingIndex(), tView.bindingStartIndex,\n          'elements should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n\n  const renderer = lView[RENDERER];\n  const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace());\n  const tNode = tView.firstCreatePass ?\n      elementStartFirstCreatePass(\n          adjustedIndex, tView, lView, native, name, attrsIndex, localRefsIndex) :\n      tView.data[adjustedIndex] as TElementNode;\n  setCurrentTNode(tNode, true);\n\n  const mergedAttrs = tNode.mergedAttrs;\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, native, mergedAttrs);\n  }\n  const classes = tNode.classes;\n  if (classes !== null) {\n    writeDirectClass(renderer, native, classes);\n  }\n  const styles = tNode.styles;\n  if (styles !== null) {\n    writeDirectStyle(renderer, native, styles);\n  }\n\n  if ((tNode.flags & TNodeFlags.isDetached) !== TNodeFlags.isDetached) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  }\n\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex !== null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n}\n\n/**\n * Mark the end of the element.\n *\n * @codeGenApi\n */\nexport function ɵɵelementEnd(): void {\n  let currentTNode = getCurrentTNode()!;\n  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent!;\n    setCurrentTNode(currentTNode, false);\n  }\n\n  const tNode = currentTNode;\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode);\n\n\n  decreaseElementDepthCount();\n\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries!.elementEnd(currentTNode);\n    }\n  }\n\n  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n  }\n\n  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n  }\n}\n\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n *\n * @codeGenApi\n */\nexport function ɵɵelement(\n    index: number, name: string, attrsIndex?: number|null, localRefsIndex?: number): void {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n}\n\nfunction logUnknownElementError(\n    tView: TView, element: RElement, tNode: TNode, hasDirectives: boolean): void {\n  const schemas = tView.schemas;\n\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return;\n\n  const tagName = tNode.value;\n\n  // If the element matches any directive, it's considered as valid.\n  if (!hasDirectives && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown =\n        // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,\n        // because while most browsers return 'function', IE returns 'object'.\n        (typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement &&\n         element instanceof HTMLUnknownElement) ||\n        (typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 &&\n         !customElements.get(tagName));\n\n    if (isUnknown && !matchingSchemas(tView, tagName)) {\n      let message = `'${tagName}' is not a known element:\\n`;\n      message += `1. If '${\n          tagName}' is an Angular component, then verify that it is part of this module.\\n`;\n      if (tagName && tagName.indexOf('-') > -1) {\n        message += `2. If '${\n            tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;\n      } else {\n        message +=\n            `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n      }\n      console.error(formatRuntimeError(RuntimeErrorCode.UNKNOWN_ELEMENT, message));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {KeyValueArray} from '../../util/array_utils';\nimport {TStylingRange} from '../interfaces/styling';\nimport {TIcu} from './i18n';\nimport {CssSelector} from './projection';\nimport {RNode} from './renderer_dom';\nimport {LView, TView} from './view';\n\n\n/**\n * TNodeType corresponds to the {@link TNode} `type` property.\n *\n * NOTE: type IDs are such that we use each bit to denote a type. This is done so that we can easily\n * check if the `TNode` is of more than one type.\n *\n * `if (tNode.type === TNodeType.Text || tNode.type === TNode.Element)`\n * can be written as:\n * `if (tNode.type & (TNodeType.Text | TNodeType.Element))`\n *\n * However any given `TNode` can only be of one type.\n */\nexport const enum TNodeType {\n  /**\n   * The TNode contains information about a DOM element aka {@link RText}.\n   */\n  Text = 0b1,\n\n  /**\n   * The TNode contains information about a DOM element aka {@link RElement}.\n   */\n  Element = 0b10,\n\n  /**\n   * The TNode contains information about an {@link LContainer} for embedded views.\n   */\n  Container = 0b100,\n\n  /**\n   * The TNode contains information about an `<ng-container>` element {@link RNode}.\n   */\n  ElementContainer = 0b1000,\n\n  /**\n   * The TNode contains information about an `<ng-content>` projection\n   */\n  Projection = 0b10000,\n\n  /**\n   * The TNode contains information about an ICU comment used in `i18n`.\n   */\n  Icu = 0b100000,\n\n  /**\n   * Special node type representing a placeholder for future `TNode` at this location.\n   *\n   * I18n translation blocks are created before the element nodes which they contain. (I18n blocks\n   * can span over many elements.) Because i18n `TNode`s (representing text) are created first they\n   * often may need to point to element `TNode`s which are not yet created. In such a case we create\n   * a `Placeholder` `TNode`. This allows the i18n to structurally link the `TNode`s together\n   * without knowing any information about the future nodes which will be at that location.\n   *\n   * On `firstCreatePass` When element instruction executes it will try to create a `TNode` at that\n   * location. Seeing a `Placeholder` `TNode` already there tells the system that it should reuse\n   * existing `TNode` (rather than create a new one) and just update the missing information.\n   */\n  Placeholder = 0b1000000,\n\n  // Combined Types These should never be used for `TNode.type` only as a useful way to check\n  // if `TNode.type` is one of several choices.\n\n  // See: https://github.com/microsoft/TypeScript/issues/35875 why we can't refer to existing enum.\n  AnyRNode = 0b11,        // Text | Element,\n  AnyContainer = 0b1100,  // Container | ElementContainer, // See:\n}\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nexport function toTNodeTypeAsString(tNodeType: TNodeType): string {\n  let text = '';\n  (tNodeType & TNodeType.Text) && (text += '|Text');\n  (tNodeType & TNodeType.Element) && (text += '|Element');\n  (tNodeType & TNodeType.Container) && (text += '|Container');\n  (tNodeType & TNodeType.ElementContainer) && (text += '|ElementContainer');\n  (tNodeType & TNodeType.Projection) && (text += '|Projection');\n  (tNodeType & TNodeType.Icu) && (text += '|IcuContainer');\n  (tNodeType & TNodeType.Placeholder) && (text += '|Placeholder');\n  return text.length > 0 ? text.substring(1) : text;\n}\n\n/**\n * Corresponds to the TNode.flags property.\n */\nexport const enum TNodeFlags {\n  /** Bit #1 - This bit is set if the node is a host for any directive (including a component) */\n  isDirectiveHost = 0x1,\n\n  /**\n   * Bit #2 - This bit is set if the node is a host for a component.\n   *\n   * Setting this bit implies that the `isDirectiveHost` bit is set as well.\n   * */\n  isComponentHost = 0x2,\n\n  /** Bit #3 - This bit is set if the node has been projected */\n  isProjected = 0x4,\n\n  /** Bit #4 - This bit is set if any directive on this node has content queries */\n  hasContentQuery = 0x8,\n\n  /** Bit #5 - This bit is set if the node has any \"class\" inputs */\n  hasClassInput = 0x10,\n\n  /** Bit #6 - This bit is set if the node has any \"style\" inputs */\n  hasStyleInput = 0x20,\n\n  /** Bit #7 This bit is set if the node has been detached by i18n */\n  isDetached = 0x40,\n\n  /**\n   * Bit #8 - This bit is set if the node has directives with host bindings.\n   *\n   * This flags allows us to guard host-binding logic and invoke it only on nodes\n   * that actually have directives with host bindings.\n   */\n  hasHostBindings = 0x80,\n}\n\n/**\n * Corresponds to the TNode.providerIndexes property.\n */\nexport const enum TNodeProviderIndexes {\n  /** The index of the first provider on this node is encoded on the least significant bits. */\n  ProvidersStartIndexMask = 0b00000000000011111111111111111111,\n\n  /**\n   * The count of view providers from the component on this node is\n   * encoded on the 20 most significant bits.\n   */\n  CptViewProvidersCountShift = 20,\n  CptViewProvidersCountShifter = 0b00000000000100000000000000000000,\n}\n\n/**\n * A set of marker values to be used in the attributes arrays. These markers indicate that some\n * items are not regular attributes and the processing should be adapted accordingly.\n */\nexport const enum AttributeMarker {\n  /**\n   * An implicit marker which indicates that the value in the array are of `attributeKey`,\n   * `attributeValue` format.\n   *\n   * NOTE: This is implicit as it is the type when no marker is present in array. We indicate that\n   * it should not be present at runtime by the negative number.\n   */\n  ImplicitAttributes = -1,\n\n  /**\n   * Marker indicates that the following 3 values in the attributes array are:\n   * namespaceUri, attributeName, attributeValue\n   * in that order.\n   */\n  NamespaceURI = 0,\n\n  /**\n   * Signals class declaration.\n   *\n   * Each value following `Classes` designates a class name to include on the element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div class=\"foo bar baz\">...<d/vi>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Classes, 'foo', 'bar', 'baz'];\n   * ```\n   */\n  Classes = 1,\n\n  /**\n   * Signals style declaration.\n   *\n   * Each pair of values following `Styles` designates a style name and value to include on the\n   * element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div style=\"width:100px; height:200px; color:red\">...</div>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Styles, 'width', '100px', 'height'. '200px', 'color', 'red'];\n   * ```\n   */\n  Styles = 2,\n\n  /**\n   * Signals that the following attribute names were extracted from input or output bindings.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" [foo]=\"exp\" (bar)=\"doSth()\">\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.Bindings, 'foo', 'bar'];\n   * ```\n   */\n  Bindings = 3,\n\n  /**\n   * Signals that the following attribute names were hoisted from an inline-template declaration.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div *ngFor=\"let value of values; trackBy:trackBy\" dirA [dirB]=\"value\">\n   * ```\n   *\n   * the generated code for the `template()` instruction would include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB', AttributeMarker.Template, 'ngFor', 'ngForOf',\n   * 'ngForTrackBy', 'let-value']\n   * ```\n   *\n   * while the generated code for the `element()` instruction inside the template function would\n   * include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB']\n   * ```\n   */\n  Template = 4,\n\n  /**\n   * Signals that the following attribute is `ngProjectAs` and its value is a parsed\n   * `CssSelector`.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <h1 attr=\"value\" ngProjectAs=\"[title]\">\n   * ```\n   *\n   * the generated code for the `element()` instruction would include:\n   *\n   * ```\n   * ['attr', 'value', AttributeMarker.ProjectAs, ['', 'title', '']]\n   * ```\n   */\n  ProjectAs = 5,\n\n  /**\n   * Signals that the following attribute will be translated by runtime i18n\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" foo=\"value\" i18n-foo [bar]=\"binding\" i18n-bar>\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.I18n, 'foo', 'bar'];\n   */\n  I18n = 6,\n}\n\n/**\n * A combination of:\n * - Attribute names and values.\n * - Special markers acting as flags to alter attributes processing.\n * - Parsed ngProjectAs selectors.\n */\nexport type TAttributes = (string|AttributeMarker|CssSelector)[];\n\n/**\n * Constants that are associated with a view. Includes:\n * - Attribute arrays.\n * - Local definition arrays.\n * - Translated messages (i18n).\n */\nexport type TConstants = (TAttributes|string)[];\n\n/**\n * Factory function that returns an array of consts. Consts can be represented as a function in\n * case any additional statements are required to define consts in the list. An example is i18n\n * where additional i18n calls are generated, which should be executed when consts are requested\n * for the first time.\n */\nexport type TConstantsFactory = () => TConstants;\n\n/**\n * TConstants type that describes how the `consts` field is generated on ComponentDef: it can be\n * either an array or a factory function that returns that array.\n */\nexport type TConstantsOrFactory = TConstants|TConstantsFactory;\n\n/**\n * Binding data (flyweight) for a particular node that is shared between all templates\n * of a specific type.\n *\n * If a property is:\n *    - PropertyAliases: that property's data was generated and this is it\n *    - Null: that property's data was already generated and nothing was found.\n *    - Undefined: that property's data has not yet been generated\n *\n * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\n */\nexport interface TNode {\n  /** The type of the TNode. See TNodeType. */\n  type: TNodeType;\n\n  /**\n   * Index of the TNode in TView.data and corresponding native element in LView.\n   *\n   * This is necessary to get from any TNode to its corresponding native element when\n   * traversing the node tree.\n   *\n   * If index is -1, this is a dynamically created container node or embedded view node.\n   */\n  index: number;\n\n  /**\n   * Insert before existing DOM node index.\n   *\n   * When DOM nodes are being inserted, normally they are being appended as they are created.\n   * Under i18n case, the translated text nodes are created ahead of time as part of the\n   * `ɵɵi18nStart` instruction which means that this `TNode` can't just be appended and instead\n   * needs to be inserted using `insertBeforeIndex` semantics.\n   *\n   * Additionally sometimes it is necessary to insert new text nodes as a child of this `TNode`. In\n   * such a case the value stores an array of text nodes to insert.\n   *\n   * Example:\n   * ```\n   * <div i18n>\n   *   Hello <span>World</span>!\n   * </div>\n   * ```\n   * In the above example the `ɵɵi18nStart` instruction can create `Hello `, `World` and `!` text\n   * nodes. It can also insert `Hello ` and `!` text node as a child of `<div>`, but it can't\n   * insert `World` because the `<span>` node has not yet been created. In such a case the\n   * `<span>` `TNode` will have an array which will direct the `<span>` to not only insert\n   * itself in front of `!` but also to insert the `World` (created by `ɵɵi18nStart`) into\n   * `<span>` itself.\n   *\n   * Pseudo code:\n   * ```\n   *   if (insertBeforeIndex === null) {\n   *     // append as normal\n   *   } else if (Array.isArray(insertBeforeIndex)) {\n   *     // First insert current `TNode` at correct location\n   *     const currentNode = lView[this.index];\n   *     parentNode.insertBefore(currentNode, lView[this.insertBeforeIndex[0]]);\n   *     // Now append all of the children\n   *     for(let i=1; i<this.insertBeforeIndex; i++) {\n   *       currentNode.appendChild(lView[this.insertBeforeIndex[i]]);\n   *     }\n   *   } else {\n   *     parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])\n   *   }\n   * ```\n   * - null: Append as normal using `parentNode.appendChild`\n   * - `number`: Append using\n   *      `parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])`\n   *\n   * *Initialization*\n   *\n   * Because `ɵɵi18nStart` executes before nodes are created, on `TView.firstCreatePass` it is not\n   * possible for `ɵɵi18nStart` to set the `insertBeforeIndex` value as the corresponding `TNode`\n   * has not yet been created. For this reason the `ɵɵi18nStart` creates a `TNodeType.Placeholder`\n   * `TNode` at that location. See `TNodeType.Placeholder` for more information.\n   */\n  insertBeforeIndex: InsertBeforeIndex;\n\n  /**\n   * The index of the closest injector in this node's LView.\n   *\n   * If the index === -1, there is no injector on this node or any ancestor node in this view.\n   *\n   * If the index !== -1, it is the index of this node's injector OR the index of a parent\n   * injector in the same view. We pass the parent injector index down the node tree of a view so\n   * it's possible to find the parent injector without walking a potentially deep node tree.\n   * Injector indices are not set across view boundaries because there could be multiple component\n   * hosts.\n   *\n   * If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent\n   * injector.\n   */\n  injectorIndex: number;\n\n  /**\n   * Stores starting index of the directives.\n   *\n   * NOTE: The first directive is always component (if present).\n   */\n  directiveStart: number;\n\n  /**\n   * Stores final exclusive index of the directives.\n   *\n   * The area right behind the `directiveStart-directiveEnd` range is used to allocate the\n   * `HostBindingFunction` `vars` (or null if no bindings.) Therefore `directiveEnd` is used to set\n   * `LFrame.bindingRootIndex` before `HostBindingFunction` is executed.\n   */\n  directiveEnd: number;\n\n  /**\n   * Stores the last directive which had a styling instruction.\n   *\n   * Initial value of this is `-1` which means that no `hostBindings` styling instruction has\n   * executed. As `hostBindings` instructions execute they set the value to the index of the\n   * `DirectiveDef` which contained the last `hostBindings` styling instruction.\n   *\n   * Valid values are:\n   * - `-1` No `hostBindings` instruction has executed.\n   * - `directiveStart <= directiveStylingLast < directiveEnd`: Points to the `DirectiveDef` of\n   * the last styling instruction which executed in the `hostBindings`.\n   *\n   * This data is needed so that styling instructions know which static styling data needs to be\n   * collected from the `DirectiveDef.hostAttrs`. A styling instruction needs to collect all data\n   * since last styling instruction.\n   */\n  directiveStylingLast: number;\n\n  /**\n   * Stores indexes of property bindings. This field is only set in the ngDevMode and holds\n   * indexes of property bindings so TestBed can get bound property metadata for a given node.\n   */\n  propertyBindings: number[]|null;\n\n  /**\n   * Stores if Node isComponent, isProjected, hasContentQuery, hasClassInput and hasStyleInput\n   * etc.\n   */\n  flags: TNodeFlags;\n\n  /**\n   * This number stores two values using its bits:\n   *\n   * - the index of the first provider on that node (first 16 bits)\n   * - the count of view providers from the component on this node (last 16 bits)\n   */\n  // TODO(misko): break this into actual vars.\n  providerIndexes: TNodeProviderIndexes;\n\n  /**\n   * The value name associated with this node.\n   * if type:\n   *   `TNodeType.Text`: text value\n   *   `TNodeType.Element`: tag name\n   *   `TNodeType.ICUContainer`: `TIcu`\n   */\n  value: any;\n\n  /**\n   * Attributes associated with an element. We need to store attributes to support various\n   * use-cases (attribute injection, content projection with selectors, directives matching).\n   * Attributes are stored statically because reading them from the DOM would be way too slow for\n   * content projection and queries.\n   *\n   * Since attrs will always be calculated first, they will never need to be marked undefined by\n   * other instructions.\n   *\n   * For regular attributes a name of an attribute and its value alternate in the array.\n   * e.g. ['role', 'checkbox']\n   * This array can contain flags that will indicate \"special attributes\" (attributes with\n   * namespaces, attributes extracted from bindings and outputs).\n   */\n  attrs: TAttributes|null;\n\n  /**\n   * Same as `TNode.attrs` but contains merged data across all directive host bindings.\n   *\n   * We need to keep `attrs` as unmerged so that it can be used for attribute selectors.\n   * We merge attrs here so that it can be used in a performant way for initial rendering.\n   *\n   * The `attrs` are merged in first pass in following order:\n   * - Component's `hostAttrs`\n   * - Directives' `hostAttrs`\n   * - Template `TNode.attrs` associated with the current `TNode`.\n   */\n  mergedAttrs: TAttributes|null;\n\n  /**\n   * A set of local names under which a given element is exported in a template and\n   * visible to queries. An entry in this array can be created for different reasons:\n   * - an element itself is referenced, ex.: `<div #foo>`\n   * - a component is referenced, ex.: `<my-cmpt #foo>`\n   * - a directive is referenced, ex.: `<my-cmpt #foo=\"directiveExportAs\">`.\n   *\n   * A given element might have different local names and those names can be associated\n   * with a directive. We store local names at even indexes while odd indexes are reserved\n   * for directive index in a view (or `-1` if there is no associated directive).\n   *\n   * Some examples:\n   * - `<div #foo>` => `[\"foo\", -1]`\n   * - `<my-cmpt #foo>` => `[\"foo\", myCmptIdx]`\n   * - `<my-cmpt #foo #bar=\"directiveExportAs\">` => `[\"foo\", myCmptIdx, \"bar\", directiveIdx]`\n   * - `<div #foo #bar=\"directiveExportAs\">` => `[\"foo\", -1, \"bar\", directiveIdx]`\n   */\n  localNames: (string|number)[]|null;\n\n  /** Information about input properties that need to be set once from attribute data. */\n  initialInputs: InitialInputData|null|undefined;\n\n  /**\n   * Input data for all directives on this node. `null` means that there are no directives with\n   * inputs on this node.\n   */\n  inputs: PropertyAliases|null;\n\n  /**\n   * Output data for all directives on this node. `null` means that there are no directives with\n   * outputs on this node.\n   */\n  outputs: PropertyAliases|null;\n\n  /**\n   * The TView or TViews attached to this node.\n   *\n   * If this TNode corresponds to an LContainer with inline views, the container will\n   * need to store separate static data for each of its view blocks (TView[]). Otherwise,\n   * nodes in inline views with the same index as nodes in their parent views will overwrite\n   * each other, as they are in the same template.\n   *\n   * Each index in this array corresponds to the static data for a certain\n   * view. So if you had V(0) and V(1) in a container, you might have:\n   *\n   * [\n   *   [{tagName: 'div', attrs: ...}, null],     // V(0) TView\n   *   [{tagName: 'button', attrs ...}, null]    // V(1) TView\n   *\n   * If this TNode corresponds to an LContainer with a template (e.g. structural\n   * directive), the template's TView will be stored here.\n   *\n   * If this TNode corresponds to an element, tViews will be null .\n   */\n  tViews: TView|TView[]|null;\n\n  /**\n   * The next sibling node. Necessary so we can propagate through the root nodes of a view\n   * to insert them or remove them from the DOM.\n   */\n  next: TNode|null;\n\n  /**\n   * The next projected sibling. Since in Angular content projection works on the node-by-node\n   * basis the act of projecting nodes might change nodes relationship at the insertion point\n   * (target view). At the same time we need to keep initial relationship between nodes as\n   * expressed in content view.\n   */\n  projectionNext: TNode|null;\n\n  /**\n   * First child of the current node.\n   *\n   * For component nodes, the child will always be a ContentChild (in same view).\n   * For embedded view nodes, the child will be in their child view.\n   */\n  child: TNode|null;\n\n  /**\n   * Parent node (in the same view only).\n   *\n   * We need a reference to a node's parent so we can append the node to its parent's native\n   * element at the appropriate time.\n   *\n   * If the parent would be in a different view (e.g. component host), this property will be null.\n   * It's important that we don't try to cross component boundaries when retrieving the parent\n   * because the parent will change (e.g. index, attrs) depending on where the component was\n   * used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through\n   * LView.node instead (which will be instance-specific).\n   *\n   * If this is an inline view node (V), the parent will be its container.\n   */\n  parent: TElementNode|TContainerNode|null;\n\n  /**\n   * List of projected TNodes for a given component host element OR index into the said nodes.\n   *\n   * For easier discussion assume this example:\n   * `<parent>`'s view definition:\n   * ```\n   * <child id=\"c1\">content1</child>\n   * <child id=\"c2\"><span>content2</span></child>\n   * ```\n   * `<child>`'s view definition:\n   * ```\n   * <ng-content id=\"cont1\"></ng-content>\n   * ```\n   *\n   * If `Array.isArray(projection)` then `TNode` is a host element:\n   * - `projection` stores the content nodes which are to be projected.\n   *    - The nodes represent categories defined by the selector: For example:\n   *      `<ng-content/><ng-content select=\"abc\"/>` would represent the heads for `<ng-content/>`\n   *      and `<ng-content select=\"abc\"/>` respectively.\n   *    - The nodes we store in `projection` are heads only, we used `.next` to get their\n   *      siblings.\n   *    - The nodes `.next` is sorted/rewritten as part of the projection setup.\n   *    - `projection` size is equal to the number of projections `<ng-content>`. The size of\n   *      `c1` will be `1` because `<child>` has only one `<ng-content>`.\n   * - we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)\n   *   because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and\n   * as a result have different set of nodes to project.\n   * - without `projection` it would be difficult to efficiently traverse nodes to be projected.\n   *\n   * If `typeof projection == 'number'` then `TNode` is a `<ng-content>` element:\n   * - `projection` is an index of the host's `projection`Nodes.\n   *   - This would return the first head node to project:\n   *     `getHost(currentTNode).projection[currentTNode.projection]`.\n   * - When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case\n   *   the process is recursive in nature.\n   *\n   * If `projection` is of type `RNode[][]` than we have a collection of native nodes passed as\n   * projectable nodes during dynamic component creation.\n   */\n  projection: (TNode|RNode[])[]|number|null;\n\n  /**\n   * A collection of all `style` static values for an element (including from host).\n   *\n   * This field will be populated if and when:\n   *\n   * - There are one or more initial `style`s on an element (e.g. `<div style=\"width:200px;\">`)\n   * - There are one or more initial `style`s on a directive/component host\n   *   (e.g. `@Directive({host: {style: \"width:200px;\" } }`)\n   */\n  styles: string|null;\n\n\n  /**\n   * A collection of all `style` static values for an element excluding host sources.\n   *\n   * Populated when there are one or more initial `style`s on an element\n   * (e.g. `<div style=\"width:200px;\">`)\n   * Must be stored separately from `tNode.styles` to facilitate setting directive\n   * inputs that shadow the `style` property. If we used `tNode.styles` as is for shadowed inputs,\n   * we would feed host styles back into directives as \"inputs\". If we used `tNode.attrs`, we\n   * would have to concatenate the attributes on every template pass. Instead, we process once on\n   * first create pass and store here.\n   */\n  stylesWithoutHost: string|null;\n\n  /**\n   * A `KeyValueArray` version of residual `styles`.\n   *\n   * When there are styling instructions than each instruction stores the static styling\n   * which is of lower priority than itself. This means that there may be a higher priority\n   * styling than the instruction.\n   *\n   * Imagine:\n   * ```\n   * <div style=\"color: highest;\" my-dir>\n   *\n   * @Directive({\n   *   host: {\n   *     style: 'color: lowest; ',\n   *     '[styles.color]': 'exp' // ɵɵstyleProp('color', ctx.exp);\n   *   }\n   * })\n   * ```\n   *\n   * In the above case:\n   * - `color: lowest` is stored with `ɵɵstyleProp('color', ctx.exp);` instruction\n   * -  `color: highest` is the residual and is stored here.\n   *\n   * - `undefined': not initialized.\n   * - `null`: initialized but `styles` is `null`\n   * - `KeyValueArray`: parsed version of `styles`.\n   */\n  residualStyles: KeyValueArray<any>|undefined|null;\n\n  /**\n   * A collection of all class static values for an element (including from host).\n   *\n   * This field will be populated if and when:\n   *\n   * - There are one or more initial classes on an element (e.g. `<div class=\"one two three\">`)\n   * - There are one or more initial classes on an directive/component host\n   *   (e.g. `@Directive({host: {class: \"SOME_CLASS\" } }`)\n   */\n  classes: string|null;\n\n  /**\n   * A collection of all class static values for an element excluding host sources.\n   *\n   * Populated when there are one or more initial classes on an element\n   * (e.g. `<div class=\"SOME_CLASS\">`)\n   * Must be stored separately from `tNode.classes` to facilitate setting directive\n   * inputs that shadow the `class` property. If we used `tNode.classes` as is for shadowed\n   * inputs, we would feed host classes back into directives as \"inputs\". If we used\n   * `tNode.attrs`, we would have to concatenate the attributes on every template pass. Instead,\n   * we process once on first create pass and store here.\n   */\n  classesWithoutHost: string|null;\n\n  /**\n   * A `KeyValueArray` version of residual `classes`.\n   *\n   * Same as `TNode.residualStyles` but for classes.\n   *\n   * - `undefined': not initialized.\n   * - `null`: initialized but `classes` is `null`\n   * - `KeyValueArray`: parsed version of `classes`.\n   */\n  residualClasses: KeyValueArray<any>|undefined|null;\n\n  /**\n   * Stores the head/tail index of the class bindings.\n   *\n   * - If no bindings, the head and tail will both be 0.\n   * - If there are template bindings, stores the head/tail of the class bindings in the template.\n   * - If no template bindings but there are host bindings, the head value will point to the last\n   *   host binding for \"class\" (not the head of the linked list), tail will be 0.\n   *\n   * See: `style_binding_list.ts` for details.\n   *\n   * This is used by `insertTStylingBinding` to know where the next styling binding should be\n   * inserted so that they can be sorted in priority order.\n   */\n  classBindings: TStylingRange;\n\n  /**\n   * Stores the head/tail index of the class bindings.\n   *\n   * - If no bindings, the head and tail will both be 0.\n   * - If there are template bindings, stores the head/tail of the style bindings in the template.\n   * - If no template bindings but there are host bindings, the head value will point to the last\n   *   host binding for \"style\" (not the head of the linked list), tail will be 0.\n   *\n   * See: `style_binding_list.ts` for details.\n   *\n   * This is used by `insertTStylingBinding` to know where the next styling binding should be\n   * inserted so that they can be sorted in priority order.\n   */\n  styleBindings: TStylingRange;\n}\n\n/**\n * See `TNode.insertBeforeIndex`\n */\nexport type InsertBeforeIndex = null|number|number[];\n\n/** Static data for an element  */\nexport interface TElementNode extends TNode {\n  /** Index in the data[] array */\n  index: number;\n  child: TElementNode|TTextNode|TElementContainerNode|TContainerNode|TProjectionNode|null;\n  /**\n   * Element nodes will have parents unless they are the first node of a component or\n   * embedded view (which means their parent is in a different view and must be\n   * retrieved using viewData[HOST_NODE]).\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n\n  /**\n   * If this is a component TNode with projection, this will be an array of projected\n   * TNodes or native nodes (see TNode.projection for more info). If it's a regular element node\n   * or a component without projection, it will be null.\n   */\n  projection: (TNode|RNode[])[]|null;\n\n  /**\n   * Stores TagName\n   */\n  value: string;\n}\n\n/** Static data for a text node */\nexport interface TTextNode extends TNode {\n  /** Index in the data[] array */\n  index: number;\n  child: null;\n  /**\n   * Text nodes will have parents unless they are the first node of a component or\n   * embedded view (which means their parent is in a different view and must be\n   * retrieved using LView.node).\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n  projection: null;\n}\n\n/** Static data for an LContainer */\nexport interface TContainerNode extends TNode {\n  /**\n   * Index in the data[] array.\n   *\n   * If it's -1, this is a dynamically created container node that isn't stored in\n   * data[] (e.g. when you inject ViewContainerRef) .\n   */\n  index: number;\n  child: null;\n\n  /**\n   * Container nodes will have parents unless:\n   *\n   * - They are the first node of a component or embedded view\n   * - They are dynamically created\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: TView|TView[]|null;\n  projection: null;\n  value: null;\n}\n\n/** Static data for an <ng-container> */\nexport interface TElementContainerNode extends TNode {\n  /** Index in the LView[] array. */\n  index: number;\n  child: TElementNode|TTextNode|TContainerNode|TElementContainerNode|TProjectionNode|null;\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n  projection: null;\n}\n\n/** Static data for an ICU expression */\nexport interface TIcuContainerNode extends TNode {\n  /** Index in the LView[] array. */\n  index: number;\n  child: null;\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n  projection: null;\n  value: TIcu;\n}\n\n/** Static data for an LProjectionNode  */\nexport interface TProjectionNode extends TNode {\n  /** Index in the data[] array */\n  child: null;\n  /**\n   * Projection nodes will have parents unless they are the first node of a component\n   * or embedded view (which means their parent is in a different view and must be\n   * retrieved using LView.node).\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n\n  /** Index of the projection node. (See TNode.projection for more info.) */\n  projection: number;\n  value: null;\n}\n\n/**\n * A union type representing all TNode types that can host a directive.\n */\nexport type TDirectiveHostNode = TElementNode|TContainerNode|TElementContainerNode;\n\n/**\n * This mapping is necessary so we can set input properties and output listeners\n * properly at runtime when property names are minified or aliased.\n *\n * Key: unminified / public input or output name\n * Value: array containing minified / internal name and related directive index\n *\n * The value must be an array to support inputs and outputs with the same name\n * on the same node.\n */\nexport type PropertyAliases = {\n  // This uses an object map because using the Map type would be too slow\n  [key: string]: PropertyAliasValue\n};\n\n/**\n * Store the runtime input or output names for all the directives.\n *\n * i+0: directive instance index\n * i+1: privateName\n *\n * e.g. [0, 'change-minified']\n */\nexport type PropertyAliasValue = (number|string)[];\n\n/**\n * This array contains information about input properties that\n * need to be set once from attribute data. It's ordered by\n * directive index (relative to element) so it's simple to\n * look up a specific directive's initial input data.\n *\n * Within each sub-array:\n *\n * i+0: attribute name\n * i+1: minified/internal input name\n * i+2: initial value\n *\n * If a directive on a node does not have any input properties\n * that should be set from attributes, its index is set to null\n * to avoid a sparse array.\n *\n * e.g. [null, ['role-min', 'minified-input', 'button']]\n */\nexport type InitialInputData = (InitialInputs|null)[];\n\n/**\n * Used by InitialInputData to store input properties\n * that should be set once from attributes.\n *\n * i+0: attribute name\n * i+1: minified/internal input name\n * i+2: initial value\n *\n * e.g. ['role-min', 'minified-input', 'button']\n */\nexport type InitialInputs = string[];\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n\n/**\n * Type representing a set of TNodes that can have local refs (`#foo`) placed on them.\n */\nexport type TNodeWithLocalRefs = TContainerNode|TElementNode|TElementContainerNode;\n\n/**\n * Type for a function that extracts a value for a local refs.\n * Example:\n * - `<div #nativeDivEl>` - `nativeDivEl` should point to the native `<div>` element;\n * - `<ng-template #tplRef>` - `tplRef` should point to the `TemplateRef` instance;\n */\nexport type LocalRefExtractor = (tNode: TNodeWithLocalRefs, currentView: LView) => any;\n\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nexport function hasClassInput(tNode: TNode) {\n  return (tNode.flags & TNodeFlags.hasClassInput) !== 0;\n}\n\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nexport function hasStyleInput(tNode: TNode) {\n  return (tNode.flags & TNodeFlags.hasStyleInput) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertEqual, assertIndexInRange} from '../../util/assert';\nimport {assertHasParent} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {registerPostOrderHooks} from '../hooks';\nimport {TAttributes, TElementContainerNode, TNodeType} from '../interfaces/node';\nimport {isContentQueryHost, isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, LView, RENDERER, T_HOST, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {appendChild} from '../node_manipulation';\nimport {getBindingIndex, getCurrentTNode, getLView, getTView, isCurrentTNodeParent, setCurrentTNode, setCurrentTNodeAsNotParent} from '../state';\nimport {computeStaticStyling} from '../styling/static_styling';\nimport {getConstant} from '../util/view_utils';\n\nimport {createDirectivesInstances, executeContentQueries, getOrCreateTNode, resolveDirectives, saveResolvedLocalsInData} from './shared';\n\nfunction elementContainerStartFirstCreatePass(\n    index: number, tView: TView, lView: LView, attrsIndex?: number|null,\n    localRefsIndex?: number): TElementContainerNode {\n  ngDevMode && ngDevMode.firstCreatePass++;\n\n  const tViewConsts = tView.consts;\n  const attrs = getConstant<TAttributes>(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, TNodeType.ElementContainer, 'ng-container', attrs);\n\n  // While ng-container doesn't necessarily support styling, we use the style context to identify\n  // and execute directives on the ng-container.\n  if (attrs !== null) {\n    computeStaticStyling(tNode, attrs, true);\n  }\n\n  const localRefs = getConstant<string[]>(tViewConsts, localRefsIndex);\n  resolveDirectives(tView, lView, tNode, localRefs);\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nexport function ɵɵelementContainerStart(\n    index: number, attrsIndex?: number|null, localRefsIndex?: number): void {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  ngDevMode &&\n      assertEqual(\n          getBindingIndex(), tView.bindingStartIndex,\n          'element containers should be created before any bindings');\n\n  const tNode = tView.firstCreatePass ?\n      elementContainerStartFirstCreatePass(\n          adjustedIndex, tView, lView, attrsIndex, localRefsIndex) :\n      tView.data[adjustedIndex] as TElementContainerNode;\n  setCurrentTNode(tNode, true);\n\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  const native = lView[adjustedIndex] =\n      lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');\n  appendChild(tView, lView, native, tNode);\n  attachPatchData(native, lView);\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n}\n\n/**\n * Mark the end of the <ng-container>.\n *\n * @codeGenApi\n */\nexport function ɵɵelementContainerEnd(): void {\n  let currentTNode = getCurrentTNode()!;\n  const tView = getTView();\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(currentTNode);\n    currentTNode = currentTNode.parent!;\n    setCurrentTNode(currentTNode, false);\n  }\n\n  ngDevMode && assertTNodeType(currentTNode, TNodeType.ElementContainer);\n\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries!.elementEnd(currentTNode);\n    }\n  }\n}\n\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n *\n * @codeGenApi\n */\nexport function ɵɵelementContainer(\n    index: number, attrsIndex?: number|null, localRefsIndex?: number): void {\n  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵelementContainerEnd();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {OpaqueViewState} from '../interfaces/view';\nimport {getLView} from '../state';\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nexport function ɵɵgetCurrentView(): OpaqueViewState {\n  return getLView() as any as OpaqueViewState;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscribable} from 'rxjs';\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport function isPromise<T = any>(obj: any): obj is Promise<T> {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n\n/**\n * Determine if the argument is a Subscribable\n */\nexport function isSubscribable(obj: any|Subscribable<any>): obj is Subscribable<any> {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * Determine if the argument is an Observable\n *\n * Strictly this tests that the `obj` is `Subscribable`, since `Observable`\n * types need additional methods, such as `lift()`. But it is adequate for our\n * needs since within the Angular framework code we only ever need to use the\n * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects\n * into `Observable` as needed.\n */\nexport const isObservable =\n    isSubscribable as ((obj: any|Observable<any>) => obj is Observable<any>);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {assertIndexInRange} from '../../util/assert';\nimport {isObservable} from '../../util/lang';\nimport {PropertyAliasValue, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {GlobalTargetResolver, isProceduralRenderer, Renderer3} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {isDirectiveHost} from '../interfaces/type_checks';\nimport {CLEANUP, CONTEXT, FLAGS, LView, LViewFlags, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {profiler, ProfilerEvent} from '../profiler';\nimport {getCurrentDirectiveDef, getCurrentTNode, getLView, getTView} from '../state';\nimport {getComponentLViewByIndex, getNativeByTNode, unwrapRNode} from '../util/view_utils';\n\nimport {getOrCreateLViewCleanup, getOrCreateTViewCleanup, handleError, loadComponentRenderer, markViewDirty} from './shared';\n\n\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵlistener(\n    eventName: string, listenerFn: (e?: any) => any, useCapture?: boolean,\n    eventTargetResolver?: GlobalTargetResolver): typeof ɵɵlistener {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode()!;\n  listenerInternal(\n      tView, lView, lView[RENDERER], tNode, eventName, listenerFn, !!useCapture,\n      eventTargetResolver);\n  return ɵɵlistener;\n}\n\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵsyntheticHostListener(\n    eventName: string, listenerFn: (e?: any) => any): typeof ɵɵsyntheticHostListener {\n  const tNode = getCurrentTNode()!;\n  const lView = getLView();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, false);\n  return ɵɵsyntheticHostListener;\n}\n\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(\n    tView: TView, lView: LView, eventName: string, tNodeIdx: number): ((e?: any) => any)|null {\n  const tCleanup = tView.cleanup;\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP]!;\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      }\n      // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n  return null;\n}\n\nfunction listenerInternal(\n    tView: TView, lView: LView, renderer: Renderer3, tNode: TNode, eventName: string,\n    listenerFn: (e?: any) => any, useCapture: boolean,\n    eventTargetResolver?: GlobalTargetResolver): void {\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  const firstCreatePass = tView.firstCreatePass;\n  const tCleanup: false|any[] = firstCreatePass && getOrCreateTViewCleanup(tView);\n  const context = lView[CONTEXT];\n\n  // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n  // native listener or a directive output on this element. As such we we know that we will have to\n  // register a listener and store its cleanup function on LView.\n  const lCleanup = getOrCreateLViewCleanup(lView);\n\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n\n  let processOutputs = true;\n\n  // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n  if ((tNode.type & TNodeType.AnyRNode) || eventTargetResolver) {\n    const native = getNativeByTNode(tNode, lView) as RElement;\n    const target = eventTargetResolver ? eventTargetResolver(native) : native;\n    const lCleanupIndex = lCleanup.length;\n    const idxOrTargetGetter = eventTargetResolver ?\n        (_lView: LView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) :\n        tNode.index;\n\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    if (isProceduralRenderer(renderer)) {\n      // There might be cases where multiple directives on the same element try to register an event\n      // handler function for the same event. In this situation we want to avoid registration of\n      // several native listeners as each registration would be intercepted by NgZone and\n      // trigger change detection. This would mean that a single user action would result in several\n      // change detections being invoked. To avoid this situation we want to have only one call to\n      // native handler registration (for the same element and same type of event).\n      //\n      // In order to have just one native event handler in presence of multiple handler functions,\n      // we just register a first handler function as a native event listener and then chain\n      // (coalesce) other handler functions on top of the first native handler function.\n      let existingListener = null;\n      // Please note that the coalescing described here doesn't happen for events specifying an\n      // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n      // view engine.\n      // Also, we don't have to search for existing listeners is there are no directives\n      // matching on a given node as we can't register multiple event handlers for the same event in\n      // a template (this would mean having duplicate attributes).\n      if (!eventTargetResolver && isTNodeDirectiveHost) {\n        existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n      }\n      if (existingListener !== null) {\n        // Attach a new listener to coalesced listeners list, maintaining the order in which\n        // listeners are registered. For performance reasons, we keep a reference to the last\n        // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n        // the entire set each time we need to add a new listener.\n        const lastListenerFn = (<any>existingListener).__ngLastListenerFn__ || existingListener;\n        lastListenerFn.__ngNextListenerFn__ = listenerFn;\n        (<any>existingListener).__ngLastListenerFn__ = listenerFn;\n        processOutputs = false;\n      } else {\n        listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n        const cleanupFn = renderer.listen(target as RElement, eventName, listenerFn);\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n\n        lCleanup.push(listenerFn, cleanupFn);\n        tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n      }\n\n    } else {\n      listenerFn = wrapListener(tNode, lView, context, listenerFn, true /** preventDefault */);\n      target.addEventListener(eventName, listenerFn, useCapture);\n      ngDevMode && ngDevMode.rendererAddEventListener++;\n\n      lCleanup.push(listenerFn);\n      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);\n    }\n  } else {\n    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n    // ancestors are marked dirty when an event occurs.\n    listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n  }\n\n  // subscribe to directive outputs\n  const outputs = tNode.outputs;\n  let props: PropertyAliasValue|undefined;\n  if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n    const propsLength = props.length;\n    if (propsLength) {\n      for (let i = 0; i < propsLength; i += 2) {\n        const index = props[i] as number;\n        ngDevMode && assertIndexInRange(lView, index);\n        const minifiedName = props[i + 1];\n        const directiveInstance = lView[index];\n        const output = directiveInstance[minifiedName];\n\n        if (ngDevMode && !isObservable(output)) {\n          throw new Error(`@Output ${minifiedName} not initialized in '${\n              directiveInstance.constructor.name}'.`);\n        }\n\n        const subscription = output.subscribe(listenerFn);\n        const idx = lCleanup.length;\n        lCleanup.push(listenerFn, subscription);\n        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n      }\n    }\n  }\n}\n\nfunction executeListenerWithErrorHandling(\n    lView: LView, context: {}|null, listenerFn: (e?: any) => any, e: any): boolean {\n  try {\n    profiler(ProfilerEvent.OutputStart, context, listenerFn);\n    // Only explicitly returning false from a listener should preventDefault\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleError(lView, error);\n    return false;\n  } finally {\n    profiler(ProfilerEvent.OutputEnd, context, listenerFn);\n  }\n}\n\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(\n    tNode: TNode, lView: LView, context: {}|null, listenerFn: (e?: any) => any,\n    wrapWithPreventDefault: boolean): EventListener {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(e: any) {\n    // Ivy uses `Function` as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n    if (e === Function) {\n      return listenerFn;\n    }\n\n    // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n    const startView = tNode.flags & TNodeFlags.isComponentHost ?\n        getComponentLViewByIndex(tNode.index, lView) :\n        lView;\n\n    // See interfaces/view.ts for more on LViewFlags.ManualOnPush\n    if ((lView[FLAGS] & LViewFlags.ManualOnPush) === 0) {\n      markViewDirty(startView);\n    }\n\n    let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);\n    // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n    let nextListenerFn = (<any>wrapListenerIn_markDirtyAndPreventDefault).__ngNextListenerFn__;\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n      nextListenerFn = (<any>nextListenerFn).__ngNextListenerFn__;\n    }\n\n    if (wrapWithPreventDefault && result === false) {\n      e.preventDefault();\n      // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n      e.returnValue = false;\n    }\n\n    return result;\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {nextContextImpl} from '../state';\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nexport function ɵɵnextContext<T = any>(level: number = 1): T {\n  return nextContextImpl(level);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {newArray} from '../../util/array_utils';\nimport {TAttributes, TElementNode, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {ProjectionSlots} from '../interfaces/projection';\nimport {DECLARATION_COMPONENT_VIEW, HEADER_OFFSET, T_HOST} from '../interfaces/view';\nimport {applyProjection} from '../node_manipulation';\nimport {getProjectAsAttrValue, isNodeMatchingSelectorList, isSelectorInSelectorList} from '../node_selector_matcher';\nimport {getLView, getTView, setCurrentTNodeAsNotParent} from '../state';\nimport {getOrCreateTNode} from './shared';\n\n\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nexport function matchingProjectionSlotIndex(tNode: TNode, projectionSlots: ProjectionSlots): number|\n    null {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i];\n    // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    }\n    // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n    if (ngProjectAsAttrVal === null ?\n            isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n            isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n      return i;  // first matching selector \"captures\" a given node\n    }\n  }\n  return wildcardNgContentIndex;\n}\n\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nexport function ɵɵprojectionDef(projectionSlots?: ProjectionSlots): void {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST] as TElementNode;\n\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads: (TNode|null)[] = componentNode.projection =\n        newArray(numProjectionSlots, null! as TNode);\n    const tails: (TNode|null)[] = projectionHeads.slice();\n\n    let componentChild: TNode|null = componentNode.child;\n\n    while (componentChild !== null) {\n      const slotIndex =\n          projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n\n      if (slotIndex !== null) {\n        if (tails[slotIndex]) {\n          tails[slotIndex]!.projectionNext = componentChild;\n        } else {\n          projectionHeads[slotIndex] = componentChild;\n        }\n        tails[slotIndex] = componentChild;\n      }\n\n      componentChild = componentChild.next;\n    }\n  }\n}\n\n\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nexport function ɵɵprojection(\n    nodeIndex: number, selectorIndex: number = 0, attrs?: TAttributes): void {\n  const lView = getLView();\n  const tView = getTView();\n  const tProjectionNode =\n      getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, TNodeType.Projection, null, attrs || null);\n\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex;\n\n  // `<ng-content>` has no content\n  setCurrentTNodeAsNotParent();\n\n  if ((tProjectionNode.flags & TNodeFlags.isDetached) !== TNodeFlags.isDetached) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {getBindingIndex, getLView, getSelectedTNode, getTView} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {elementPropertyInternal, storePropertyBindingMetadata} from './shared';\n\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate(\n    propName: string, v0: any, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n\n\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate1(\n    propName: string, prefix: string, v0: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵpropertyInterpolate1;\n}\n\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate2(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵpropertyInterpolate2;\n}\n\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate3(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵpropertyInterpolate3;\n}\n\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate4(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵpropertyInterpolate4;\n}\n\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate5(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵpropertyInterpolate5;\n}\n\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate6(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵpropertyInterpolate6;\n}\n\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate7(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate7;\n}\n\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate8(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate8;\n}\n\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings inbetween those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolateV(\n    propName: string, values: any[], sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolateV {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]];  // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(\n          tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1,\n          ...interpolationInBetween);\n    }\n  }\n  return ɵɵpropertyInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueArray, keyValueArrayIndexOf} from '../../util/array_utils';\nimport {assertEqual, assertIndexInRange, assertNotEqual} from '../../util/assert';\nimport {assertFirstUpdatePass} from '../assert';\nimport {TNode} from '../interfaces/node';\nimport {getTStylingRangeNext, getTStylingRangePrev, setTStylingRangeNext, setTStylingRangeNextDuplicate, setTStylingRangePrev, setTStylingRangePrevDuplicate, toTStylingRange, TStylingKey, TStylingKeyPrimitive, TStylingRange} from '../interfaces/styling';\nimport {TData} from '../interfaces/view';\nimport {getTView} from '../state';\n\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__: undefined;\n\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nexport function insertTStylingBinding(\n    tData: TData, tNode: TNode, tStylingKeyWithStatic: TStylingKey, index: number,\n    isHostBinding: boolean, isClassBinding: boolean): void {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey: TStylingKeyPrimitive;\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic as KeyValueArray<any>;\n    tStylingKey = staticKeyValueArray[1];  // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n    if (tStylingKey === null ||\n        keyValueArrayIndexOf(staticKeyValueArray, tStylingKey as string) > 0) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n  if (isHostBinding) {\n    // We are inserting host bindings\n\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0;\n    // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1] as TStylingRange);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] =\n            setTStylingRangeNext(tData[previousNode + 1] as TStylingRange, index);\n      }\n      // The \"previous\" of the template binding head should point to this host binding\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1] as TStylingRange, index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1] as TStylingRange, index);\n      }\n      // if we don't have template, the head points to template-tail, and needs to be advanced.\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode &&\n        assertEqual(\n            tmplHead !== 0 && tmplTail === 0, false,\n            'Adding template bindings after hostBindings is not allowed.');\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1] as TStylingRange, index);\n    }\n    tmplTail = index;\n  }\n\n  // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1] as TStylingRange);\n  }\n  markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n  markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(\n    tNode: TNode, tStylingKey: TStylingKey, tData: TData, index: number, isClassBinding: boolean) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n  if (residual != null /* or undefined */ && typeof tStylingKey == 'string' &&\n      keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1] as TStylingRange);\n  }\n}\n\n\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(\n    tData: TData, tStylingKey: TStylingKeyPrimitive, index: number, isPrevDir: boolean,\n    isClassBinding: boolean) {\n  const tStylingAtIndex = tData[index + 1] as TStylingRange;\n  const isMap = tStylingKey === null;\n  let cursor =\n      isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false;\n  // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor] as TStylingKey;\n    const tStyleRangeAtCursor = tData[cursor + 1] as TStylingRange;\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) :\n                                      setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) :\n                         getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) :\n                                   setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor: TStylingKey, tStylingKey: TStylingKeyPrimitive) {\n  ngDevMode &&\n      assertNotEqual(\n          Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n  if (\n      tStylingKeyCursor === null ||  // If the cursor is `null` it means that we have map at that\n                                     // location so we must assume that we have a match.\n      tStylingKey == null ||  // If `tStylingKey` is `null` then it is a map therefor assume that it\n                              // contains a match.\n      (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) ===\n          tStylingKey  // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >=\n        0;  // see if we are matching the key\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, throwError} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\n\n/**\n * Stores the locations of key/value indexes while parsing styling.\n *\n * In case of `cssText` parsing the indexes are like so:\n * ```\n *   \"key1: value1; key2: value2; key3: value3\"\n *                  ^   ^ ^     ^             ^\n *                  |   | |     |             +-- textEnd\n *                  |   | |     +---------------- valueEnd\n *                  |   | +---------------------- value\n *                  |   +------------------------ keyEnd\n *                  +---------------------------- key\n * ```\n *\n * In case of `className` parsing the indexes are like so:\n * ```\n *   \"key1 key2 key3\"\n *         ^   ^    ^\n *         |   |    +-- textEnd\n *         |   +------------------------ keyEnd\n *         +---------------------------- key\n * ```\n * NOTE: `value` and `valueEnd` are used only for styles, not classes.\n */\ninterface ParserState {\n  textEnd: number;\n  key: number;\n  keyEnd: number;\n  value: number;\n  valueEnd: number;\n}\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState: ParserState = {\n  textEnd: 0,\n  key: 0,\n  keyEnd: 0,\n  value: 0,\n  valueEnd: 0,\n};\n\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nexport function getLastParsedKey(text: string): string {\n  return text.substring(parserState.key, parserState.keyEnd);\n}\n\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nexport function getLastParsedValue(text: string): string {\n  return text.substring(parserState.value, parserState.valueEnd);\n}\n\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nexport function parseClassName(text: string): number {\n  resetParserState(text);\n  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nexport function parseClassNameNext(text: string, index: number): number {\n  const end = parserState.textEnd;\n  if (end === index) {\n    return -1;\n  }\n  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n  return consumeWhitespace(text, index, end);\n}\n\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nexport function parseStyle(text: string): number {\n  resetParserState(text);\n  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nexport function parseStyleNext(text: string, startIndex: number): number {\n  const end = parserState.textEnd;\n  let index = parserState.key = consumeWhitespace(text, startIndex, end);\n  if (end === index) {\n    // we reached an end so just quit\n    return -1;\n  }\n  index = parserState.keyEnd = consumeStyleKey(text, index, end);\n  index = consumeSeparator(text, index, end, CharCode.COLON);\n  index = parserState.value = consumeWhitespace(text, index, end);\n  index = parserState.valueEnd = consumeStyleValue(text, index, end);\n  return consumeSeparator(text, index, end, CharCode.SEMI_COLON);\n}\n\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nexport function resetParserState(text: string): void {\n  parserState.key = 0;\n  parserState.keyEnd = 0;\n  parserState.value = 0;\n  parserState.valueEnd = 0;\n  parserState.textEnd = text.length;\n}\n\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nexport function consumeWhitespace(text: string, startIndex: number, endIndex: number): number {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) <= CharCode.SPACE) {\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nexport function consumeClassToken(text: string, startIndex: number, endIndex: number): number {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) > CharCode.SPACE) {\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nexport function consumeStyleKey(text: string, startIndex: number, endIndex: number): number {\n  let ch: number;\n  while (startIndex < endIndex &&\n         ((ch = text.charCodeAt(startIndex)) === CharCode.DASH || ch === CharCode.UNDERSCORE ||\n          ((ch & CharCode.UPPER_CASE) >= CharCode.A && (ch & CharCode.UPPER_CASE) <= CharCode.Z) ||\n          (ch >= CharCode.ZERO && ch <= CharCode.NINE))) {\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nexport function consumeSeparator(\n    text: string, startIndex: number, endIndex: number, separator: number): number {\n  startIndex = consumeWhitespace(text, startIndex, endIndex);\n  if (startIndex < endIndex) {\n    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n      malformedStyleError(text, String.fromCharCode(separator), startIndex);\n    }\n    startIndex++;\n  }\n  return startIndex;\n}\n\n\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nexport function consumeStyleValue(text: string, startIndex: number, endIndex: number): number {\n  let ch1 = -1;  // 1st previous character\n  let ch2 = -1;  // 2nd previous character\n  let ch3 = -1;  // 3rd previous character\n  let i = startIndex;\n  let lastChIndex = i;\n  while (i < endIndex) {\n    const ch: number = text.charCodeAt(i++);\n    if (ch === CharCode.SEMI_COLON) {\n      return lastChIndex;\n    } else if (ch === CharCode.DOUBLE_QUOTE || ch === CharCode.SINGLE_QUOTE) {\n      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n    } else if (\n        startIndex ===\n            i - 4 &&  // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n        ch3 === CharCode.U &&\n        ch2 === CharCode.R && ch1 === CharCode.L && ch === CharCode.OPEN_PAREN) {\n      lastChIndex = i = consumeQuotedText(text, CharCode.CLOSE_PAREN, i, endIndex);\n    } else if (ch > CharCode.SPACE) {\n      // if we have a non-whitespace character then capture its location\n      lastChIndex = i;\n    }\n    ch3 = ch2;\n    ch2 = ch1;\n    ch1 = ch & CharCode.UPPER_CASE;\n  }\n  return lastChIndex;\n}\n\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nexport function consumeQuotedText(\n    text: string, quoteCharCode: number, startIndex: number, endIndex: number): number {\n  let ch1 = -1;  // 1st previous character\n  let index = startIndex;\n  while (index < endIndex) {\n    const ch = text.charCodeAt(index++);\n    if (ch == quoteCharCode && ch1 !== CharCode.BACK_SLASH) {\n      return index;\n    }\n    if (ch == CharCode.BACK_SLASH && ch1 === CharCode.BACK_SLASH) {\n      // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n      // quotation. (It should not assume that the last `\"` is escaped.)\n      ch1 = 0;\n    } else {\n      ch1 = ch;\n    }\n  }\n  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) :\n                    new Error();\n}\n\nfunction malformedStyleError(text: string, expecting: string, index: number): never {\n  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n  throw throwError(\n      `Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' +\n      text.substring(index, index + 1) + '<<]' + text.substr(index + 1) +\n      `'. Expecting '${expecting}'.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SafeValue, unwrapSafeValue} from '../../sanitization/bypass';\nimport {KeyValueArray, keyValueArrayGet, keyValueArraySet} from '../../util/array_utils';\nimport {assertDefined, assertEqual, assertLessThan, assertNotEqual, throwError} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {concatStringsWithSpace, stringify} from '../../util/stringify';\nimport {assertFirstUpdatePass} from '../assert';\nimport {bindingUpdated} from '../bindings';\nimport {DirectiveDef} from '../interfaces/definition';\nimport {AttributeMarker, TAttributes, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {Renderer3} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {getTStylingRangeNext, getTStylingRangeNextDuplicate, getTStylingRangePrev, getTStylingRangePrevDuplicate, TStylingKey, TStylingRange} from '../interfaces/styling';\nimport {LView, RENDERER, TData, TView} from '../interfaces/view';\nimport {applyStyling} from '../node_manipulation';\nimport {getCurrentDirectiveDef, getLView, getSelectedIndex, getTView, incrementBindingIndex} from '../state';\nimport {insertTStylingBinding} from '../styling/style_binding_list';\nimport {getLastParsedKey, getLastParsedValue, parseClassName, parseClassNameNext, parseStyle, parseStyleNext} from '../styling/styling_parser';\nimport {NO_CHANGE} from '../tokens';\nimport {getNativeByIndex} from '../util/view_utils';\nimport {setDirectiveInputsWhichShadowsStyling} from './property';\n\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nexport function ɵɵstyleProp(\n    prop: string, value: string|number|SafeValue|undefined|null,\n    suffix?: string|null): typeof ɵɵstyleProp {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nexport function ɵɵclassProp(className: string, value: boolean|undefined|null): typeof ɵɵclassProp {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n\n\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nexport function ɵɵstyleMap(styles: {[styleName: string]: any}|string|undefined|null): void {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n\n\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nexport function styleStringParser(keyValueArray: KeyValueArray<any>, text: string): void {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n\n\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nexport function ɵɵclassMap(classes: {[className: string]: boolean|undefined|null}|string|undefined|\n                           null): void {\n  checkStylingMap(keyValueArraySet, classStringParser, classes, true);\n}\n\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nexport function classStringParser(keyValueArray: KeyValueArray<any>, text: string): void {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nexport function checkStylingProperty(\n    prop: string, value: any|NO_CHANGE, suffix: string|undefined|null,\n    isClassBased: boolean): void {\n  const lView = getLView();\n  const tView = getTView();\n  // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()] as TNode;\n    updateStyling(\n        tView, tNode, lView, lView[RENDERER], prop,\n        lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n  }\n}\n\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nexport function checkStylingMap(\n    keyValueArraySet: (keyValueArray: KeyValueArray<any>, key: string, value: any) => void,\n    stringParser: (styleKeyValueArray: KeyValueArray<any>, text: string) => void,\n    value: any|NO_CHANGE, isClassBased: boolean): void {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n  const lView = getLView();\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()] as TNode;\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(\n            Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false,\n            'Styling linked list shadow input should be marked as \\'false\\'');\n      }\n      // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode && isClassBased === false && staticPrefix !== null &&\n          assertEqual(\n              staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      }\n      // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(\n          tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1],\n          lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value),\n          isClassBased, bindingIndex);\n    }\n  }\n}\n\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView: TView, bindingIndex: number): boolean {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(\n    tView: TView, tStylingKey: TStylingKey, bindingIndex: number, isClassBased: boolean): void {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()] as TNode;\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nexport function wrapInStaticStylingKey(\n    tData: TData, tNode: TNode, stylingKey: TStylingKey, isClassBased: boolean): TStylingKey {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate =\n        (isClassBased ? tNode.classBindings : tNode.styleBindings) as any as number === 0;\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n      // We know that if we have styling binding in template we can't have residual.\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding =\n        directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey =\n          collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(\n              null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */,\n              isClassBased);\n          templateStylingKey =\n              collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n  if (residual !== undefined) {\n    isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);\n  }\n  return stylingKey;\n}\n\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData: TData, tNode: TNode, isClassBased: boolean): TStylingKey|\n    undefined {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n  return tData[getTStylingRangePrev(bindings)] as TStylingKey;\n}\n\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(\n    tData: TData, tNode: TNode, isClassBased: boolean, tStylingKey: TStylingKey): void {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode &&\n      assertNotEqual(\n          getTStylingRangeNext(bindings), 0,\n          'Expecting to have at least one template styling binding.');\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData: TData, tNode: TNode, isClassBased: boolean): KeyValueArray<any>|\n    null {\n  let residual: KeyValueArray<any>|null|undefined = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode &&\n      assertNotEqual(\n          tNode.directiveStylingLast, -1,\n          'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n  // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = (tData[i] as DirectiveDef<any>).hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased) as KeyValueArray<any>| null;\n  }\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased) as KeyValueArray<any>| null;\n}\n\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(\n    hostDirectiveDef: DirectiveDef<any>|null, tData: TData, tNode: TNode, stylingKey: TStylingKey,\n    isClassBased: boolean): TStylingKey {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective: DirectiveDef<any>|null = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast] as DirectiveDef<any>;\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n  return stylingKey;\n}\n\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(\n    stylingKey: TStylingKey|undefined, attrs: TAttributes|null,\n    isClassBased: boolean): TStylingKey {\n  const desiredMarker = isClassBased ? AttributeMarker.Classes : AttributeMarker.Styles;\n  let currentMarker = AttributeMarker.ImplicitAttributes;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i] as number | string;\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : ['', stylingKey] as any;\n          }\n          keyValueArraySet(\n              stylingKey as KeyValueArray<any>, item, isClassBased ? true : attrs[++i]);\n        }\n      }\n    }\n  }\n  return stylingKey === undefined ? null : stylingKey;\n}\n\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nexport function toStylingKeyValueArray(\n    keyValueArraySet: (keyValueArray: KeyValueArray<any>, key: string, value: any) => void,\n    stringParser: (styleKeyValueArray: KeyValueArray<any>, text: string) => void,\n    value: string|string[]|{[key: string]: any}|SafeValue|null|undefined): KeyValueArray<any> {\n  if (value == null /*|| value === undefined */ || value === '') return EMPTY_ARRAY as any;\n  const styleKeyValueArray: KeyValueArray<any> = [] as any;\n  const unwrappedValue = unwrapSafeValue(value) as string | string[] | {[key: string]: any};\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode &&\n        throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n  }\n  return styleKeyValueArray;\n}\n\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nexport function styleKeyValueArraySet(keyValueArray: KeyValueArray<any>, key: string, value: any) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(\n    tView: TView, tNode: TNode, lView: LView, renderer: Renderer3,\n    oldKeyValueArray: KeyValueArray<any>, newKeyValueArray: KeyValueArray<any>,\n    isClassBased: boolean, bindingIndex: number) {\n  if (oldKeyValueArray as KeyValueArray<any>| NO_CHANGE === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY as any;\n  }\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey: string|null = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey: string|null = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue =\n        oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue =\n        newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey: string|null = null;\n    let setValue: any = undefined;\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || oldKey !== null && oldKey < newKey!) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(\n    tView: TView, tNode: TNode, lView: LView, renderer: Renderer3, prop: string,\n    value: string|undefined|null|boolean, isClassBased: boolean, bindingIndex: number) {\n  if (!(tNode.type & TNodeType.AnyRNode)) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1] as TStylingRange;\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ?\n      findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) :\n      undefined;\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n    const rNode = getNativeByIndex(getSelectedIndex(), lView) as RElement;\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(\n    tData: TData, tNode: TNode|null, lView: LView, prop: string, index: number,\n    isClassBased: boolean): any {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value: any = undefined;\n  while (index > 0) {\n    const rawKey = tData[index] as TStylingKey;\n    const containsStatics = Array.isArray(rawKey);\n    // Unwrap the key if we contain static values.\n    const key = containsStatics ? (rawKey as string[])[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) :\n                                      key === prop ? valueAtLViewIndex : undefined;\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey as KeyValueArray<any>, prop);\n    }\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n    const tRange = tData[index + 1] as TStylingRange;\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /** OR residual !=== undefined */) {\n      value = keyValueArrayGet(residual!, prop);\n    }\n  }\n  return value;\n}\n\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value: any): boolean {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value: any, suffix: string|undefined|null): string|null|undefined|boolean {\n  if (value == null /** || value === undefined */) {\n    // do nothing\n  } else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n  return value;\n}\n\n\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nexport function hasStylingInputShadow(tNode: TNode, isClassBased: boolean) {\n  return (tNode.flags & (isClassBased ? TNodeFlags.hasClassInput : TNodeFlags.hasStyleInput)) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertEqual, assertIndexInRange} from '../../util/assert';\nimport {TElementNode, TNodeType} from '../interfaces/node';\nimport {HEADER_OFFSET, RENDERER, T_HOST} from '../interfaces/view';\nimport {appendChild, createTextNode} from '../node_manipulation';\nimport {getBindingIndex, getLView, getTView, setCurrentTNode} from '../state';\n\nimport {getOrCreateTNode} from './shared';\n\n\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nexport function ɵɵtext(index: number, value: string = ''): void {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  ngDevMode &&\n      assertEqual(\n          getBindingIndex(), tView.bindingStartIndex,\n          'text nodes should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n\n  const tNode = tView.firstCreatePass ?\n      getOrCreateTNode(tView, adjustedIndex, TNodeType.Text, value, null) :\n      tView.data[adjustedIndex] as TElementNode;\n\n  const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);\n  appendChild(tView, lView, textNative, tNode);\n\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {getLView, getSelectedIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {textBindingInternal} from './shared';\n\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate(v0: any): typeof ɵɵtextInterpolate {\n  ɵɵtextInterpolate1('', v0, '');\n  return ɵɵtextInterpolate;\n}\n\n\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate1(\n    prefix: string, v0: any, suffix: string): typeof ɵɵtextInterpolate1 {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate1;\n}\n\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate2(\n    prefix: string, v0: any, i0: string, v1: any, suffix: string): typeof ɵɵtextInterpolate2 {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate2;\n}\n\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate3(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string): typeof ɵɵtextInterpolate3 {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate3;\n}\n\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate4(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    suffix: string): typeof ɵɵtextInterpolate4 {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate4;\n}\n\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate5(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, suffix: string): typeof ɵɵtextInterpolate5 {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate5;\n}\n\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate6(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, suffix: string): typeof ɵɵtextInterpolate6 {\n  const lView = getLView();\n  const interpolated =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate6;\n}\n\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate7(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any,\n    suffix: string): typeof ɵɵtextInterpolate7 {\n  const lView = getLView();\n  const interpolated =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate7;\n}\n\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate8(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): typeof ɵɵtextInterpolate8 {\n  const lView = getLView();\n  const interpolated = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate8;\n}\n\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵtextInterpolateV(values: any[]): typeof ɵɵtextInterpolateV {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {keyValueArraySet} from '../../util/array_utils';\nimport {getLView} from '../state';\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {checkStylingMap, classStringParser} from './styling';\n\n\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate1(prefix: string, v0: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate2(\n    prefix: string, v0: any, i0: string, v1: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate3(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate4(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate5(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate6(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate7(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate8(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolateV(values: any[]): void {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getLView} from '../state';\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {ɵɵstyleMap} from './styling';\n\n\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style=\"key: {{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate1(prefix: string, v0: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate2(\n    prefix: string, v0: any, i0: string, v1: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate3(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate4(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate5(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate6(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate7(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate8(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolateV(values: any[]): void {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  ɵɵstyleMap(interpolatedValue);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getLView,} from '../state';\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {checkStylingProperty} from './styling';\n\n\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate1(\n    prop: string, prefix: string, v0: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate1;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate2(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate2;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate3(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate3;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate4(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string, valueSuffix?: string|null): typeof ɵɵstylePropInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate4;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate5(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate5;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate6(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate6;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate7(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate7;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate8(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string, valueSuffix?: string|null): typeof ɵɵstylePropInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate8;\n}\n\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolateV(\n    prop: string, values: any[], valueSuffix?: string|null): typeof ɵɵstylePropInterpolateV {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {getCurrentDirectiveDef, getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {elementPropertyInternal, loadComponentRenderer, storePropertyBindingMetadata} from './shared';\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵhostProperty<T>(\n    propName: string, value: T, sanitizer?: SanitizerFn|null): typeof ɵɵhostProperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵhostProperty;\n}\n\n\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nexport function ɵɵsyntheticHostProperty<T>(\n    propName: string, value: T|NO_CHANGE,\n    sanitizer?: SanitizerFn|null): typeof ɵɵsyntheticHostProperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵsyntheticHostProperty;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\n\nfunction plural(val: number): number {\nconst n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\\.?/, '').length;\n\nif (i === 1 && v === 0)\n    return 1;\nreturn 5;\n}\n\nexport default [\"en\",[[\"a\",\"p\"],[\"AM\",\"PM\"],u],[[\"AM\",\"PM\"],u,u],[[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]],u,[[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]],u,[[\"B\",\"A\"],[\"BC\",\"AD\"],[\"Before Christ\",\"Anno Domini\"]],0,[6,0],[\"M/d/yy\",\"MMM d, y\",\"MMMM d, y\",\"EEEE, MMMM d, y\"],[\"h:mm a\",\"h:mm:ss a\",\"h:mm:ss a z\",\"h:mm:ss a zzzz\"],[\"{1}, {0}\",u,\"{1} 'at' {0}\",u],[\".\",\",\",\";\",\"%\",\"+\",\"-\",\"E\",\"×\",\"‰\",\"∞\",\"NaN\",\":\"],[\"#,##0.###\",\"#,##0%\",\"¤#,##0.00\",\"#E0\"],\"USD\",\"$\",\"US Dollar\",{},\"ltr\", plural];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {global} from '../util/global';\n\nimport localeEn from './locale_en';\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA: {[localeId: string]: any} = {};\n\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nexport function registerLocaleData(data: any, localeId?: string|any, extraData?: any): void {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n\n  LOCALE_DATA[localeId] = data;\n\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nexport function findLocaleData(locale: string): any {\n  const normalizedLocale = normalizeLocale(locale);\n\n  let match = getLocaleData(normalizedLocale);\n  if (match) {\n    return match;\n  }\n\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n  if (match) {\n    return match;\n  }\n\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n\n  throw new Error(`Missing locale data for the locale \"${locale}\".`);\n}\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nexport function getLocaleCurrencyCode(locale: string): string|null {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nexport function getLocalePluralCase(locale: string): (value: number) => number {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n\n\n\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nexport function getLocaleData(normalizedLocale: string): any {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] = global.ng && global.ng.common && global.ng.common.locales &&\n        global.ng.common.locales[normalizedLocale];\n  }\n  return LOCALE_DATA[normalizedLocale];\n}\n\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nexport function unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n\n/**\n * Index of each type of locale data from the locale data array\n */\nexport enum LocaleDataIndex {\n  LocaleId = 0,\n  DayPeriodsFormat,\n  DayPeriodsStandalone,\n  DaysFormat,\n  DaysStandalone,\n  MonthsFormat,\n  MonthsStandalone,\n  Eras,\n  FirstDayOfWeek,\n  WeekendRange,\n  DateFormat,\n  TimeFormat,\n  DateTimeFormat,\n  NumberSymbols,\n  NumberFormats,\n  CurrencyCode,\n  CurrencySymbol,\n  CurrencyName,\n  Currencies,\n  Directionality,\n  PluralCase,\n  ExtraData\n}\n\n/**\n * Index of each type of locale data from the extra locale data array\n */\nexport const enum ExtraLocaleDataIndex {\n  ExtraDayPeriodFormats = 0,\n  ExtraDayPeriodStandalone,\n  ExtraDayPeriodsRules\n}\n\n/**\n * Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)\n */\nexport const enum CurrencyIndex {\n  Symbol = 0,\n  SymbolNarrow,\n  NbOfDigits\n}\n\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale: string): string {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getLocalePluralCase} from './locale_data_api';\n\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n\n/**\n * Returns the plural case based on the locale\n */\nexport function getPluralCase(value: string, locale: string): string {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return (result !== undefined) ? result : 'other';\n}\n\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nexport const DEFAULT_LOCALE_ID = 'en-US';\n\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nexport const USD_CURRENCY_CODE = 'USD';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SanitizerFn} from './sanitization';\n\n\n/**\n * Stores a list of nodes which need to be removed.\n *\n * Numbers are indexes into the `LView`\n * - index > 0: `removeRNode(lView[0])`\n * - index < 0: `removeICU(~lView[0])`\n */\nexport interface I18nRemoveOpCodes extends Array<number> {\n  __brand__: 'I18nRemoveOpCodes';\n}\n\n/**\n * `I18nMutateOpCode` defines OpCodes for `I18nMutateOpCodes` array.\n *\n * OpCodes are efficient operations which can be applied to the DOM to update it. (For example to\n * update to a new ICU case requires that we clean up previous elements and create new ones.)\n *\n * OpCodes contain three parts:\n *  1) Parent node index offset. (p)\n *  2) Reference node index offset. (r)\n *  3) The instruction to execute. (i)\n *\n * pppp pppp pppp pppp rrrr rrrr rrrr riii\n * 3322 2222 2222 1111 1111 1110 0000 0000\n * 1098 7654 3210 9876 5432 1098 7654 3210\n *\n * ```\n * var parent = lView[opCode >>> SHIFT_PARENT];\n * var refNode = lView[((opCode & MASK_REF) >>> SHIFT_REF)];\n * var instruction = opCode & MASK_OPCODE;\n * ```\n *\n * See: `I18nCreateOpCodes` for example of usage.\n */\nexport const enum IcuCreateOpCode {\n  /**\n   * Stores shift amount for bits 17-3 that contain reference index.\n   */\n  SHIFT_REF = 1,\n  /**\n   * Stores shift amount for bits 31-17 that contain parent index.\n   */\n  SHIFT_PARENT = 17,\n  /**\n   * Mask for OpCode\n   */\n  MASK_INSTRUCTION = 0b1,\n\n  /**\n   * Mask for the Reference node (bits 16-3)\n   */\n  MASK_REF = 0b11111111111111110,\n  //           11111110000000000\n  //           65432109876543210\n\n  /**\n   * Instruction to append the current node to `PARENT`.\n   */\n  AppendChild = 0b0,\n\n  /**\n   * Instruction to set the attribute of a node.\n   */\n  Attr = 0b1,\n}\n\n\n/**\n * Array storing OpCode for dynamically creating `i18n` blocks.\n *\n * Example:\n * ```ts\n * <I18nCreateOpCode>[\n *   // For adding text nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createTextNode('xyz'));\n *   'xyz', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For adding element nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createElement('div'));\n *   ELEMENT_MARKER, 'div', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For adding comment nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createComment(''));\n *   ICU_MARKER, '', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For moving existing nodes to a different location\n *   // --------------------------------------------------\n *   // Equivalent to:\n *   //   const node = lView[1];\n *   //   lView[2].appendChild(node);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For removing existing nodes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   removeChild(tView.data(1), node, lView);\n *   1 << SHIFT_REF | Remove,\n *\n *   // For writing attributes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   node.setAttribute('attr', 'value');\n *   1 << SHIFT_REF | Attr, 'attr', 'value'\n * ];\n * ```\n */\nexport interface IcuCreateOpCodes extends Array<number|string|ELEMENT_MARKER|ICU_MARKER|null>,\n                                          I18nDebug {\n  __brand__: 'I18nCreateOpCodes';\n}\n\nexport const enum I18nUpdateOpCode {\n  /**\n   * Stores shift amount for bits 17-2 that contain reference index.\n   */\n  SHIFT_REF = 2,\n  /**\n   * Mask for OpCode\n   */\n  MASK_OPCODE = 0b11,\n\n  /**\n   * Instruction to update a text node.\n   */\n  Text = 0b00,\n  /**\n   * Instruction to update a attribute of a node.\n   */\n  Attr = 0b01,\n  /**\n   * Instruction to switch the current ICU case.\n   */\n  IcuSwitch = 0b10,\n  /**\n   * Instruction to update the current ICU case.\n   */\n  IcuUpdate = 0b11,\n}\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nexport const ELEMENT_MARKER: ELEMENT_MARKER = {\n  marker: 'element'\n};\nexport interface ELEMENT_MARKER {\n  marker: 'element';\n}\n\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nexport const ICU_MARKER: ICU_MARKER = {\n  marker: 'ICU'\n};\n\nexport interface ICU_MARKER {\n  marker: 'ICU';\n}\n\nexport interface I18nDebug {\n  /**\n   * Human readable representation of the OpCode arrays.\n   *\n   * NOTE: This property only exists if `ngDevMode` is set to `true` and it is not present in\n   * production. Its presence is purely to help debug issue in development, and should not be relied\n   * on in production application.\n   */\n  debug?: string[];\n}\n\n/**\n * Array storing OpCode for dynamically creating `i18n` translation DOM elements.\n *\n * This array creates a sequence of `Text` and `Comment` (as ICU anchor) DOM elements. It consists\n * of a pair of `number` and `string` pairs which encode the operations for the creation of the\n * translated block.\n *\n * The number is shifted and encoded according to `I18nCreateOpCode`\n *\n * Pseudocode:\n * ```\n * const i18nCreateOpCodes = [\n *   10 << I18nCreateOpCode.SHIFT, \"Text Node add to DOM\",\n *   11 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.COMMENT, \"Comment Node add to DOM\",\n *   12 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.APPEND_LATER, \"Text Node added later\"\n * ];\n *\n * for(var i=0; i<i18nCreateOpCodes.length; i++) {\n *   const opcode = i18NCreateOpCodes[i++];\n *   const index = opcode >> I18nCreateOpCode.SHIFT;\n *   const text = i18NCreateOpCodes[i];\n *   let node: Text|Comment;\n *   if (opcode & I18nCreateOpCode.COMMENT === I18nCreateOpCode.COMMENT) {\n *     node = lView[~index] = document.createComment(text);\n *   } else {\n *     node = lView[index] = document.createText(text);\n *   }\n *   if (opcode & I18nCreateOpCode.APPEND_EAGERLY !== I18nCreateOpCode.APPEND_EAGERLY) {\n *     parentNode.appendChild(node);\n *   }\n * }\n * ```\n */\nexport interface I18nCreateOpCodes extends Array<number|string>, I18nDebug {\n  __brand__: 'I18nCreateOpCodes';\n}\n\n/**\n * See `I18nCreateOpCodes`\n */\nexport enum I18nCreateOpCode {\n  /**\n   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n   * `COMMENT`.\n   */\n  SHIFT = 2,\n\n  /**\n   * Should the node be appended to parent imedditatly after creation.\n   */\n  APPEND_EAGERLY = 0b01,\n\n  /**\n   * If set the node should be comment (rather than a text) node.\n   */\n  COMMENT = 0b10,\n}\n\n\n/**\n * Stores DOM operations which need to be applied to update DOM render tree due to changes in\n * expressions.\n *\n * The basic idea is that `i18nExp` OpCodes capture expression changes and update a change\n * mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and\n * higher.) The OpCodes then compare its own change mask against the expression change mask to\n * determine if the OpCodes should execute.\n *\n * NOTE: 32nd bit is special as it says 32nd or higher. This way if we have more than 32 bindings\n * the code still works, but with lower efficiency. (it is unlikely that a translation would have\n * more than 32 bindings.)\n *\n * These OpCodes can be used by both the i18n block as well as ICU sub-block.\n *\n * ## Example\n *\n * Assume\n * ```ts\n *   if (rf & RenderFlags.Update) {\n *    i18nExp(ctx.exp1); // If changed set mask bit 1\n *    i18nExp(ctx.exp2); // If changed set mask bit 2\n *    i18nExp(ctx.exp3); // If changed set mask bit 3\n *    i18nExp(ctx.exp4); // If changed set mask bit 4\n *    i18nApply(0);            // Apply all changes by executing the OpCodes.\n *  }\n * ```\n * We can assume that each call to `i18nExp` sets an internal `changeMask` bit depending on the\n * index of `i18nExp`.\n *\n * ### OpCodes\n * ```ts\n * <I18nUpdateOpCodes>[\n *   // The following OpCodes represent: `<div i18n-title=\"pre{{exp1}}in{{exp2}}post\">`\n *   // If `changeMask & 0b11`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `8` values and start processing next OpCodes.\n *   0b11, 8,\n *   // Concatenate `newValue = 'pre'+lView[bindIndex-4]+'in'+lView[bindIndex-3]+'post';`.\n *   'pre', -4, 'in', -3, 'post',\n *   // Update attribute: `elementAttribute(1, 'title', sanitizerFn(newValue));`\n *   1 << SHIFT_REF | Attr, 'title', sanitizerFn,\n *\n *   // The following OpCodes represent: `<div i18n>Hello {{exp3}}!\">`\n *   // If `changeMask & 0b100`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n *   0b100, 4,\n *   // Concatenate `newValue = 'Hello ' + lView[bindIndex -2] + '!';`.\n *   'Hello ', -2, '!',\n *   // Update text: `lView[1].textContent = newValue;`\n *   1 << SHIFT_REF | Text,\n *\n *   // The following OpCodes represent: `<div i18n>{exp4, plural, ... }\">`\n *   // If `changeMask & 0b1000`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `2` values and start processing next OpCodes.\n *   0b1000, 2,\n *   // Concatenate `newValue = lView[bindIndex -1];`.\n *   -1,\n *   // Switch ICU: `icuSwitchCase(lView[1], 0, newValue);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,\n *\n *   // Note `changeMask & -1` is always true, so the IcuUpdate will always execute.\n *   -1, 1,\n *   // Update ICU: `icuUpdateCase(lView[1], 0);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,\n *\n * ];\n * ```\n *\n */\nexport interface I18nUpdateOpCodes extends Array<string|number|SanitizerFn|null>, I18nDebug {\n  __brand__: 'I18nUpdateOpCodes';\n}\n\n/**\n * Store information for the i18n translation block.\n */\nexport interface TI18n {\n  /**\n   * A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.\n   *\n   * NOTE: The ICU anchors are filled in with ICU Update OpCode.\n   */\n  create: I18nCreateOpCodes;\n\n  /**\n   * A set of OpCodes which will be executed on each change detection to determine if any changes to\n   * DOM are required.\n   */\n  update: I18nUpdateOpCodes;\n}\n\n/**\n * Defines the ICU type of `select` or `plural`\n */\nexport const enum IcuType {\n  select = 0,\n  plural = 1,\n}\n\nexport interface TIcu {\n  /**\n   * Defines the ICU type of `select` or `plural`\n   */\n  type: IcuType;\n\n  /**\n   * Index in `LView` where the anchor node is stored. `<!-- ICU 0:0 -->`\n   */\n  anchorIdx: number;\n\n  /**\n   * Currently selected ICU case pointer.\n   *\n   * `lView[currentCaseLViewIndex]` stores the currently selected case. This is needed to know how\n   * to clean up the current case when transitioning no the new case.\n   *\n   * If the value stored is:\n   * `null`: No current case selected.\n   *   `<0`: A flag which means that the ICU just switched and that `icuUpdate` must be executed\n   *         regardless of the `mask`. (After the execution the flag is cleared)\n   *   `>=0` A currently selected case index.\n   */\n  currentCaseLViewIndex: number;\n\n  /**\n   * A list of case values which the current ICU will try to match.\n   *\n   * The last value is `other`\n   */\n  cases: any[];\n\n  /**\n   * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n   */\n  create: IcuCreateOpCodes[];\n\n  /**\n   * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n   */\n  remove: I18nRemoveOpCodes[];\n\n  /**\n   * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n   */\n  update: I18nUpdateOpCodes[];\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n\n/**\n * Parsed ICU expression\n */\nexport interface IcuExpression {\n  type: IcuType;\n  mainBinding: number;\n  cases: string[];\n  values: (string|IcuExpression)[][];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DEFAULT_LOCALE_ID} from '../../i18n/localization';\nimport {assertDefined} from '../../util/assert';\n\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID = DEFAULT_LOCALE_ID;\n\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nexport function setLocaleId(localeId: string) {\n  assertDefined(localeId, `Expected localeId to be defined`);\n  if (typeof localeId === 'string') {\n    LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nexport function getLocaleId(): string {\n  return LOCALE_ID;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDomNode, assertIndexInRange} from '../util/assert';\n\nimport {TNode, TNodeFlags, TNodeType} from './interfaces/node';\nimport {Renderer3} from './interfaces/renderer';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {LView} from './interfaces/view';\nimport {getInsertInFrontOfRNodeWithNoI18n, nativeInsertBefore} from './node_manipulation';\nimport {unwrapRNode} from './util/view_utils';\n\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nexport function getInsertInFrontOfRNodeWithI18n(\n    parentTNode: TNode, currentTNode: TNode, lView: LView): RNode|null {\n  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n  const insertBeforeIndex =\n      Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n  } else {\n    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n    return unwrapRNode(lView[insertBeforeIndex]);\n  }\n}\n\n\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nexport function processI18nInsertBefore(\n    renderer: Renderer3, childTNode: TNode, lView: LView, childRNode: RNode|RNode[],\n    parentRElement: RElement|null): void {\n  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n  if (Array.isArray(tNodeInsertBeforeIndex)) {\n    // An array indicates that there are i18n nodes that need to be added as children of this\n    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n    // only now can be added. The first element of the array is the normal index where we should\n    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n    // `childRNode`.\n    ngDevMode && assertDomNode(childRNode);\n    let i18nParent: RElement|null = childRNode as RElement;\n    let anchorRNode: RNode|null = null;\n    if (!(childTNode.type & TNodeType.AnyRNode)) {\n      anchorRNode = i18nParent;\n      i18nParent = parentRElement;\n    }\n    if (i18nParent !== null && (childTNode.flags & TNodeFlags.isComponentHost) === 0) {\n      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n        // see `assertDomNode` below.\n        const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual} from '../../util/assert';\nimport {TNode, TNodeType} from '../interfaces/node';\nimport {setI18nHandling} from '../node_manipulation';\nimport {getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore} from '../node_manipulation_i18n';\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nexport function addTNodeAndUpdateInsertBeforeIndex(previousTNodes: TNode[], newTNode: TNode) {\n  // Start with Rule1\n  ngDevMode &&\n      assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n\n  previousTNodes.push(newTNode);\n  if (previousTNodes.length > 1) {\n    for (let i = previousTNodes.length - 2; i >= 0; i--) {\n      const existingTNode = previousTNodes[i];\n      // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n      // It is safe to ignore them.\n      if (!isI18nText(existingTNode)) {\n        if (isNewTNodeCreatedBefore(existingTNode, newTNode) &&\n            getInsertBeforeIndex(existingTNode) === null) {\n          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n          // then add the `insertBeforeIndex`.\n          setInsertBeforeIndex(existingTNode, newTNode.index);\n        }\n      }\n    }\n  }\n}\n\nfunction isI18nText(tNode: TNode): boolean {\n  return !(tNode.type & TNodeType.Placeholder);\n}\n\nfunction isNewTNodeCreatedBefore(existingTNode: TNode, newTNode: TNode): boolean {\n  return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\n\nfunction getInsertBeforeIndex(tNode: TNode): number|null {\n  const index = tNode.insertBeforeIndex;\n  return Array.isArray(index) ? index[0] : index;\n}\n\nfunction setInsertBeforeIndex(tNode: TNode, value: number): void {\n  const index = tNode.insertBeforeIndex;\n  if (Array.isArray(index)) {\n    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n    index[0] = value;\n  } else {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    tNode.insertBeforeIndex = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertGreaterThan, assertGreaterThanOrEqual, throwError} from '../../util/assert';\nimport {assertTIcu, assertTNode} from '../assert';\nimport {createTNodeAtIndex} from '../instructions/shared';\nimport {IcuCreateOpCode, TIcu} from '../interfaces/i18n';\nimport {TIcuContainerNode, TNode, TNodeType} from '../interfaces/node';\nimport {LView, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {setI18nHandling} from '../node_manipulation';\nimport {getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore} from '../node_manipulation_i18n';\nimport {addTNodeAndUpdateInsertBeforeIndex} from './i18n_insert_before_index';\n\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nexport function getTIcu(tView: TView, index: number): TIcu|null {\n  const value = tView.data[index] as null | TIcu | TIcuContainerNode | string;\n  if (value === null || typeof value === 'string') return null;\n  if (ngDevMode &&\n      !(value.hasOwnProperty('tViews') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n    throwError('We expect to get \\'null\\'|\\'TIcu\\'|\\'TIcuContainer\\', but got: ' + value);\n  }\n  // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n  // will be just two cases which fits into the browser inline cache (inline cache can take up to\n  // 4)\n  const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value as TIcu :\n                                                               (value as TIcuContainerNode).value;\n  ngDevMode && assertTIcu(tIcu);\n  return tIcu;\n}\n\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nexport function setTIcu(tView: TView, index: number, tIcu: TIcu): void {\n  const tNode = tView.data[index] as null | TIcuContainerNode;\n  ngDevMode &&\n      assertEqual(\n          tNode === null || tNode.hasOwnProperty('tViews'), true,\n          'We expect to get \\'null\\'|\\'TIcuContainer\\'');\n  if (tNode === null) {\n    tView.data[index] = tIcu;\n  } else {\n    ngDevMode && assertTNodeType(tNode, TNodeType.Icu);\n    tNode.value = tIcu;\n  }\n}\n\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nexport function setTNodeInsertBeforeIndex(tNode: TNode, index: number) {\n  ngDevMode && assertTNode(tNode);\n  let insertBeforeIndex = tNode.insertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    insertBeforeIndex = tNode.insertBeforeIndex =\n        [null!/* may be updated to number later */, index];\n  } else {\n    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n    (insertBeforeIndex as number[]).push(index);\n  }\n}\n\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nexport function createTNodePlaceholder(\n    tView: TView, previousTNodes: TNode[], index: number): TNode {\n  const tNode = createTNodeAtIndex(tView, index, TNodeType.Placeholder, null, null);\n  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n  return tNode;\n}\n\n\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nexport function getCurrentICUCaseIndex(tIcu: TIcu, lView: LView) {\n  const currentCase: number|null = lView[tIcu.currentCaseLViewIndex];\n  return currentCase === null ? currentCase : (currentCase < 0 ? ~currentCase : currentCase);\n}\n\nexport function getParentFromIcuCreateOpCode(mergedCode: number): number {\n  return mergedCode >>> IcuCreateOpCode.SHIFT_PARENT;\n}\n\nexport function getRefFromIcuCreateOpCode(mergedCode: number): number {\n  return (mergedCode & IcuCreateOpCode.MASK_REF) >>> IcuCreateOpCode.SHIFT_REF;\n}\n\nexport function getInstructionFromIcuCreateOpCode(mergedCode: number): number {\n  return mergedCode & IcuCreateOpCode.MASK_INSTRUCTION;\n}\n\nexport function icuCreateOpCode(opCode: IcuCreateOpCode, parentIdx: number, refIdx: number) {\n  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n  return opCode | parentIdx << IcuCreateOpCode.SHIFT_PARENT | refIdx << IcuCreateOpCode.SHIFT_REF;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getPluralCase} from '../../i18n/localization';\nimport {assertDefined, assertDomNode, assertEqual, assertGreaterThan, assertIndexInRange, throwError} from '../../util/assert';\nimport {assertIndexInExpandoRange, assertTIcu} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {elementPropertyInternal, setElementAttribute} from '../instructions/shared';\nimport {ELEMENT_MARKER, I18nCreateOpCode, I18nCreateOpCodes, I18nUpdateOpCode, I18nUpdateOpCodes, ICU_MARKER, IcuCreateOpCode, IcuCreateOpCodes, IcuType, TI18n, TIcu} from '../interfaces/i18n';\nimport {TNode} from '../interfaces/node';\nimport {RElement, RNode, RText} from '../interfaces/renderer_dom';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {HEADER_OFFSET, LView, RENDERER, TView} from '../interfaces/view';\nimport {createCommentNode, createElementNode, createTextNode, nativeInsertBefore, nativeParentNode, nativeRemoveNode, updateTextNode} from '../node_manipulation';\nimport {getBindingIndex} from '../state';\nimport {renderStringify} from '../util/stringify_utils';\nimport {getNativeByIndex, unwrapRNode} from '../util/view_utils';\nimport {getLocaleId} from './i18n_locale_id';\nimport {getCurrentICUCaseIndex, getParentFromIcuCreateOpCode, getRefFromIcuCreateOpCode, getTIcu} from './i18n_util';\n\n\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nexport function setMaskBit(hasChange: boolean) {\n  if (hasChange) {\n    changeMask = changeMask | (1 << Math.min(changeMaskCounter, 31));\n  }\n  changeMaskCounter++;\n}\n\nexport function applyI18n(tView: TView, lView: LView, index: number) {\n  if (changeMaskCounter > 0) {\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index] as TI18n | I18nUpdateOpCodes;\n    // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n    const updateOpCodes: I18nUpdateOpCodes =\n        Array.isArray(tI18n) ? tI18n as I18nUpdateOpCodes : (tI18n as TI18n).update;\n    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n  }\n  // Reset changeMask & maskBit to default for the next update cycle\n  changeMask = 0b0;\n  changeMaskCounter = 0;\n}\n\n\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nexport function applyCreateOpCodes(\n    lView: LView, createOpCodes: I18nCreateOpCodes, parentRNode: RElement|null,\n    insertInFrontOf: RElement|null): void {\n  const renderer = lView[RENDERER];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++] as any;\n    const text = createOpCodes[i] as string;\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow =\n        (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    let rNode = lView[index];\n    if (rNode === null) {\n      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n      // case which was already instantiated, no need to create new DOM nodes.\n      rNode = lView[index] =\n          isComment ? renderer.createComment(text) : createTextNode(renderer, text);\n    }\n    if (appendNow && parentRNode !== null) {\n      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n    }\n  }\n}\n\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nexport function applyMutableOpCodes(\n    tView: TView, mutableOpCodes: IcuCreateOpCodes, lView: LView, anchorRNode: RNode): void {\n  ngDevMode && assertDomNode(anchorRNode);\n  const renderer = lView[RENDERER];\n  // `rootIdx` represents the node into which all inserts happen.\n  let rootIdx: number|null = null;\n  // `rootRNode` represents the real node into which we insert. This can be different from\n  // `lView[rootIdx]` if we have projection.\n  //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n  //    LView which has no parent.)\n  //  - `RElement` The element representing the root after taking projection into account.\n  let rootRNode!: RElement|null;\n  for (let i = 0; i < mutableOpCodes.length; i++) {\n    const opCode = mutableOpCodes[i];\n    if (typeof opCode == 'string') {\n      const textNodeIndex = mutableOpCodes[++i] as number;\n      if (lView[textNodeIndex] === null) {\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && assertIndexInRange(lView, textNodeIndex);\n        lView[textNodeIndex] = createTextNode(renderer, opCode);\n      }\n    } else if (typeof opCode == 'number') {\n      switch (opCode & IcuCreateOpCode.MASK_INSTRUCTION) {\n        case IcuCreateOpCode.AppendChild:\n          const parentIdx = getParentFromIcuCreateOpCode(opCode);\n          if (rootIdx === null) {\n            // The first operation should save the `rootIdx` because the first operation\n            // must insert into the root. (Only subsequent operations can insert into a dynamic\n            // parent)\n            rootIdx = parentIdx;\n            rootRNode = nativeParentNode(renderer, anchorRNode);\n          }\n          let insertInFrontOf: RNode|null;\n          let parentRNode: RElement|null;\n          if (parentIdx === rootIdx) {\n            insertInFrontOf = anchorRNode;\n            parentRNode = rootRNode;\n          } else {\n            insertInFrontOf = null;\n            parentRNode = unwrapRNode(lView[parentIdx]) as RElement;\n          }\n          // FIXME(misko): Refactor with `processI18nText`\n          if (parentRNode !== null) {\n            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n            // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n            // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n            // get picked up and added.\n            ngDevMode && assertDomNode(parentRNode);\n            const refIdx = getRefFromIcuCreateOpCode(opCode);\n            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n            // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n            // which can't have components.\n            const child = lView[refIdx] as RElement;\n            ngDevMode && assertDomNode(child);\n            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n            const tIcu = getTIcu(tView, refIdx);\n            if (tIcu !== null && typeof tIcu === 'object') {\n              // If we just added a comment node which has ICU then that ICU may have already been\n              // rendered and therefore we need to re-add it here.\n              ngDevMode && assertTIcu(tIcu);\n              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n              if (caseIndex !== null) {\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n              }\n            }\n          }\n          break;\n        case IcuCreateOpCode.Attr:\n          const elementNodeIndex = opCode >>> IcuCreateOpCode.SHIFT_REF;\n          const attrName = mutableOpCodes[++i] as string;\n          const attrValue = mutableOpCodes[++i] as string;\n          // This code is used for ICU expressions only, since we don't support\n          // directives/components in ICUs, we don't need to worry about inputs here\n          setElementAttribute(\n              renderer, getNativeByIndex(elementNodeIndex, lView) as RElement, null, null, attrName,\n              attrValue, null);\n          break;\n        default:\n          throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    } else {\n      switch (opCode) {\n        case ICU_MARKER:\n          const commentValue = mutableOpCodes[++i] as string;\n          const commentNodeIndex = mutableOpCodes[++i] as number;\n          if (lView[commentNodeIndex] === null) {\n            ngDevMode &&\n                assertEqual(\n                    typeof commentValue, 'string',\n                    `Expected \"${commentValue}\" to be a comment node value`);\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n            const commentRNode = lView[commentNodeIndex] =\n                createCommentNode(renderer, commentValue);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(commentRNode, lView);\n          }\n          break;\n        case ELEMENT_MARKER:\n          const tagName = mutableOpCodes[++i] as string;\n          const elementNodeIndex = mutableOpCodes[++i] as number;\n          if (lView[elementNodeIndex] === null) {\n            ngDevMode &&\n                assertEqual(\n                    typeof tagName, 'string',\n                    `Expected \"${tagName}\" to be an element node tag name`);\n\n            ngDevMode && ngDevMode.rendererCreateElement++;\n            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n            const elementRNode = lView[elementNodeIndex] =\n                createElementNode(renderer, tagName, null);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(elementRNode, lView);\n          }\n          break;\n        default:\n          ngDevMode &&\n              throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n}\n\n\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nexport function applyUpdateOpCodes(\n    tView: TView, lView: LView, updateOpCodes: I18nUpdateOpCodes, bindingsStartIndex: number,\n    changeMask: number) {\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i] as number;\n    // Number of opCodes to skip until next set of update codes\n    const skipCodes = updateOpCodes[++i] as number;\n    if (checkBit & changeMask) {\n      // The value has been updated since last checked\n      let value = '';\n      for (let j = i + 1; j <= (i + skipCodes); j++) {\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // Negative opCode represent `i18nExp` values offset.\n            value += renderStringify(lView[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = (opCode >>> I18nUpdateOpCode.SHIFT_REF);\n            switch (opCode & I18nUpdateOpCode.MASK_OPCODE) {\n              case I18nUpdateOpCode.Attr:\n                const propName = updateOpCodes[++j] as string;\n                const sanitizeFn = updateOpCodes[++j] as SanitizerFn | null;\n                const tNodeOrTagName = tView.data[nodeIndex] as TNode | string;\n                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                if (typeof tNodeOrTagName === 'string') {\n                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                  // not have TNode), in which case we know that there are no directives, and hence\n                  // we use attribute setting.\n                  setElementAttribute(\n                      lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value,\n                      sanitizeFn);\n                } else {\n                  elementPropertyInternal(\n                      tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn,\n                      false);\n                }\n                break;\n              case I18nUpdateOpCode.Text:\n                const rText = lView[nodeIndex] as RText | null;\n                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                break;\n              case I18nUpdateOpCode.IcuSwitch:\n                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex)!, lView, value);\n                break;\n              case I18nUpdateOpCode.IcuUpdate:\n                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex)!, bindingsStartIndex, lView);\n                break;\n            }\n          }\n        }\n      }\n    } else {\n      const opCode = updateOpCodes[i + 1] as number;\n      if (opCode > 0 && (opCode & I18nUpdateOpCode.MASK_OPCODE) === I18nUpdateOpCode.IcuUpdate) {\n        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n        // we still need to execute `icuUpdateCase` because the case has changed recently due to\n        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n        // pairs.)\n        const nodeIndex = (opCode >>> I18nUpdateOpCode.SHIFT_REF);\n        const tIcu = getTIcu(tView, nodeIndex)!;\n        const currentIndex = lView[tIcu.currentCaseLViewIndex];\n        if (currentIndex < 0) {\n          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView: TView, tIcu: TIcu, bindingsStartIndex: number, lView: LView) {\n  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n  if (activeCaseIndex !== null) {\n    let mask = changeMask;\n    if (activeCaseIndex < 0) {\n      // Clear the flag.\n      // Negative number means that the ICU was freshly created and we need to force the update.\n      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n      // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n      mask = -1;\n    }\n    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n  }\n}\n\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView: TView, tIcu: TIcu, lView: LView, value: string) {\n  // Rebuild a new case for this ICU\n  const caseIndex = getCaseIndex(tIcu, value);\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== caseIndex) {\n    applyIcuSwitchCaseRemove(tView, tIcu, lView);\n    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n    if (caseIndex !== null) {\n      // Add the nodes for the new case\n      const anchorRNode = lView[tIcu.anchorIdx];\n      if (anchorRNode) {\n        ngDevMode && assertDomNode(anchorRNode);\n        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n      }\n    }\n  }\n}\n\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView: TView, tIcu: TIcu, lView: LView) {\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== null) {\n    const removeCodes = tIcu.remove[activeCaseIndex];\n    for (let i = 0; i < removeCodes.length; i++) {\n      const nodeOrIcuIndex = removeCodes[i] as number;\n      if (nodeOrIcuIndex > 0) {\n        // Positive numbers are `RNode`s.\n        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n      } else {\n        // Negative numbers are ICUs\n        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex)!, lView);\n      }\n    }\n  }\n}\n\n\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression: TIcu, bindingValue: string): number|null {\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case IcuType.plural: {\n        const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n        index = icuExpression.cases.indexOf(resolvedCase);\n        if (index === -1 && resolvedCase !== 'other') {\n          index = icuExpression.cases.indexOf('other');\n        }\n        break;\n      }\n      case IcuType.select: {\n        index = icuExpression.cases.indexOf('other');\n        break;\n      }\n    }\n  }\n  return index === -1 ? null : index;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDomNode, assertNumber, assertNumberInRange} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {assertTIcu, assertTNodeForLView} from '../assert';\nimport {getCurrentICUCaseIndex} from '../i18n/i18n_util';\nimport {I18nRemoveOpCodes, TIcu} from '../interfaces/i18n';\nimport {TIcuContainerNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {LView, TVIEW} from '../interfaces/view';\n\nexport function loadIcuContainerVisitor() {\n  const _stack: any[] = [];\n  let _index: number = -1;\n  let _lView: LView;\n  let _removes: I18nRemoveOpCodes;\n\n  /**\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n   * to determine which root belong to the ICU.\n   *\n   * Example of usage.\n   * ```\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n   * let rNode: RNode|null;\n   * while(rNode = nextRNode()) {\n   *   console.log(rNode);\n   * }\n   * ```\n   *\n   * @param tIcuContainerNode Current `TIcuContainerNode`\n   * @param lView `LView` where the `RNode`s should be looked up.\n   */\n  function icuContainerIteratorStart(tIcuContainerNode: TIcuContainerNode, lView: LView): () =>\n      RNode | null {\n    _lView = lView;\n    while (_stack.length) _stack.pop();\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext;\n  }\n\n  function enterIcu(tIcu: TIcu, lView: LView) {\n    _index = 0;\n    const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n    if (currentCase !== null) {\n      ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n      _removes = tIcu.remove[currentCase];\n    } else {\n      _removes = EMPTY_ARRAY as any;\n    }\n  }\n\n\n  function icuContainerIteratorNext(): RNode|null {\n    if (_index < _removes.length) {\n      const removeOpCode = _removes[_index++] as number;\n      ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n      if (removeOpCode > 0) {\n        const rNode = _lView[removeOpCode];\n        ngDevMode && assertDomNode(rNode);\n        return rNode;\n      } else {\n        _stack.push(_index, _removes);\n        // ICUs are represented by negative indices\n        const tIcuIndex = ~removeOpCode;\n        const tIcu = _lView[TVIEW].data[tIcuIndex] as TIcu;\n        ngDevMode && assertTIcu(tIcu);\n        enterIcu(tIcu, _lView);\n        return icuContainerIteratorNext();\n      }\n    } else {\n      if (_stack.length === 0) {\n        return null;\n      } else {\n        _removes = _stack.pop();\n        _index = _stack.pop();\n        return icuContainerIteratorNext();\n      }\n    }\n  }\n\n  return icuContainerIteratorStart;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../../util/ng_dev_mode';\nimport '../../util/ng_i18n_closure_mode';\n\nimport {getTemplateContent, SRCSET_ATTRS, URI_ATTRS, VALID_ATTRS, VALID_ELEMENTS} from '../../sanitization/html_sanitizer';\nimport {getInertBodyHelper} from '../../sanitization/inert_body';\nimport {_sanitizeUrl, sanitizeSrcset} from '../../sanitization/url_sanitizer';\nimport {assertDefined, assertEqual, assertGreaterThanOrEqual, assertOneOf, assertString} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\nimport {loadIcuContainerVisitor} from '../instructions/i18n_icu_container_visitor';\nimport {allocExpando, createTNodeAtIndex} from '../instructions/shared';\nimport {getDocument} from '../interfaces/document';\nimport {ELEMENT_MARKER, I18nCreateOpCode, I18nCreateOpCodes, I18nRemoveOpCodes, I18nUpdateOpCode, I18nUpdateOpCodes, ICU_MARKER, IcuCreateOpCode, IcuCreateOpCodes, IcuExpression, IcuType, TI18n, TIcu} from '../interfaces/i18n';\nimport {TNode, TNodeType} from '../interfaces/node';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {HEADER_OFFSET, LView, TView} from '../interfaces/view';\nimport {getCurrentParentTNode, getCurrentTNode, setCurrentTNode} from '../state';\nimport {attachDebugGetter} from '../util/debug_utils';\n\nimport {i18nCreateOpCodesToString, i18nRemoveOpCodesToString, i18nUpdateOpCodesToString, icuCreateOpCodesToString} from './i18n_debug';\nimport {addTNodeAndUpdateInsertBeforeIndex} from './i18n_insert_before_index';\nimport {ensureIcuContainerVisitorLoaded} from './i18n_tree_shaking';\nimport {createTNodePlaceholder, icuCreateOpCode, setTIcu, setTNodeInsertBeforeIndex} from './i18n_util';\n\n\n\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here, since translations\n * might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value: string): string {\n  return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nexport function i18nStartFirstCreatePass(\n    tView: TView, parentTNodeIndex: number, lView: LView, index: number, message: string,\n    subTemplateIndex: number) {\n  const rootTNode = getCurrentParentTNode();\n  const createOpCodes: I18nCreateOpCodes = [] as any;\n  const updateOpCodes: I18nUpdateOpCodes = [] as any;\n  const existingTNodeStack: TNode[][] = [[]];\n  if (ngDevMode) {\n    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n\n  message = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = replaceNgsp(message).split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n    if ((i & 1) === 0) {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = i18nParseTextIntoPartsAndICU(value);\n      for (let j = 0; j < parts.length; j++) {\n        let part = parts[j];\n        if ((j & 1) === 0) {\n          // `j` is odd therefore `part` is string\n          const text = part as string;\n          ngDevMode && assertString(text, 'Parsed ICU part should be string');\n          if (text !== '') {\n            i18nStartFirstCreatePassProcessTextNode(\n                tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n          }\n        } else {\n          // `j` is Even therefor `part` is an `ICUExpression`\n          const icuExpression: IcuExpression = part as IcuExpression;\n          // Verify that ICU expression has the right shape. Translations might contain invalid\n          // constructions (while original messages were correct), so ICU parsing at runtime may\n          // not succeed (thus `icuExpression` remains a string).\n          // Note: we intentionally retain the error here by not using `ngDevMode`, because\n          // the value can change based on the locale and users aren't guaranteed to hit\n          // an invalid string while they're developing.\n          if (typeof icuExpression !== 'object') {\n            throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n          }\n          const icuContainerTNode = createTNodeAndAddOpCode(\n              tView, rootTNode, existingTNodeStack[0], lView, createOpCodes,\n              ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n          const icuNodeIndex = icuContainerTNode.index;\n          ngDevMode &&\n              assertGreaterThanOrEqual(\n                  icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n          icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n        }\n      }\n    } else {\n      // Odd indexes are placeholders (elements and sub-templates)\n      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n      const isClosing = value.charCodeAt(0) === CharCode.SLASH;\n      const type = value.charCodeAt(isClosing ? 1 : 0);\n      ngDevMode && assertOneOf(type, CharCode.STAR, CharCode.HASH);\n      const index = HEADER_OFFSET + Number.parseInt(value.substring((isClosing ? 2 : 1)));\n      if (isClosing) {\n        existingTNodeStack.shift();\n        setCurrentTNode(getCurrentParentTNode()!, false);\n      } else {\n        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n        existingTNodeStack.unshift([]);\n        setCurrentTNode(tNode, true);\n      }\n    }\n  }\n\n  tView.data[index] = <TI18n>{\n    create: createOpCodes,\n    update: updateOpCodes,\n  };\n}\n\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(\n    tView: TView, rootTNode: TNode|null, existingTNodes: TNode[], lView: LView,\n    createOpCodes: I18nCreateOpCodes, text: string|null, isICU: boolean): TNode {\n  const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n  let parentTNode = getCurrentParentTNode();\n\n  if (rootTNode === parentTNode) {\n    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n    // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n    parentTNode = null;\n  }\n  if (parentTNode === null) {\n    // If we don't have a parent that means that we can eagerly add nodes.\n    // If we have a parent than these nodes can't be added now (as the parent has not been created\n    // yet) and instead the `parentTNode` is responsible for adding it. See\n    // `TNode.insertBeforeIndex`\n    opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n  }\n  if (isICU) {\n    opCode |= I18nCreateOpCode.COMMENT;\n    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n  }\n  createOpCodes.push(opCode, text === null ? '' : text);\n  // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n  // bindings are.\n  const tNode = createTNodeAtIndex(\n      tView, i18nNodeIdx, isICU ? TNodeType.Icu : TNodeType.Text,\n      text === null ? (ngDevMode ? '{{?}}' : '') : text, null);\n  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n  const tNodeIdx = tNode.index;\n  setCurrentTNode(tNode, false /* Text nodes are self closing */);\n  if (parentTNode !== null && rootTNode !== parentTNode) {\n    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n    // We have to make sure to add ourselves to the parent.\n    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n  }\n  return tNode;\n}\n\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(\n    tView: TView, rootTNode: TNode|null, existingTNodes: TNode[], createOpCodes: I18nCreateOpCodes,\n    updateOpCodes: I18nUpdateOpCodes, lView: LView, text: string): void {\n  const hasBinding = text.match(BINDING_REGEXP);\n  const tNode = createTNodeAndAddOpCode(\n      tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n  if (hasBinding) {\n    generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);\n  }\n}\n\n/**\n * See `i18nAttributes` above.\n */\nexport function i18nAttributesFirstPass(tView: TView, index: number, values: string[]) {\n  const previousElement = getCurrentTNode()!;\n  const previousElementIndex = previousElement.index;\n  const updateOpCodes: I18nUpdateOpCodes = [] as any;\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  if (tView.firstCreatePass && tView.data[index] === null) {\n    for (let i = 0; i < values.length; i += 2) {\n      const attrName = values[i];\n      const message = values[i + 1];\n\n      if (message !== '') {\n        // Check if attribute value contains an ICU and throw an error if that's the case.\n        // ICUs in element attributes are not supported.\n        // Note: we intentionally retain the error here by not using `ngDevMode`, because\n        // the `value` can change based on the locale and users aren't guaranteed to hit\n        // an invalid string while they're developing.\n        if (ICU_REGEXP.test(message)) {\n          throw new Error(\n              `ICU expressions are not supported in attributes. Message: \"${message}\".`);\n        }\n\n        // i18n attributes that hit this code path are guaranteed to have bindings, because\n        // the compiler treats static i18n attributes as regular attribute bindings.\n        // Since this may not be the first i18n attribute on this element we need to pass in how\n        // many previous bindings there have already been.\n        generateBindingUpdateOpCodes(\n            updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes),\n            null);\n      }\n    }\n    tView.data[index] = updateOpCodes;\n  }\n}\n\n\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(\n    updateOpCodes: I18nUpdateOpCodes, str: string, destinationNode: number, attrName: string|null,\n    bindingStart: number, sanitizeFn: SanitizerFn|null): number {\n  ngDevMode &&\n      assertGreaterThanOrEqual(\n          destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n  const maskIndex = updateOpCodes.length;  // Location of mask\n  const sizeIndex = maskIndex + 1;         // location of size for skipping\n  updateOpCodes.push(null, null);          // Alloc space for mask and size\n  const startIndex = maskIndex + 2;        // location of first allocation.\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = bindingStart + parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n\n  updateOpCodes.push(\n      destinationNode << I18nUpdateOpCode.SHIFT_REF |\n      (attrName ? I18nUpdateOpCode.Attr : I18nUpdateOpCode.Text));\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[maskIndex] = mask;\n  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n  return mask;\n}\n\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes: I18nUpdateOpCodes): number {\n  let count = 0;\n  for (let i = 0; i < opCodes.length; i++) {\n    const opCode = opCodes[i];\n    // Bindings are negative numbers.\n    if (typeof opCode === 'number' && opCode < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex: number): number {\n  return 1 << Math.min(bindingIndex, 31);\n}\n\nexport function isRootTemplateMessage(subTemplateIndex: number): subTemplateIndex is - 1 {\n  return subTemplateIndex === -1;\n}\n\n\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message: string): string {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n\n  ngDevMode &&\n      assertEqual(\n          inTemplate, false,\n          `Tag mismatch: unable to find the end of the sub-template in the translation \"${\n              message}\"`);\n\n  res += message.substr(index);\n  return res;\n}\n\n\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nexport function getTranslationForTemplate(message: string, subTemplateIndex: number) {\n  if (isRootTemplateMessage(subTemplateIndex)) {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start =\n        message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nexport function icuStart(\n    tView: TView, lView: LView, updateOpCodes: I18nUpdateOpCodes, parentIdx: number,\n    icuExpression: IcuExpression, anchorIdx: number) {\n  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n  let bindingMask = 0;\n  const tIcu: TIcu = {\n    type: icuExpression.type,\n    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n    anchorIdx,\n    cases: [],\n    create: [],\n    remove: [],\n    update: []\n  };\n  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n  setTIcu(tView, anchorIdx, tIcu);\n  const values = icuExpression.values;\n  for (let i = 0; i < values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = values[i];\n    const nestedIcus: IcuExpression[] = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value as IcuExpression) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    bindingMask = parseIcuCase(\n                      tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i],\n                      valueArr.join(''), nestedIcus) |\n        bindingMask;\n  }\n  if (bindingMask) {\n    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n  }\n}\n\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nexport function parseICUBlock(pattern: string): IcuExpression {\n  const cases = [];\n  const values: (string|IcuExpression)[][] = [];\n  let icuType = IcuType.plural;\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEXP, function(str: string, binding: string, type: string) {\n    if (type === 'select') {\n      icuType = IcuType.select;\n    } else {\n      icuType = IcuType.plural;\n    }\n    mainBinding = parseInt(binding.substr(1), 10);\n    return '';\n  });\n\n  const parts = i18nParseTextIntoPartsAndICU(pattern) as string[];\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length;) {\n    let key = parts[pos++].trim();\n    if (icuType === IcuType.plural) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n\n    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]) as string[];\n    if (cases.length > values.length) {\n      values.push(blocks);\n    }\n  }\n\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {type: icuType, mainBinding: mainBinding, cases, values};\n}\n\n\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nexport function i18nParseTextIntoPartsAndICU(pattern: string): (string|IcuExpression)[] {\n  if (!pattern) {\n    return [];\n  }\n\n  let prevPos = 0;\n  const braceStack = [];\n  const results: (string|IcuExpression)[] = [];\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n\n  let match;\n  while (match = braces.exec(pattern)) {\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEXP.test(block)) {\n          results.push(parseICUBlock(block));\n        } else {\n          results.push(block);\n        }\n\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n\n  const substring = pattern.substring(prevPos);\n  results.push(substring);\n  return results;\n}\n\n\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nexport function parseIcuCase(\n    tView: TView, tIcu: TIcu, lView: LView, updateOpCodes: I18nUpdateOpCodes, parentIdx: number,\n    caseName: string, unsafeCaseHtml: string, nestedIcus: IcuExpression[]): number {\n  const create: IcuCreateOpCodes = [] as any;\n  const remove: I18nRemoveOpCodes = [] as any;\n  const update: I18nUpdateOpCodes = [] as any;\n  if (ngDevMode) {\n    attachDebugGetter(create, icuCreateOpCodesToString);\n    attachDebugGetter(remove, i18nRemoveOpCodesToString);\n    attachDebugGetter(update, i18nUpdateOpCodesToString);\n  }\n  tIcu.cases.push(caseName);\n  tIcu.create.push(create);\n  tIcu.remove.push(remove);\n  tIcu.update.push(update);\n\n  const inertBodyHelper = getInertBodyHelper(getDocument());\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n  const inertRootNode = getTemplateContent(inertBodyElement!) as Element || inertBodyElement;\n  if (inertRootNode) {\n    return walkIcuTree(\n        tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx,\n        nestedIcus, 0);\n  } else {\n    return 0;\n  }\n}\n\nfunction walkIcuTree(\n    tView: TView, tIcu: TIcu, lView: LView, sharedUpdateOpCodes: I18nUpdateOpCodes,\n    create: IcuCreateOpCodes, remove: I18nRemoveOpCodes, update: I18nUpdateOpCodes,\n    parentNode: Element, parentIdx: number, nestedIcus: IcuExpression[], depth: number): number {\n  let bindingMask = 0;\n  let currentNode = parentNode.firstChild;\n  while (currentNode) {\n    const newIndex = allocExpando(tView, lView, 1, null);\n    switch (currentNode.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = currentNode as Element;\n        const tagName = element.tagName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n          tView.data[newIndex] = tagName;\n          const elAttrs = element.attributes;\n          for (let i = 0; i < elAttrs.length; i++) {\n            const attr = elAttrs.item(i)!;\n            const lowerAttrName = attr.name.toLowerCase();\n            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n            // we assume the input string is safe, unless it's using a binding\n            if (hasBinding) {\n              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                if (URI_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(\n                      update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                } else if (SRCSET_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(\n                      update, attr.value, newIndex, attr.name, 0, sanitizeSrcset);\n                } else {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                }\n              } else {\n                ngDevMode &&\n                    console.warn(\n                        `WARNING: ignoring unsafe attribute value ` +\n                        `${lowerAttrName} on element ${tagName} ` +\n                        `(see https://g.co/ng/security#xss)`);\n              }\n            } else {\n              addCreateAttribute(create, newIndex, attr);\n            }\n          }\n          // Parse the children of this node (if any)\n          bindingMask = walkIcuTree(\n                            tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update,\n                            currentNode as Element, newIndex, nestedIcus, depth + 1) |\n              bindingMask;\n          addRemoveNode(remove, newIndex, depth);\n        }\n        break;\n      case Node.TEXT_NODE:\n        const value = currentNode.textContent || '';\n        const hasBinding = value.match(BINDING_REGEXP);\n        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n        addRemoveNode(remove, newIndex, depth);\n        if (hasBinding) {\n          bindingMask =\n              generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n        }\n        break;\n      case Node.COMMENT_NODE:\n        // Check if the comment node is a placeholder for a nested ICU\n        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n        if (isNestedIcu) {\n          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n          const icuExpression: IcuExpression = nestedIcus[nestedIcuIndex];\n          // Create the comment node that will anchor the ICU expression\n          addCreateNodeAndAppend(\n              create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx,\n              newIndex);\n          icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n          addRemoveNestedIcu(remove, newIndex, depth);\n        }\n        break;\n    }\n    currentNode = currentNode.nextSibling;\n  }\n  return bindingMask;\n}\n\nfunction addRemoveNode(remove: I18nRemoveOpCodes, index: number, depth: number) {\n  if (depth === 0) {\n    remove.push(index);\n  }\n}\n\nfunction addRemoveNestedIcu(remove: I18nRemoveOpCodes, index: number, depth: number) {\n  if (depth === 0) {\n    remove.push(~index);  // remove ICU at `index`\n    remove.push(index);   // remove ICU comment at `index`\n  }\n}\n\nfunction addUpdateIcuSwitch(\n    update: I18nUpdateOpCodes, icuExpression: IcuExpression, index: number) {\n  update.push(\n      toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding,\n      index << I18nUpdateOpCode.SHIFT_REF | I18nUpdateOpCode.IcuSwitch);\n}\n\nfunction addUpdateIcuUpdate(update: I18nUpdateOpCodes, bindingMask: number, index: number) {\n  update.push(bindingMask, 1, index << I18nUpdateOpCode.SHIFT_REF | I18nUpdateOpCode.IcuUpdate);\n}\n\nfunction addCreateNodeAndAppend(\n    create: IcuCreateOpCodes, marker: null|ICU_MARKER|ELEMENT_MARKER, text: string,\n    appendToParentIdx: number, createAtIdx: number) {\n  if (marker !== null) {\n    create.push(marker);\n  }\n  create.push(\n      text, createAtIdx,\n      icuCreateOpCode(IcuCreateOpCode.AppendChild, appendToParentIdx, createAtIdx));\n}\n\nfunction addCreateAttribute(create: IcuCreateOpCodes, newIndex: number, attr: Attr) {\n  create.push(newIndex << IcuCreateOpCode.SHIFT_REF | IcuCreateOpCode.Attr, attr.name, attr.value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n\n// Parsed placeholder structure used in postprocessing (within `i18nPostprocess` function)\n// Contains the following fields: [templateId, isCloseTemplateTag, placeholder]\ntype PostprocessPlaceholder = [number, boolean, string];\n\n\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nexport function i18nPostprocess(\n    message: string, replacements: {[key: string]: (string|string[])} = {}): string {\n  /**\n   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n   *\n   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n   * front of �#6�. The post processing step restores the right order by keeping track of the\n   * template id stack and looks for placeholders that belong to the currently active template.\n   */\n  let result: string = message;\n  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n    const matches: {[key: string]: PostprocessPlaceholder[]} = {};\n    const templateIdsStack: number[] = [ROOT_TEMPLATE_ID];\n    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m: any, phs: string, tmpl: string): string => {\n      const content = phs || tmpl;\n      const placeholders: PostprocessPlaceholder[] = matches[content] || [];\n      if (!placeholders.length) {\n        content.split('|').forEach((placeholder: string) => {\n          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n          placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n        });\n        matches[content] = placeholders;\n      }\n\n      if (!placeholders.length) {\n        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n      }\n\n      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n      let idx = 0;\n      // find placeholder index that matches current template id\n      for (let i = 0; i < placeholders.length; i++) {\n        if (placeholders[i][0] === currentTemplateId) {\n          idx = i;\n          break;\n        }\n      }\n      // update template id stack based on the current tag extracted\n      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n      if (isCloseTemplateTag) {\n        templateIdsStack.pop();\n      } else if (currentTemplateId !== templateId) {\n        templateIdsStack.push(templateId);\n      }\n      // remove processed tag from the list\n      placeholders.splice(idx, 1);\n      return placeholder;\n    });\n  }\n\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n\n  /**\n   * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n   */\n  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end): string => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n\n  /**\n   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n   */\n  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key): string => {\n    return replacements.hasOwnProperty(key) ? replacements[key] as string : match;\n  });\n\n  /**\n   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n   * multiple ICUs have the same placeholder name\n   */\n  result = result.replace(PP_ICUS_REGEXP, (match, key): string => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key] as string[];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return list.shift()!;\n    }\n    return match;\n  });\n\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../../util/ng_dev_mode';\nimport '../../util/ng_i18n_closure_mode';\n\nimport {assertDefined} from '../../util/assert';\nimport {bindingUpdated} from '../bindings';\nimport {applyCreateOpCodes, applyI18n, setMaskBit} from '../i18n/i18n_apply';\nimport {i18nAttributesFirstPass, i18nStartFirstCreatePass} from '../i18n/i18n_parse';\nimport {i18nPostprocess} from '../i18n/i18n_postprocess';\nimport {TI18n} from '../interfaces/i18n';\nimport {TElementNode, TNodeType} from '../interfaces/node';\nimport {HEADER_OFFSET, T_HOST} from '../interfaces/view';\nimport {getClosestRElement} from '../node_manipulation';\nimport {getCurrentParentTNode, getLView, getTView, nextBindingIndex, setInI18nBlock} from '../state';\nimport {getConstant} from '../util/view_utils';\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nexport function ɵɵi18nStart(\n    index: number, messageIndex: number, subTemplateIndex: number = -1): void {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const message = getConstant<string>(tView.consts, messageIndex)!;\n  const parentTNode = getCurrentParentTNode() as TElementNode | null;\n  if (tView.firstCreatePass) {\n    i18nStartFirstCreatePass(\n        tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message,\n        subTemplateIndex);\n  }\n  const tI18n = tView.data[adjustedIndex] as TI18n;\n  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n  // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n  const insertInFrontOf = parentTNode && (parentTNode.type & TNodeType.ElementContainer) ?\n      lView[parentTNode.index] :\n      null;\n  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n  setInI18nBlock(true);\n}\n\n\n\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nexport function ɵɵi18nEnd(): void {\n  setInI18nBlock(false);\n}\n\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nexport function ɵɵi18n(index: number, messageIndex: number, subTemplateIndex?: number): void {\n  ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n  ɵɵi18nEnd();\n}\n\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nexport function ɵɵi18nAttributes(index: number, attrsIndex: number): void {\n  const tView = getTView();\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const attrs = getConstant<string[]>(tView.consts, attrsIndex)!;\n  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n\n\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵi18nExp<T>(value: T): typeof ɵɵi18nExp {\n  const lView = getLView();\n  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n  return ɵɵi18nExp;\n}\n\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nexport function ɵɵi18nApply(index: number) {\n  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nexport function ɵɵi18nPostprocess(\n    message: string, replacements: {[key: string]: (string|string[])} = {}): string {\n  return i18nPostprocess(message, replacements);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {resolveForwardRef} from '../di/forward_ref';\nimport {ClassProvider, Provider, TypeProvider} from '../di/interface/provider';\nimport {isClassProvider, isTypeProvider, providerToFactory} from '../di/r3_injector';\nimport {assertDefined} from '../util/assert';\n\nimport {diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode} from './di';\nimport {ɵɵdirectiveInject} from './instructions/all';\nimport {DirectiveDef} from './interfaces/definition';\nimport {NodeInjectorFactory} from './interfaces/injector';\nimport {TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TNodeProviderIndexes} from './interfaces/node';\nimport {isComponentDef} from './interfaces/type_checks';\nimport {DestroyHookData, LView, TData, TVIEW, TView} from './interfaces/view';\nimport {getCurrentTNode, getLView, getTView} from './state';\n\n\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nexport function providersResolver<T>(\n    def: DirectiveDef<T>, providers: Provider[], viewProviders: Provider[]): void {\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def);\n\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(\n    provider: Provider, tInjectables: TData, lInjectablesBlueprint: NodeInjectorFactory[],\n    isComponent: boolean, isViewProvider: boolean): void {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(\n          provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    let token: any = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    let providerFactory: () => any = providerToFactory(provider);\n\n    const tNode = getCurrentTNode()!;\n    const beginIndex = tNode.providerIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount =\n        tNode.providerIndexes >> TNodeProviderIndexes.CptViewProvidersCountShift;\n\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n      const existingFactoryIndex = indexOf(\n          token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount,\n          endIndex);\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(\n            getOrCreateNodeInjectorForNode(\n                tNode as TElementNode | TContainerNode | TElementContainerNode, lView),\n            tView, token);\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += TNodeProviderIndexes.CptViewProvidersCountShifter;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n\n      const existingProvidersFactoryIndex =\n          indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      const existingViewProvidersFactoryIndex =\n          indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n          lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n\n      if (isViewProvider && !doesViewProvidersFactoryExist ||\n          !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(\n            getOrCreateNodeInjectorForNode(\n                tNode as TElementNode | TContainerNode | TElementContainerNode, lView),\n            tView, token);\n        const factory = multiFactory(\n            isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver,\n            lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += TNodeProviderIndexes.CptViewProvidersCountShifter;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(\n            lInjectablesBlueprint!\n                [isViewProvider ? existingViewProvidersFactoryIndex :\n                                  existingProvidersFactoryIndex],\n            providerFactory, !isViewProvider && isComponent);\n        registerDestroyHooksIfSupported(\n            tView, provider,\n            existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex :\n                                                 existingViewProvidersFactoryIndex,\n            indexInFactory);\n      }\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders!++;\n      }\n    }\n  }\n}\n\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(\n    tView: TView, provider: Exclude<Provider, any[]>, contextIndex: number,\n    indexInFactory?: number) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  const providerIsClassProvider = isClassProvider(provider);\n\n  if (providerIsTypeProvider || providerIsClassProvider) {\n    // Resolve forward references as `useClass` can hold a forward reference.\n    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n    const prototype = classToken.prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n\n      if (!providerIsTypeProvider && ((provider as ClassProvider)).multi) {\n        ngDevMode &&\n            assertDefined(\n                indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          (hooks[existingCallbacksIndex + 1] as DestroyHookData).push(indexInFactory!, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(\n    multiFactory: NodeInjectorFactory, factory: () => any, isComponentProvider: boolean): number {\n  if (isComponentProvider) {\n    multiFactory.componentProviders!++;\n  }\n  return multiFactory.multi!.push(factory) - 1;\n}\n\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item: any, arr: any[], begin: number, end: number) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(\n    this: NodeInjectorFactory, _: undefined, tData: TData, lData: LView,\n    tNode: TDirectiveHostNode): any[] {\n  return multiResolve(this.multi!, []);\n}\n\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(\n    this: NodeInjectorFactory, _: undefined, tData: TData, lView: LView,\n    tNode: TDirectiveHostNode): any[] {\n  const factories = this.multi!;\n  let result: any[];\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders!;\n    const multiProviders =\n        getNodeInjectable(lView, lView[TVIEW], this.providerFactory!.index!, tNode);\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories: Array<() => any>, result: any[]): any[] {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i]! as () => null;\n    result.push(factory());\n  }\n  return result;\n}\n\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(\n    factoryFn: (\n        this: NodeInjectorFactory, _: undefined, tData: TData, lData: LView,\n        tNode: TDirectiveHostNode) => any,\n    index: number, isViewProvider: boolean, isComponent: boolean,\n    f: () => any): NodeInjectorFactory {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ProcessProvidersFunction, Provider} from '../../di/interface/provider';\nimport {providersResolver} from '../di_setup';\nimport {DirectiveDef} from '../interfaces/definition';\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nexport function ɵɵProvidersFeature<T>(providers: Provider[], viewProviders: Provider[] = []) {\n  return (definition: DirectiveDef<T>) => {\n    definition.providersResolver =\n        (def: DirectiveDef<T>, processProvidersFn?: ProcessProvidersFunction) => {\n          return providersResolver(\n              def,                                                             //\n              processProvidersFn ? processProvidersFn(providers) : providers,  //\n              viewProviders);\n        };\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {NgModuleRef} from './ng_module_factory';\n\nexport function noComponentFactoryError(component: Function) {\n  const error = Error(`No component factory found for ${\n      stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  (error as any)[ERROR_COMPONENT] = component;\n  return error;\n}\n\nconst ERROR_COMPONENT = 'ngComponent';\n\nexport function getComponent(error: Error): Type<any> {\n  return (error as any)[ERROR_COMPONENT];\n}\n\n\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {new(...args: any[]): T}): ComponentFactory<T> {\n    throw noComponentFactoryError(component);\n  }\n}\n\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n */\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = (/* @__PURE__ */ new _NullComponentFactoryResolver());\n  /**\n   * Retrieves the factory object that creates a component of the given type.\n   * @param component The component type.\n   */\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TNode} from '../render3/interfaces/node';\nimport {RElement} from '../render3/interfaces/renderer_dom';\nimport {LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getNativeByTNode} from '../render3/util/view_utils';\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nexport function injectElementRef(): ElementRef {\n  return createElementRef(getCurrentTNode()!, getLView());\n}\n\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nexport function createElementRef(tNode: TNode, lView: LView): ElementRef {\n  return new ElementRef(getNativeByTNode(tNode, lView) as RElement);\n}\n\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nexport class ElementRef<T = any> {\n  /**\n   * The underlying native element or `null` if direct access to native elements is not supported\n   * (e.g. when the application runs in a web worker).\n   *\n   * <div class=\"callout is-critical\">\n   *   <header>Use with caution</header>\n   *   <p>\n   *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n   *    data-binding provided by Angular instead. Alternatively you can take a look at {@link\n   * Renderer2}\n   *    which provides API that can safely be used even when direct access to native elements is not\n   *    supported.\n   *   </p>\n   *   <p>\n   *    Relying on direct DOM access creates tight coupling between your application and rendering\n   *    layers which will make it impossible to separate the two and deploy your application into a\n   *    web worker.\n   *   </p>\n   * </div>\n   *\n   */\n  public nativeElement: T;\n\n  constructor(nativeElement: T) {\n    this.nativeElement = nativeElement;\n  }\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ElementRef = injectElementRef;\n}\n\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nexport function unwrapElementRef<T, R>(value: T|ElementRef<R>): T|R {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵdefineInjectable} from '../di/interface/defs';\nimport {SecurityContext} from './security';\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nexport abstract class Sanitizer {\n  abstract sanitize(context: SecurityContext, value: {}|string|null): string|null;\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable({\n    token: Sanitizer,\n    providedIn: 'root',\n    factory: () => null,\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nexport class Version {\n  public readonly major: string;\n  public readonly minor: string;\n  public readonly patch: string;\n\n  constructor(public full: string) {\n    this.major = full.split('.')[0];\n    this.minor = full.split('.')[1];\n    this.patch = full.split('.').slice(2).join('.');\n  }\n}\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('13.1.2');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nexport const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertParentView} from './assert';\nimport {icuContainerIterate} from './i18n/i18n_tree_shaking';\nimport {CONTAINER_HEADER_OFFSET} from './interfaces/container';\nimport {TIcuContainerNode, TNode, TNodeType} from './interfaces/node';\nimport {RNode} from './interfaces/renderer_dom';\nimport {isLContainer} from './interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, LView, T_HOST, TVIEW, TView} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {getProjectionNodes} from './node_manipulation';\nimport {getLViewParent} from './util/view_traversal_utils';\nimport {unwrapRNode} from './util/view_utils';\n\n\n\nexport function collectNativeNodes(\n    tView: TView, lView: LView, tNode: TNode|null, result: any[],\n    isProjection: boolean = false): any[] {\n  while (tNode !== null) {\n    ngDevMode &&\n        assertTNodeType(\n            tNode,\n            TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Projection | TNodeType.Icu);\n\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {\n        const lViewInAContainer = lNode[i];\n        const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n        if (lViewFirstChildTNode !== null) {\n          collectNativeNodes(\n              lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n        }\n      }\n    }\n\n    const tNodeType = tNode.type;\n    if (tNodeType & TNodeType.ElementContainer) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & TNodeType.Icu) {\n      const nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n      let rNode: RNode|null;\n      while (rNode = nextRNode()) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & TNodeType.Projection) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW])!;\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef as viewEngine_ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {EmbeddedViewRef as viewEngine_EmbeddedViewRef, InternalViewRef as viewEngine_InternalViewRef, ViewRefTracker} from '../linker/view_ref';\nimport {removeFromArray} from '../util/array_utils';\nimport {assertEqual} from '../util/assert';\nimport {collectNativeNodes} from './collect_native_nodes';\nimport {checkNoChangesInRootView, checkNoChangesInternal, detectChangesInRootView, detectChangesInternal, markViewDirty, storeCleanupWithContext} from './instructions/shared';\nimport {CONTAINER_HEADER_OFFSET, VIEW_REFS} from './interfaces/container';\nimport {isLContainer} from './interfaces/type_checks';\nimport {CONTEXT, FLAGS, LView, LViewFlags, PARENT, TVIEW} from './interfaces/view';\nimport {destroyLView, detachView, renderDetachView} from './node_manipulation';\n\n\n\n// Needed due to tsickle downleveling where multiple `implements` with classes creates\n// multiple @extends in Closure annotations, which is illegal. This workaround fixes\n// the multiple @extends by making the annotation @implements instead\nexport interface viewEngine_ChangeDetectorRef_interface extends viewEngine_ChangeDetectorRef {}\n\nexport class ViewRef<T> implements viewEngine_EmbeddedViewRef<T>, viewEngine_InternalViewRef,\n                                   viewEngine_ChangeDetectorRef_interface {\n  private _appRef: ViewRefTracker|null = null;\n  private _attachedToViewContainer = false;\n\n  get rootNodes(): any[] {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n\n  constructor(\n      /**\n       * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n       *\n       * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n       * component.\n       *\n       * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n       * view.\n       *\n       * @internal\n       */\n      public _lView: LView,\n\n      /**\n       * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n       * requested.\n       *\n       * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n       */\n      private _cdRefInjectingView?: LView) {}\n\n  get context(): T {\n    return this._lView[CONTEXT] as T;\n  }\n\n  set context(value: T) {\n    this._lView[CONTEXT] = value;\n  }\n\n  get destroyed(): boolean {\n    return (this._lView[FLAGS] & LViewFlags.Destroyed) === LViewFlags.Destroyed;\n  }\n\n  destroy(): void {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS] as ViewRef<unknown>[] | null;\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode &&\n              assertEqual(\n                  index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET,\n                  'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n          detachView(parent, index);\n          removeFromArray(viewRefs!, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n\n  onDestroy(callback: Function) {\n    storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);\n  }\n\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'app-root',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck(): void {\n    markViewDirty(this._cdRefInjectingView || this._lView);\n  }\n\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach(): void {\n    this._lView[FLAGS] &= ~LViewFlags.Attached;\n  }\n\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app-root',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach(): void {\n    this._lView[FLAGS] |= LViewFlags.Attached;\n  }\n\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach detach} for more information.\n   */\n  detectChanges(): void {\n    detectChangesInternal(this._lView[TVIEW], this._lView, this.context);\n  }\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges(): void {\n    checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);\n  }\n\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new Error('This view is already attached directly to the ApplicationRef!');\n    }\n    this._attachedToViewContainer = true;\n  }\n\n  detachFromAppRef() {\n    this._appRef = null;\n    renderDetachView(this._lView[TVIEW], this._lView);\n  }\n\n  attachToAppRef(appRef: ViewRefTracker) {\n    if (this._attachedToViewContainer) {\n      throw new Error('This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n}\n\n/** @internal */\nexport class RootViewRef<T> extends ViewRef<T> {\n  constructor(public _view: LView) {\n    super(_view);\n  }\n\n  override detectChanges(): void {\n    detectChangesInRootView(this._view);\n  }\n\n  override checkNoChanges(): void {\n    checkNoChangesInRootView(this._view);\n  }\n\n  override get context(): T {\n    return null!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef as ViewEngine_ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {InjectionToken} from '../di/injection_token';\nimport {Injector} from '../di/injector';\nimport {InjectFlags} from '../di/interface/injector';\nimport {ProviderToken} from '../di/provider_token';\nimport {Type} from '../interface/type';\nimport {ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef} from '../linker/component_factory';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {createElementRef, ElementRef as viewEngine_ElementRef} from '../linker/element_ref';\nimport {NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {RendererFactory2} from '../render/api';\nimport {Sanitizer} from '../sanitization/sanitizer';\nimport {VERSION} from '../version';\nimport {NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR} from '../view/provider_flags';\nimport {assertComponentType} from './assert';\nimport {createRootComponent, createRootComponentView, createRootContext, LifecycleHooksFeature} from './component';\nimport {getComponentDef} from './definition';\nimport {NodeInjector} from './di';\nimport {createLView, createTView, locateHostElement, renderView} from './instructions/shared';\nimport {ComponentDef} from './interfaces/definition';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode} from './interfaces/node';\nimport {domRendererFactory3, RendererFactory3} from './interfaces/renderer';\nimport {RNode} from './interfaces/renderer_dom';\nimport {HEADER_OFFSET, LView, LViewFlags, TViewType} from './interfaces/view';\nimport {MATH_ML_NAMESPACE, SVG_NAMESPACE} from './namespaces';\nimport {createElementNode, writeDirectClass} from './node_manipulation';\nimport {extractAttrsAndClassesFromSelector, stringifyCSSSelectorList} from './node_selector_matcher';\nimport {enterView, leaveView} from './state';\nimport {setUpAttributes} from './util/attrs_utils';\nimport {defaultScheduler} from './util/misc_utils';\nimport {getTNode} from './util/view_utils';\nimport {RootViewRef, ViewRef} from './view_ref';\n\nexport class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(private ngModule?: viewEngine_NgModuleRef<any>) {\n    super();\n  }\n\n  override resolveComponentFactory<T>(component: Type<T>): viewEngine_ComponentFactory<T> {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component)!;\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\n\nfunction toRefArray(map: {[key: string]: string}): {propName: string; templateName: string;}[] {\n  const array: {propName: string; templateName: string;}[] = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({propName: minified, templateName: nonMinified});\n    }\n  }\n  return array;\n}\n\nfunction getNamespace(elementName: string): string|null {\n  const name = elementName.toLowerCase();\n  return name === 'svg' ? SVG_NAMESPACE : (name === 'math' ? MATH_ML_NAMESPACE : null);\n}\n\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport const SCHEDULER = new InjectionToken<((fn: () => void) => void)>('SCHEDULER_TOKEN', {\n  providedIn: 'root',\n  factory: () => defaultScheduler,\n});\n\nfunction createChainedInjector(rootViewInjector: Injector, moduleInjector: Injector): Injector {\n  return {\n    get: <T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags): T => {\n      const value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as T, flags);\n\n      if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n          notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n      }\n\n      return moduleInjector.get(token, notFoundValue, flags);\n    }\n  };\n}\n\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nexport class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n  override selector: string;\n  override componentType: Type<any>;\n  override ngContentSelectors: string[];\n  isBoundToModule: boolean;\n\n  override get inputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.inputs);\n  }\n\n  override get outputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.outputs);\n  }\n\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(\n      private componentDef: ComponentDef<any>, private ngModule?: viewEngine_NgModuleRef<any>) {\n    super();\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors =\n        componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n    this.isBoundToModule = !!ngModule;\n  }\n\n  override create(\n      injector: Injector, projectableNodes?: any[][]|undefined, rootSelectorOrNode?: any,\n      ngModule?: viewEngine_NgModuleRef<any>|undefined): viewEngine_ComponentRef<T> {\n    ngModule = ngModule || this.ngModule;\n\n    const rootViewInjector =\n        ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n\n    const rendererFactory =\n        rootViewInjector.get(RendererFactory2, domRendererFactory3) as RendererFactory3;\n    const sanitizer = rootViewInjector.get(Sanitizer, null);\n\n    const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);\n    // Determine a tag name used for creating host elements when this component is created\n    // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n    const elementName = this.componentDef.selectors[0][0] as string || 'div';\n    const hostRNode = rootSelectorOrNode ?\n        locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) :\n        createElementNode(\n            rendererFactory.createRenderer(null, this.componentDef), elementName,\n            getNamespace(elementName));\n\n    const rootFlags = this.componentDef.onPush ? LViewFlags.Dirty | LViewFlags.IsRoot :\n                                                 LViewFlags.CheckAlways | LViewFlags.IsRoot;\n    const rootContext = createRootContext();\n\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootTView = createTView(TViewType.Root, null, null, 1, 0, null, null, null, null, null);\n    const rootLView = createLView(\n        null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer,\n        sanitizer, rootViewInjector);\n\n    // rootView is the parent when bootstrapping\n    // TODO(misko): it looks like we are entering view here but we don't really need to as\n    // `renderView` does that. However as the code is written it is needed because\n    // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n    // issues would allow us to drop this.\n    enterView(rootLView);\n\n    let component: T;\n    let tElementNode: TElementNode;\n\n    try {\n      const componentView = createRootComponentView(\n          hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);\n      if (hostRNode) {\n        if (rootSelectorOrNode) {\n          setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);\n        } else {\n          // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n          // is not defined), also apply attributes and classes extracted from component selector.\n          // Extract attributes and classes from the first selector only to match VE behavior.\n          const {attrs, classes} =\n              extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]);\n          if (attrs) {\n            setUpAttributes(hostRenderer, hostRNode, attrs);\n          }\n          if (classes && classes.length > 0) {\n            writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n          }\n        }\n      }\n\n      tElementNode = getTNode(rootTView, HEADER_OFFSET) as TElementNode;\n\n      if (projectableNodes !== undefined) {\n        const projection: (TNode|RNode[]|null)[] = tElementNode.projection = [];\n        for (let i = 0; i < this.ngContentSelectors.length; i++) {\n          const nodesforSlot = projectableNodes[i];\n          // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n          // case). Here we do normalize passed data structure to be an array of arrays to avoid\n          // complex checks down the line.\n          // We also normalize the length of the passed in projectable nodes (to match the number of\n          // <ng-container> slots defined by a component).\n          projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n        }\n      }\n\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      component = createRootComponent(\n          componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n\n      renderView(rootTView, rootLView, null);\n    } finally {\n      leaveView();\n    }\n\n    return new ComponentRef(\n        this.componentType, component, createElementRef(tElementNode, rootLView), rootLView,\n        tElementNode);\n  }\n}\n\nconst componentFactoryResolver: ComponentFactoryResolver = new ComponentFactoryResolver();\n\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver(): viewEngine_ComponentFactoryResolver {\n  return componentFactoryResolver;\n}\n\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n  override instance: T;\n  override hostView: ViewRef<T>;\n  override changeDetectorRef: ViewEngine_ChangeDetectorRef;\n  override componentType: Type<T>;\n\n  constructor(\n      componentType: Type<T>, instance: T, public location: viewEngine_ElementRef,\n      private _rootLView: LView,\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode) {\n    super();\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new RootViewRef<T>(_rootLView);\n    this.componentType = componentType;\n  }\n\n  override get injector(): Injector {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n\n  override destroy(): void {\n    this.hostView.destroy();\n  }\n\n  override onDestroy(callback: () => void): void {\n    this.hostView.onDestroy(callback);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '../interface/type';\nimport {NgModuleType} from '../metadata/ng_module_def';\nimport {autoRegisterModuleById, getNgModuleDef} from '../render3/definition';\nimport {maybeUnwrapFn} from '../render3/util/misc_utils';\nimport {stringify} from '../util/stringify';\n\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n/**\n * Map of module-id to the corresponding NgModule.\n * - In pre Ivy we track NgModuleFactory,\n * - In post Ivy we track the NgModuleType\n */\nconst modules = new Map<string, NgModuleFactory<any>|NgModuleType>();\n\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * @publicApi\n */\nexport function registerModuleFactory(id: string, factory: NgModuleFactory<any>) {\n  const existing = modules.get(id) as NgModuleFactory<any>;\n  assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n  modules.set(id, factory);\n}\n\nfunction assertSameOrNotExisting(id: string, type: Type<any>|null, incoming: Type<any>): void {\n  if (type && type !== incoming) {\n    throw new Error(\n        `Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n\nexport function registerNgModuleType(ngModuleType: NgModuleType): void {\n  const visited = new Set<NgModuleType>();\n  recurse(ngModuleType);\n  function recurse(ngModuleType: NgModuleType): void {\n    // The imports array of an NgModule must refer to other NgModules,\n    // so an error is thrown if no module definition is available.\n    const def = getNgModuleDef(ngModuleType, /* throwNotFound */ true);\n    const id = def.id;\n    if (id !== null) {\n      const existing = modules.get(id) as NgModuleType | null;\n      assertSameOrNotExisting(id, existing, ngModuleType);\n      modules.set(id, ngModuleType);\n    }\n\n    const imports = maybeUnwrapFn(def.imports) as NgModuleType[];\n    for (const i of imports) {\n      if (!visited.has(i)) {\n        visited.add(i);\n        recurse(i);\n      }\n    }\n  }\n}\n\nexport function clearModulesForTest(): void {\n  modules.clear();\n}\n\nexport function getRegisteredNgModuleType<T extends NgModuleFactory<unknown>|NgModuleType>(\n    id: string): T|undefined {\n  return (modules.get(id) || autoRegisterModuleById[id]) as T | undefined;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {INJECTOR} from '../di/injector_token';\nimport {InjectFlags} from '../di/interface/injector';\nimport {createInjectorWithoutInjectorInstances, R3Injector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {registerNgModuleType} from '../linker/ng_module_factory_registration';\nimport {NgModuleType} from '../metadata/ng_module_def';\nimport {assertDefined} from '../util/assert';\nimport {stringify} from '../util/stringify';\n\nimport {ComponentFactoryResolver} from './component_ref';\nimport {getNgModuleDef} from './definition';\nimport {maybeUnwrapFn} from './util/misc_utils';\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @publicApi\n */\nexport function createNgModuleRef<T>(\n    ngModule: Type<T>, parentInjector?: Injector): viewEngine_NgModuleRef<T> {\n  return new NgModuleRef<T>(ngModule, parentInjector ?? null);\n}\nexport class NgModuleRef<T> extends viewEngine_NgModuleRef<T> implements InternalNgModuleRef<T> {\n  // tslint:disable-next-line:require-internal-with-underscore\n  _bootstrapComponents: Type<any>[] = [];\n  // tslint:disable-next-line:require-internal-with-underscore\n  _r3Injector: R3Injector;\n  override injector: Injector = this;\n  override instance: T;\n  destroyCbs: (() => void)[]|null = [];\n\n  // When bootstrapping a module we have a dependency graph that looks like this:\n  // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n  // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n  // circular dependency which will result in a runtime error, because the injector doesn't\n  // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n  // and providing it, rather than letting the injector resolve it.\n  override readonly componentFactoryResolver: ComponentFactoryResolver =\n      new ComponentFactoryResolver(this);\n\n  constructor(ngModuleType: Type<T>, public _parent: Injector|null) {\n    super();\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode &&\n        assertDefined(\n            ngModuleDef,\n            `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n\n    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef!.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(\n                           ngModuleType, _parent,\n                           [\n                             {provide: viewEngine_NgModuleRef, useValue: this}, {\n                               provide: viewEngine_ComponentFactoryResolver,\n                               useValue: this.componentFactoryResolver\n                             }\n                           ],\n                           stringify(ngModuleType)) as R3Injector;\n\n    // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its constructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n    this._r3Injector._resolveInjectorDefTypes();\n    this.instance = this.get(ngModuleType);\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND,\n      injectFlags: InjectFlags = InjectFlags.Default): any {\n    if (token === Injector || token === viewEngine_NgModuleRef || token === INJECTOR) {\n      return this;\n    }\n    return this._r3Injector.get(token, notFoundValue, injectFlags);\n  }\n\n  override destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs!.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  override onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs!.push(callback);\n  }\n}\n\nexport class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n  constructor(public moduleType: Type<T>) {\n    super();\n\n    const ngModuleDef = getNgModuleDef(moduleType);\n    if (ngModuleDef !== null) {\n      // Register the NgModule with Angular's module registry. The location (and hence timing) of\n      // this call is critical to ensure this works correctly (modules get registered when expected)\n      // without bloating bundles (modules are registered when otherwise not referenced).\n      //\n      // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has\n      // several practical consequences:\n      //\n      // - If an .ngfactory file is not imported from, the module won't be registered (and can be\n      //   tree shaken).\n      // - If an .ngfactory file is imported from, the module will be registered even if an instance\n      //   is not actually created (via `create` below).\n      // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's\n      //   imports,\n      //\n      // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are\n      // not a required API to use - there are other ways to obtain an NgModuleFactory for a given\n      // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,\n      // the side effect of registration is added here, in the constructor of NgModuleFactory,\n      // ensuring no matter how a factory is created, the module is registered correctly.\n      //\n      // An alternative would be to include the registration side effect inline following the actual\n      // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules\n      // will be registered and retained even if they're otherwise never referenced.\n      registerNgModuleType(moduleType as NgModuleType);\n    }\n  }\n\n  override create(parentInjector: Injector|null): viewEngine_NgModuleRef<T> {\n    return new NgModuleRef(this.moduleType, parentInjector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertIndexInRange} from '../util/assert';\nimport {bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4, getBinding, updateBinding} from './bindings';\nimport {LView} from './interfaces/view';\nimport {getBindingRoot, getLView} from './state';\nimport {NO_CHANGE} from './tokens';\n\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE ?\n      updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n      getBinding(lView, bindingIndex);\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction1(\n    slotOffset: number, pureFn: (v: any) => any, exp: any, thisArg?: any): any {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction2(\n    slotOffset: number, pureFn: (v1: any, v2: any) => any, exp1: any, exp2: any,\n    thisArg?: any): any {\n  return pureFunction2Internal(\n      getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction3(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any,\n    thisArg?: any): any {\n  return pureFunction3Internal(\n      getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction4(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any,\n    exp3: any, exp4: any, thisArg?: any): any {\n  return pureFunction4Internal(\n      getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction5(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n      updateBinding(\n          lView, bindingIndex + 5,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5)) :\n      getBinding(lView, bindingIndex + 5);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction6(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n      updateBinding(\n          lView, bindingIndex + 6,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n      getBinding(lView, bindingIndex + 6);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction7(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n      updateBinding(\n          lView, bindingIndex + 7,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n      getBinding(lView, bindingIndex + 7);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction8(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, exp8: any,\n    thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n      updateBinding(\n          lView, bindingIndex + 8,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n      getBinding(lView, bindingIndex + 8);\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunctionV(\n    slotOffset: number, pureFn: (...v: any[]) => any, exps: any[], thisArg?: any): any {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView: LView, returnValueIndex: number) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction1Internal(\n    lView: LView, bindingRoot: number, slotOffset: number, pureFn: (v: any) => any, exp: any,\n    thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ?\n      updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction2Internal(\n    lView: LView, bindingRoot: number, slotOffset: number, pureFn: (v1: any, v2: any) => any,\n    exp1: any, exp2: any, thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n      updateBinding(\n          lView, bindingIndex + 2,\n          thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction3Internal(\n    lView: LView, bindingRoot: number, slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any,\n    thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n      updateBinding(\n          lView, bindingIndex + 3,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nexport function pureFunction4Internal(\n    lView: LView, bindingRoot: number, slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any, exp3: any, exp4: any,\n    thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n      updateBinding(\n          lView, bindingIndex + 4,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunctionVInternal(\n    lView: LView, bindingRoot: number, slotOffset: number, pureFn: (...v: any[]) => any,\n    exps: any[], thisArg?: any): any {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n                     getPureFunctionReturnValue(lView, bindingIndex);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PipeTransform} from '../change_detection/pipe_transform';\nimport {setInjectImplementation} from '../di/inject_switch';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\n\nimport {getFactoryDef} from './definition_factory';\nimport {setIncludeViewProviders} from './di';\nimport {store, ɵɵdirectiveInject} from './instructions/all';\nimport {PipeDef, PipeDefList} from './interfaces/definition';\nimport {CONTEXT, DECLARATION_COMPONENT_VIEW, HEADER_OFFSET, LView, TVIEW} from './interfaces/view';\nimport {pureFunction1Internal, pureFunction2Internal, pureFunction3Internal, pureFunction4Internal, pureFunctionVInternal} from './pure_function';\nimport {getBindingRoot, getLView, getTView} from './state';\nimport {load} from './util/view_utils';\n\n\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nexport function ɵɵpipe(index: number, pipeName: string): any {\n  const tView = getTView();\n  let pipeDef: PipeDef<any>;\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  if (tView.firstCreatePass) {\n    // The `getPipeDef` throws if a pipe with a given name is not found\n    // (so we use non-null assertion below).\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry)!;\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex] as PipeDef<any>;\n  }\n\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name: string, registry: PipeDefList|null): PipeDef<any>|undefined {\n  if (registry) {\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  if (ngDevMode) {\n    const lView = getLView();\n    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n    const context = declarationLView[CONTEXT];\n    const component = context ? ` in the '${context.constructor.name}' component` : '';\n    throw new RuntimeError(\n        RuntimeErrorCode.PIPE_NOT_FOUND, `The pipe '${name}' could not be found${component}!`);\n  }\n}\n\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind1(index: number, slotOffset: number, v1: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ?\n      pureFunction1Internal(\n          lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) :\n      pipeInstance.transform(v1);\n}\n\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind2(index: number, slotOffset: number, v1: any, v2: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ?\n      pureFunction2Internal(\n          lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n      pipeInstance.transform(v1, v2);\n}\n\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind3(index: number, slotOffset: number, v1: any, v2: any, v3: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ?\n      pureFunction3Internal(\n          lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n      pipeInstance.transform(v1, v2, v3);\n}\n\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind4(\n    index: number, slotOffset: number, v1: any, v2: any, v3: any, v4: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction4Internal(\n                                            lView, getBindingRoot(), slotOffset,\n                                            pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n                                        pipeInstance.transform(v1, v2, v3, v4);\n}\n\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBindV(index: number, slotOffset: number, values: [any, ...any[]]): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ?\n      pureFunctionVInternal(\n          lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) :\n      pipeInstance.transform.apply(pipeInstance, values);\n}\n\nfunction isPure(lView: LView, index: number): boolean {\n  return (<PipeDef<any>>lView[TVIEW].data[index]).pure;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"rxjs\" />\n\nimport {PartialObserver, Subject, Subscription} from 'rxjs';\n\n/**\n * Use in components with the `@Output` directive to emit custom events\n * synchronously or asynchronously, and register handlers for those events\n * by subscribing to an instance.\n *\n * @usageNotes\n *\n * Extends\n * [RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)\n * for Angular by adding the `emit()` method.\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```html\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```html\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * @see [Observables in Angular](guide/observables-in-angular)\n * @publicApi\n */\nexport interface EventEmitter<T> extends Subject<T> {\n  /**\n   * @internal\n   */\n  __isAsync: boolean;\n\n  /**\n   * Creates an instance of this class that can\n   * deliver events synchronously or asynchronously.\n   *\n   * @param [isAsync=false] When true, deliver events asynchronously.\n   *\n   */\n  new(isAsync?: boolean): EventEmitter<T>;\n\n  /**\n   * Emits an event containing a given value.\n   * @param value The value to emit.\n   */\n  emit(value?: T): void;\n\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param next When supplied, a custom handler for emitted events.\n   * @param error When supplied, a custom handler for an error notification from this emitter.\n   * @param complete When supplied, a custom handler for a completion notification from this\n   *     emitter.\n   */\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void):\n      Subscription;\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param observerOrNext When supplied, a custom handler for emitted events, or an observer\n   *     object.\n   * @param error When supplied, a custom handler for an error notification from this emitter.\n   * @param complete When supplied, a custom handler for a completion notification from this\n   *     emitter.\n   */\n  subscribe(observerOrNext?: any, error?: any, complete?: any): Subscription;\n}\n\nclass EventEmitter_ extends Subject<any> {\n  __isAsync: boolean;  // tslint:disable-line\n\n  constructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n\n  emit(value?: any) {\n    super.next(value);\n  }\n\n  override subscribe(observerOrNext?: any, error?: any, complete?: any): Subscription {\n    let nextFn = observerOrNext;\n    let errorFn = error || (() => null);\n    let completeFn = complete;\n\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      const observer = observerOrNext as PartialObserver<unknown>;\n      nextFn = observer.next?.bind(observer);\n      errorFn = observer.error?.bind(observer);\n      completeFn = observer.complete?.bind(observer);\n    }\n\n    if (this.__isAsync) {\n      errorFn = _wrapInTimeout(errorFn);\n\n      if (nextFn) {\n        nextFn = _wrapInTimeout(nextFn);\n      }\n\n      if (completeFn) {\n        completeFn = _wrapInTimeout(completeFn);\n      }\n    }\n\n    const sink = super.subscribe({next: nextFn, error: errorFn, complete: completeFn});\n\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n\n    return sink;\n  }\n}\n\nfunction _wrapInTimeout(fn: (value: unknown) => any) {\n  return (value: unknown) => {\n    setTimeout(fn, undefined, value);\n  };\n}\n\n/**\n * @publicApi\n */\nexport const EventEmitter: {\n  new (isAsync?: boolean): EventEmitter<any>; new<T>(isAsync?: boolean): EventEmitter<T>;\n  readonly prototype: EventEmitter<any>;\n} = EventEmitter_ as any;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {EventEmitter} from '../event_emitter';\nimport {arrayEquals, flatten} from '../util/array_utils';\nimport {getSymbolIterator} from '../util/symbol';\n\nfunction symbolIterator<T>(this: QueryList<T>): Iterator<T> {\n  return ((this as any as {_results: Array<T>})._results as any)[getSymbolIterator()]();\n}\n\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nexport class QueryList<T> implements Iterable<T> {\n  public readonly dirty = true;\n  private _results: Array<T> = [];\n  private _changesDetected: boolean = false;\n  private _changes: EventEmitter<QueryList<T>>|null = null;\n\n  readonly length: number = 0;\n  readonly first: T = undefined!;\n  readonly last: T = undefined!;\n\n  /**\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n   */\n  get changes(): Observable<any> {\n    return this._changes || (this._changes = new EventEmitter());\n  }\n\n  /**\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n   *     the same result)\n   */\n  constructor(private _emitDistinctChangesOnly: boolean = false) {\n    // This function should be declared on the prototype, but doing so there will cause the class\n    // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n    // the constructor.\n    // [getSymbolIterator()](): Iterator<T> { ... }\n    const symbol = getSymbolIterator();\n    const proto = QueryList.prototype as any;\n    if (!proto[symbol]) proto[symbol] = symbolIterator;\n  }\n\n  /**\n   * Returns the QueryList entry at `index`.\n   */\n  get(index: number): T|undefined {\n    return this._results[index];\n  }\n\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map<U>(fn: (item: T, index: number, array: T[]) => U): U[] {\n    return this._results.map(fn);\n  }\n\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n  filter(fn: (item: T, index: number, array: T[]) => boolean): T[] {\n    return this._results.filter(fn);\n  }\n\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn: (item: T, index: number, array: T[]) => boolean): T|undefined {\n    return this._results.find(fn);\n  }\n\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U {\n    return this._results.reduce(fn, init);\n  }\n\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn: (item: T, index: number, array: T[]) => void): void {\n    this._results.forEach(fn);\n  }\n\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn: (value: T, index: number, array: T[]) => boolean): boolean {\n    return this._results.some(fn);\n  }\n\n  /**\n   * Returns a copy of the internal results list as an Array.\n   */\n  toArray(): T[] {\n    return this._results.slice();\n  }\n\n  toString(): string {\n    return this._results.toString();\n  }\n\n  /**\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n   * on change detection, it will not notify of changes to the queries, unless a new change\n   * occurs.\n   *\n   * @param resultsTree The query results to store\n   * @param identityAccessor Optional function for extracting stable object identity from a value\n   *    in the array. This function is executed for each element of the query result list while\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\n   *    function) to detect if the lists are different. If the function is not provided, elements\n   *    are compared as is (without any pre-processing).\n   */\n  reset(resultsTree: Array<T|any[]>, identityAccessor?: (value: T) => unknown): void {\n    // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of\n    // QueryList (but not for QueryList itself.)\n    const self = this as QueryListInternal<T>;\n    (self as {dirty: boolean}).dirty = false;\n    const newResultFlat = flatten(resultsTree);\n    if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {\n      self._results = newResultFlat;\n      self.length = newResultFlat.length;\n      self.last = newResultFlat[this.length - 1];\n      self.first = newResultFlat[0];\n    }\n  }\n\n  /**\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n   */\n  notifyOnChanges(): void {\n    if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly))\n      this._changes.emit(this);\n  }\n\n  /** internal */\n  setDirty() {\n    (this as {dirty: boolean}).dirty = true;\n  }\n\n  /** internal */\n  destroy(): void {\n    (this.changes as EventEmitter<any>).complete();\n    (this.changes as EventEmitter<any>).unsubscribe();\n  }\n\n  // The implementation of `Symbol.iterator` should be declared here, but this would cause\n  // tree-shaking issues with `QueryList. So instead, it's added in the constructor (see comments\n  // there) and this declaration is left here to ensure that TypeScript considers QueryList to\n  // implement the Iterable interface. This is required for template type-checking of NgFor loops\n  // over QueryLists to work correctly, since QueryList must be assignable to NgIterable.\n  [Symbol.iterator]!: () => Iterator<T>;\n}\n\n/**\n * Internal set of APIs used by the framework. (not to be made public)\n */\ninterface QueryListInternal<T> extends QueryList<T> {\n  reset(a: any[]): void;\n  notifyOnChanges(): void;\n  length: number;\n  last: T;\n  first: T;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertLContainer} from '../render3/assert';\nimport {createLView, renderView} from '../render3/instructions/shared';\nimport {TContainerNode, TNode, TNodeType} from '../render3/interfaces/node';\nimport {DECLARATION_LCONTAINER, LView, LViewFlags, QUERIES, TView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {ViewRef as R3_ViewRef} from '../render3/view_ref';\nimport {assertDefined} from '../util/assert';\n\nimport {createElementRef, ElementRef} from './element_ref';\nimport {EmbeddedViewRef} from './view_ref';\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nexport abstract class TemplateRef<C> {\n  /**\n   * The anchor element in the parent view for this embedded view.\n   *\n   * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n   * inherit from the contexts of this location.\n   *\n   * Typically new embedded views are attached to the view container of this location, but in\n   * advanced use-cases, the view can be attached to a different container while keeping the\n   * data-binding and injection context from the original location.\n   *\n   */\n  // TODO(i): rename to anchor or location\n  abstract readonly elementRef: ElementRef;\n\n  /**\n   * Instantiates an embedded view based on this template,\n   * and attaches it to the view container.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @returns The new embedded view object.\n   */\n  abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => TemplateRef<any>| null = injectTemplateRef;\n}\n\nconst ViewEngineTemplateRef = TemplateRef;\n\n// TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\nconst R3TemplateRef = class TemplateRef<T> extends ViewEngineTemplateRef<T> {\n  constructor(\n      private _declarationLView: LView, private _declarationTContainer: TContainerNode,\n      public override elementRef: ElementRef) {\n    super();\n  }\n\n  override createEmbeddedView(context: T): EmbeddedViewRef<T> {\n    const embeddedTView = this._declarationTContainer.tViews as TView;\n    const embeddedLView = createLView(\n        this._declarationLView, embeddedTView, context, LViewFlags.CheckAlways, null,\n        embeddedTView.declTNode, null, null, null, null);\n\n    const declarationLContainer = this._declarationLView[this._declarationTContainer.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n\n    const declarationViewLQueries = this._declarationLView[QUERIES];\n    if (declarationViewLQueries !== null) {\n      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n\n    renderView(embeddedTView, embeddedLView, context);\n\n    return new R3_ViewRef<T>(embeddedLView);\n  }\n};\n\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport function injectTemplateRef<T>(): TemplateRef<T>|null {\n  return createTemplateRef<T>(getCurrentTNode()!, getLView());\n}\n\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nexport function createTemplateRef<T>(hostTNode: TNode, hostLView: LView): TemplateRef<T>|null {\n  if (hostTNode.type & TNodeType.Container) {\n    ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n    return new R3TemplateRef(\n        hostLView, hostTNode as TContainerNode, createElementRef(hostTNode, hostLView));\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {isType, Type} from '../interface/type';\nimport {assertNodeInjector} from '../render3/assert';\nimport {ComponentFactory as R3ComponentFactory} from '../render3/component_ref';\nimport {getComponentDef} from '../render3/definition';\nimport {getParentInjectorLocation, NodeInjector} from '../render3/di';\nimport {addToViewTree, createLContainer} from '../render3/instructions/shared';\nimport {CONTAINER_HEADER_OFFSET, LContainer, NATIVE, VIEW_REFS} from '../render3/interfaces/container';\nimport {NodeInjectorOffset} from '../render3/interfaces/injector';\nimport {TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TNodeType} from '../render3/interfaces/node';\nimport {RComment, RElement} from '../render3/interfaces/renderer_dom';\nimport {isLContainer} from '../render3/interfaces/type_checks';\nimport {LView, PARENT, RENDERER, T_HOST, TVIEW} from '../render3/interfaces/view';\nimport {assertTNodeType} from '../render3/node_assert';\nimport {addViewToContainer, destroyLView, detachView, getBeforeNodeForView, insertView, nativeInsertBefore, nativeNextSibling, nativeParentNode} from '../render3/node_manipulation';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getParentInjectorIndex, getParentInjectorView, hasParentInjector} from '../render3/util/injector_utils';\nimport {getNativeByTNode, unwrapRNode, viewAttachedToContainer} from '../render3/util/view_utils';\nimport {ViewRef as R3ViewRef} from '../render3/view_ref';\nimport {addToArray, removeFromArray} from '../util/array_utils';\nimport {assertDefined, assertEqual, assertGreaterThan, assertLessThan} from '../util/assert';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {createElementRef, ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {TemplateRef} from './template_ref';\nimport {EmbeddedViewRef, ViewRef} from './view_ref';\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nexport abstract class ViewContainerRef {\n  /**\n   * Anchor element that specifies the location of this container in the containing view.\n   * Each view container can have only one anchor element, and each anchor element\n   * can have only a single view container.\n   *\n   * Root elements of views attached to this container become siblings of the anchor element in\n   * the rendered view.\n   *\n   * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n   * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n   *\n   * <!-- TODO: rename to anchorElement -->\n   */\n  abstract get element(): ElementRef;\n\n  /**\n   * The [dependency injector](guide/glossary#injector) for this view container.\n   */\n  abstract get injector(): Injector;\n\n  /** @deprecated No replacement */\n  abstract get parentInjector(): Injector;\n\n  /**\n   * Destroys all views in this container.\n   */\n  abstract clear(): void;\n\n  /**\n   * Retrieves a view from this container.\n   * @param index The 0-based index of the view to retrieve.\n   * @returns The `ViewRef` instance, or null if the index is out of range.\n   */\n  abstract get(index: number): ViewRef|null;\n\n  /**\n   * Reports how many views are currently attached to this container.\n   * @returns The number of views.\n   */\n  abstract get length(): number;\n\n  /**\n   * Instantiates an embedded view and inserts it\n   * into this container.\n   * @param templateRef The HTML template that defines the view.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @param index The 0-based index at which to insert the new view into this container.\n   * If not specified, appends the new view as the last entry.\n   *\n   * @returns The `ViewRef` instance for the newly created view.\n   */\n  abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):\n      EmbeddedViewRef<C>;\n\n  /**\n   * Instantiates a single component and inserts its host view into this container.\n   *\n   * @param componentType Component Type to use.\n   * @param options An object that contains extra parameters:\n   *  * index: the index at which to insert the new component's host view into this container.\n   *           If not specified, appends the new view as the last entry.\n   *  * injector: the injector to use as the parent for the new component.\n   *  * ngModuleRef: an NgModuleRef of the component's NgModule, you should almost always provide\n   *                 this to ensure that all expected providers are available for the component\n   *                 instantiation.\n   *  * projectableNodes: list of DOM nodes that should be projected through\n   *                      [`<ng-content>`](api/core/ng-content) of the new component instance.\n   *\n   * @returns The new `ComponentRef` which contains the component instance and the host view.\n   */\n  abstract createComponent<C>(componentType: Type<C>, options?: {\n    index?: number,\n    injector?: Injector,\n    ngModuleRef?: NgModuleRef<unknown>,\n    projectableNodes?: Node[][],\n  }): ComponentRef<C>;\n\n  /**\n   * Instantiates a single component and inserts its host view into this container.\n   *\n   * @param componentFactory Component factory to use.\n   * @param index The index at which to insert the new component's host view into this container.\n   * If not specified, appends the new view as the last entry.\n   * @param injector The injector to use as the parent for the new component.\n   * @param projectableNodes List of DOM nodes that should be projected through\n   *     [`<ng-content>`](api/core/ng-content) of the new component instance.\n   * @param ngModuleRef An instance of the NgModuleRef that represent an NgModule.\n   * This information is used to retrieve corresponding NgModule injector.\n   *\n   * @returns The new `ComponentRef` which contains the component instance and the host view.\n   *\n   * @deprecated Angular no longer requires component factories to dynamically create components.\n   *     Use different signature of the `createComponent` method, which allows passing\n   *     Component class directly.\n   */\n  abstract createComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][], ngModuleRef?: NgModuleRef<any>): ComponentRef<C>;\n\n  /**\n   * Inserts a view into this container.\n   * @param viewRef The view to insert.\n   * @param index The 0-based index at which to insert the view.\n   * If not specified, appends the new view as the last entry.\n   * @returns The inserted `ViewRef` instance.\n   *\n   */\n  abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n\n  /**\n   * Moves a view to a new location in this container.\n   * @param viewRef The view to move.\n   * @param index The 0-based index of the new location.\n   * @returns The moved `ViewRef` instance.\n   */\n  abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n\n  /**\n   * Returns the index of a view within the current container.\n   * @param viewRef The view to query.\n   * @returns The 0-based index of the view's position in this container,\n   * or `-1` if this container doesn't contain the view.\n   */\n  abstract indexOf(viewRef: ViewRef): number;\n\n  /**\n   * Destroys a view attached to this container\n   * @param index The 0-based index of the view to destroy.\n   * If not specified, the last view in the container is removed.\n   */\n  abstract remove(index?: number): void;\n\n  /**\n   * Detaches a view from this container without destroying it.\n   * Use along with `insert()` to move a view within the current container.\n   * @param index The 0-based index of the view to detach.\n   * If not specified, the last view in the container is detached.\n   */\n  abstract detach(index?: number): ViewRef|null;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ViewContainerRef = injectViewContainerRef;\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(): ViewContainerRef {\n  const previousTNode = getCurrentTNode() as TElementNode | TElementContainerNode | TContainerNode;\n  return createContainerRef(previousTNode, getLView());\n}\n\nconst VE_ViewContainerRef = ViewContainerRef;\n\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  constructor(\n      private _lContainer: LContainer,\n      private _hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n      private _hostLView: LView) {\n    super();\n  }\n\n  override get element(): ElementRef {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n\n  override get injector(): Injector {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n\n  /** @deprecated No replacement */\n  override get parentInjector(): Injector {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode =\n          parentView[TVIEW].data[injectorIndex + NodeInjectorOffset.TNODE] as TElementNode;\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n\n  override clear(): void {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n\n  override get(index: number): ViewRef|null {\n    const viewRefs = getViewRefs(this._lContainer);\n    return viewRefs !== null && viewRefs[index] || null;\n  }\n\n  override get length(): number {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n\n  override createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):\n      EmbeddedViewRef<C> {\n    const viewRef = templateRef.createEmbeddedView(context || <any>{});\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n\n  override createComponent<C>(componentType: Type<C>, options?: {\n    index?: number,\n    injector?: Injector,\n    projectableNodes?: Node[][],\n    ngModuleRef?: NgModuleRef<unknown>,\n  }): ComponentRef<C>;\n  /**\n   * @deprecated Angular no longer requires component factories to dynamically create components.\n   *     Use different signature of the `createComponent` method, which allows passing\n   *     Component class directly.\n   */\n  override createComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number|undefined,\n      injector?: Injector|undefined, projectableNodes?: any[][]|undefined,\n      ngModuleRef?: NgModuleRef<any>|undefined): ComponentRef<C>;\n  override createComponent<C>(\n      componentFactoryOrType: ComponentFactory<C>|Type<C>, indexOrOptions?: number|undefined|{\n        index?: number,\n        injector?: Injector,\n        ngModuleRef?: NgModuleRef<unknown>,\n        projectableNodes?: Node[][],\n      },\n      injector?: Injector|undefined, projectableNodes?: any[][]|undefined,\n      ngModuleRef?: NgModuleRef<any>|undefined): ComponentRef<C> {\n    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n    let index: number|undefined;\n\n    // This function supports 2 signatures and we need to handle options correctly for both:\n    //   1. When first argument is a Component type. This signature also requires extra\n    //      options to be provided as as object (more ergonomic option).\n    //   2. First argument is a Component factory. In this case extra options are represented as\n    //      positional arguments. This signature is less ergonomic and will be deprecated.\n    if (isComponentFactory) {\n      if (ngDevMode) {\n        assertEqual(\n            typeof indexOrOptions !== 'object', true,\n            'It looks like Component factory was provided as the first argument ' +\n                'and an options object as the second argument. This combination of arguments ' +\n                'is incompatible. You can either change the first argument to provide Component ' +\n                'type or change the second argument to be a number (representing an index at ' +\n                'which to insert the new component\\'s host view into this container)');\n      }\n      index = indexOrOptions as number | undefined;\n    } else {\n      if (ngDevMode) {\n        assertDefined(\n            getComponentDef(componentFactoryOrType),\n            `Provided Component class doesn't contain Component definition. ` +\n                `Please check whether provided class has @Component decorator.`);\n        assertEqual(\n            typeof indexOrOptions !== 'number', true,\n            'It looks like Component type was provided as the first argument ' +\n                'and a number (representing an index at which to insert the new component\\'s ' +\n                'host view into this container as the second argument. This combination of arguments ' +\n                'is incompatible. Please use an object as the second argument instead.');\n      }\n      const options = (indexOrOptions || {}) as {\n        index?: number,\n        injector?: Injector,\n        ngModuleRef?: NgModuleRef<unknown>,\n        projectableNodes?: Node[][],\n      };\n      index = options.index;\n      injector = options.injector;\n      projectableNodes = options.projectableNodes;\n      ngModuleRef = options.ngModuleRef;\n    }\n\n    const componentFactory: ComponentFactory<C> = isComponentFactory ?\n        componentFactoryOrType as ComponentFactory<C>:\n        new R3ComponentFactory(getComponentDef(componentFactoryOrType)!);\n    const contextInjector = injector || this.parentInjector;\n    if (!ngModuleRef && (componentFactory as any).ngModule == null && contextInjector) {\n      // DO NOT REFACTOR. The code here used to have a `value || undefined` expression\n      // which seems to cause internal google apps to fail. This is documented in the\n      // following internal bug issue: go/b/142967802\n      const result = contextInjector.get(NgModuleRef, null);\n      if (result) {\n        ngModuleRef = result;\n      }\n    }\n\n    const componentRef =\n        componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n    this.insert(componentRef.hostView, index);\n    return componentRef;\n  }\n\n  override insert(viewRef: ViewRef, index?: number): ViewRef {\n    const lView = (viewRef as R3ViewRef<any>)._lView!;\n    const tView = lView[TVIEW];\n\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n\n      const prevIdx = this.indexOf(viewRef);\n\n      // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT] as LContainer;\n        ngDevMode &&\n            assertEqual(\n                isLContainer(prevLContainer), true,\n                'An attached view should have its PARENT point to a container.');\n\n\n        // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n        const prevVCRef = new R3ViewContainerRef(\n            prevLContainer, prevLContainer[T_HOST] as TDirectiveHostNode, prevLContainer[PARENT]);\n\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    }\n\n    // Logical operation of adding `LView` to `LContainer`\n    const adjustedIdx = this._adjustIndex(index);\n    const lContainer = this._lContainer;\n    insertView(tView, lView, lContainer, adjustedIdx);\n\n    // Physical operation of adding the DOM nodes.\n    const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE] as RElement | RComment);\n    if (parentRNode !== null) {\n      addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n\n    (viewRef as R3ViewRef<any>).attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n\n    return viewRef;\n  }\n\n  override move(viewRef: ViewRef, newIndex: number): ViewRef {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    return this.insert(viewRef, newIndex);\n  }\n\n  override indexOf(viewRef: ViewRef): number {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n\n  override remove(index?: number): void {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n\n  override detach(index?: number): ViewRef|null {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const view = detachView(this._lContainer, adjustedIdx);\n\n    const wasDetached =\n        view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new R3ViewRef(view!) : null;\n  }\n\n  private _adjustIndex(index?: number, shift: number = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n      // +1 because it's legal to insert at the end.\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n    return index;\n  }\n};\n\nfunction getViewRefs(lContainer: LContainer): ViewRef[]|null {\n  return lContainer[VIEW_REFS] as ViewRef[];\n}\n\nfunction getOrCreateViewRefs(lContainer: LContainer): ViewRef[] {\n  return (lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = [])) as ViewRef[];\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nexport function createContainerRef(\n    hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n    hostLView: LView): ViewContainerRef {\n  ngDevMode && assertTNodeType(hostTNode, TNodeType.AnyContainer | TNodeType.AnyRNode);\n\n  let lContainer: LContainer;\n  const slotValue = hostLView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    let commentNode: RComment;\n    // If the host is an element container, the native host element is guaranteed to be a\n    // comment and we can reuse that comment as anchor element for the new LContainer.\n    // The comment node in question is already part of the DOM structure so we don't need to append\n    // it again.\n    if (hostTNode.type & TNodeType.ElementContainer) {\n      commentNode = unwrapRNode(slotValue) as RComment;\n    } else {\n      // If the host is a regular element, we have to insert a comment node manually which will\n      // be used as an anchor when inserting elements. In this specific case we use low-level DOM\n      // manipulation to insert it.\n      const renderer = hostLView[RENDERER];\n      ngDevMode && ngDevMode.rendererCreateComment++;\n      commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n\n      const hostNative = getNativeByTNode(hostTNode, hostLView)!;\n      const parentOfHostNative = nativeParentNode(renderer, hostNative);\n      nativeInsertBefore(\n          renderer, parentOfHostNative!, commentNode, nativeNextSibling(renderer, hostNative),\n          false);\n    }\n\n    hostLView[hostTNode.index] = lContainer =\n        createLContainer(slotValue, hostLView, commentNode, hostTNode);\n\n    addToViewTree(hostLView, lContainer);\n  }\n\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine_from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\n\nimport {ProviderToken} from '../di/provider_token';\nimport {createElementRef, ElementRef as ViewEngine_ElementRef, unwrapElementRef} from '../linker/element_ref';\nimport {QueryList} from '../linker/query_list';\nimport {createTemplateRef, TemplateRef as ViewEngine_TemplateRef} from '../linker/template_ref';\nimport {createContainerRef, ViewContainerRef} from '../linker/view_container_ref';\nimport {assertDefined, assertIndexInRange, assertNumber, throwError} from '../util/assert';\nimport {stringify} from '../util/stringify';\nimport {assertFirstCreatePass, assertLContainer} from './assert';\nimport {getNodeInjectable, locateDirectiveOrProvider} from './di';\nimport {storeCleanupWithContext} from './instructions/shared';\nimport {CONTAINER_HEADER_OFFSET, LContainer, MOVED_VIEWS} from './interfaces/container';\nimport {unusedValueExportToPlacateAjd as unused1} from './interfaces/definition';\nimport {unusedValueExportToPlacateAjd as unused2} from './interfaces/injector';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType, unusedValueExportToPlacateAjd as unused3} from './interfaces/node';\nimport {LQueries, LQuery, QueryFlags, TQueries, TQuery, TQueryMetadata, unusedValueExportToPlacateAjd as unused4} from './interfaces/query';\nimport {DECLARATION_LCONTAINER, LView, PARENT, QUERIES, TVIEW, TView} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {getCurrentQueryIndex, getCurrentTNode, getLView, getTView, setCurrentQueryIndex} from './state';\nimport {isCreationMode} from './util/view_utils';\n\nconst unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n\nclass LQuery_<T> implements LQuery<T> {\n  matches: (T|null)[]|null = null;\n  constructor(public queryList: QueryList<T>) {}\n  clone(): LQuery<T> {\n    return new LQuery_(this.queryList);\n  }\n  setDirty(): void {\n    this.queryList.setDirty();\n  }\n}\n\nclass LQueries_ implements LQueries {\n  constructor(public queries: LQuery<any>[] = []) {}\n\n  createEmbeddedView(tView: TView): LQueries|null {\n    const tQueries = tView.queries;\n    if (tQueries !== null) {\n      const noOfInheritedQueries =\n          tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries: LQuery<any>[] = [];\n\n      // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n\n      return new LQueries_(viewLQueries);\n    }\n\n    return null;\n  }\n\n  insertView(tView: TView): void {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  detachView(tView: TView): void {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  private dirtyQueriesWithMatches(tView: TView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n}\n\nclass TQueryMetadata_ implements TQueryMetadata {\n  constructor(\n      public predicate: ProviderToken<unknown>|string[], public flags: QueryFlags,\n      public read: any = null) {}\n}\n\nclass TQueries_ implements TQueries {\n  constructor(private queries: TQuery[] = []) {}\n\n  elementStart(tView: TView, tNode: TNode): void {\n    ngDevMode &&\n        assertFirstCreatePass(\n            tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n  elementEnd(tNode: TNode): void {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n  embeddedTView(tNode: TNode): TQueries|null {\n    let queriesForTemplateRef: TQuery[]|null = null;\n\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n\n  template(tView: TView, tNode: TNode): void {\n    ngDevMode &&\n        assertFirstCreatePass(\n            tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n\n  getByIndex(index: number): TQuery {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n\n  get length(): number {\n    return this.queries.length;\n  }\n\n  track(tquery: TQuery): void {\n    this.queries.push(tquery);\n  }\n}\n\nclass TQuery_ implements TQuery {\n  matches: number[]|null = null;\n  indexInDeclarationView = -1;\n  crossesNgTemplate = false;\n\n  /**\n   * A node index on which a query was declared (-1 for view queries and ones inherited from the\n   * declaration template). We use this index (alongside with _appliesToNextNode flag) to know\n   * when to apply content queries to elements in a template.\n   */\n  private _declarationNodeIndex: number;\n\n  /**\n   * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n   * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n   * elements in a template.\n   */\n  private _appliesToNextNode = true;\n\n  constructor(public metadata: TQueryMetadata, nodeIndex: number = -1) {\n    this._declarationNodeIndex = nodeIndex;\n  }\n\n  elementStart(tView: TView, tNode: TNode): void {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n\n  elementEnd(tNode: TNode): void {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n\n  template(tView: TView, tNode: TNode): void {\n    this.elementStart(tView, tNode);\n  }\n\n  embeddedTView(tNode: TNode, childQueryIndex: number): TQuery|null {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true;\n      // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n    return null;\n  }\n\n  private isApplyingToNode(tNode: TNode): boolean {\n    if (this._appliesToNextNode &&\n        (this.metadata.flags & QueryFlags.descendants) !== QueryFlags.descendants) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent;\n      // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n      while (parent !== null && (parent.type & TNodeType.ElementContainer) &&\n             parent.index !== declarationNodeIdx) {\n        parent = parent.parent;\n      }\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n    return this._appliesToNextNode;\n  }\n\n  private matchTNode(tView: TView, tNode: TNode): void {\n    const predicate = this.metadata.predicate;\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n        // Also try matching the name to a provider since strings can be used as DI tokens too.\n        this.matchTNodeWithReadOption(\n            tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n      }\n    } else {\n      if ((predicate as any) === ViewEngine_TemplateRef) {\n        if (tNode.type & TNodeType.Container) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(\n            tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n      }\n    }\n  }\n\n  private matchTNodeWithReadOption(tView: TView, tNode: TNode, nodeMatchIdx: number|null): void {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n      if (read !== null) {\n        if (read === ViewEngine_ElementRef || read === ViewContainerRef ||\n            read === ViewEngine_TemplateRef && (tNode.type & TNodeType.Container)) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx =\n              locateDirectiveOrProvider(tNode, tView, read, false, false);\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n\n  private addMatch(tNodeIdx: number, matchIdx: number) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n}\n\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode: TNode, selector: string): number|null {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1] as number;\n      }\n    }\n  }\n  return null;\n}\n\n\nfunction createResultByTNodeType(tNode: TNode, currentView: LView): any {\n  if (tNode.type & (TNodeType.AnyRNode | TNodeType.ElementContainer)) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & TNodeType.Container) {\n    return createTemplateRef(tNode, currentView);\n  }\n  return null;\n}\n\n\nfunction createResultForNode(lView: LView, tNode: TNode, matchingIdx: number, read: any): any {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode as TElementNode);\n  }\n}\n\nfunction createSpecialToken(lView: LView, tNode: TNode, read: any): any {\n  if (read === ViewEngine_ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === ViewEngine_TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n    return createContainerRef(\n        tNode as TElementNode | TContainerNode | TElementContainerNode, lView);\n  } else {\n    ngDevMode &&\n        throwError(\n            `Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${\n                stringify(read)}.`);\n  }\n}\n\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults<T>(\n    tView: TView, lView: LView, tQuery: TQuery, queryIndex: number): (T|null)[] {\n  const lQuery = lView[QUERIES]!.queries![queryIndex];\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches!;\n    const result: T|null[] = [];\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx] as TNode;\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n    lQuery.matches = result;\n  }\n\n  return lQuery.matches;\n}\n\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults<T>(tView: TView, lView: LView, queryIndex: number, result: T[]): T[] {\n  const tQuery = tView.queries!.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults<T>(tView, lView, tQuery, queryIndex);\n\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2] as T);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n\n        const declarationLContainer = lView[-tNodeIdx] as LContainer;\n        ngDevMode && assertLContainer(declarationLContainer);\n\n        // collect matches for views inserted in this container\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n\n        // collect matches for views created from this declaration container and inserted into\n        // different containers\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS]!;\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nexport function ɵɵqueryRefresh(queryList: QueryList<any>): boolean {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n\n  setCurrentQueryIndex(queryIndex + 1);\n\n  const tQuery = getTQuery(tView, queryIndex);\n  if (queryList.dirty &&\n      (isCreationMode(lView) ===\n       ((tQuery.metadata.flags & QueryFlags.isStatic) === QueryFlags.isStatic))) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = tQuery.crossesNgTemplate ?\n          collectQueryResults(tView, lView, queryIndex, []) :\n          materializeViewResults(tView, lView, tQuery, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport function ɵɵviewQuery<T>(\n    predicate: ProviderToken<unknown>|string[], flags: QueryFlags, read?: any): void {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n    if ((flags & QueryFlags.isStatic) === QueryFlags.isStatic) {\n      tView.staticViewQueries = true;\n    }\n  }\n  createLQuery<T>(tView, getLView(), flags);\n}\n\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nexport function ɵɵcontentQuery<T>(\n    directiveIndex: number, predicate: ProviderToken<unknown>|string[], flags: QueryFlags,\n    read?: any): void {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode()!;\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n    if ((flags & QueryFlags.isStatic) === QueryFlags.isStatic) {\n      tView.staticContentQueries = true;\n    }\n  }\n\n  createLQuery<T>(tView, getLView(), flags);\n}\n\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nexport function ɵɵloadQuery<T>(): QueryList<T> {\n  return loadQueryInternal<T>(getLView(), getCurrentQueryIndex());\n}\n\nfunction loadQueryInternal<T>(lView: LView, queryIndex: number): QueryList<T> {\n  ngDevMode &&\n      assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES]!.queries, queryIndex);\n  return lView[QUERIES]!.queries[queryIndex].queryList;\n}\n\nfunction createLQuery<T>(tView: TView, lView: LView, flags: QueryFlags) {\n  const queryList = new QueryList<T>(\n      (flags & QueryFlags.emitDistinctChangesOnly) === QueryFlags.emitDistinctChangesOnly);\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n\n  if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();\n  lView[QUERIES]!.queries.push(new LQuery_(queryList));\n}\n\nfunction createTQuery(tView: TView, metadata: TQueryMetadata, nodeIndex: number): void {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\n\nfunction saveContentQueryAndDirectiveIndex(tView: TView, directiveIndex: number) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex =\n      tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries!.length - 1, directiveIndex);\n  }\n}\n\nfunction getTQuery(tView: TView, index: number): TQuery {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries!.getByIndex(index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {createTemplateRef, TemplateRef} from '../linker/template_ref';\nimport {TNode} from './interfaces/node';\nimport {LView} from './interfaces/view';\n\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nexport function ɵɵtemplateRefExtractor(tNode: TNode, lView: LView): TemplateRef<any>|null {\n  return createTemplateRef(tNode, lView);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {forwardRef, resolveForwardRef} from '../../di/forward_ref';\nimport {ɵɵinject, ɵɵinvalidFactoryDep} from '../../di/injector_compatibility';\nimport {ɵɵdefineInjectable, ɵɵdefineInjector} from '../../di/interface/defs';\nimport * as sanitization from '../../sanitization/sanitization';\nimport * as r3 from '../index';\n\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nexport const angularCoreEnv: {[name: string]: Function} =\n    (() => ({\n       'ɵɵattribute': r3.ɵɵattribute,\n       'ɵɵattributeInterpolate1': r3.ɵɵattributeInterpolate1,\n       'ɵɵattributeInterpolate2': r3.ɵɵattributeInterpolate2,\n       'ɵɵattributeInterpolate3': r3.ɵɵattributeInterpolate3,\n       'ɵɵattributeInterpolate4': r3.ɵɵattributeInterpolate4,\n       'ɵɵattributeInterpolate5': r3.ɵɵattributeInterpolate5,\n       'ɵɵattributeInterpolate6': r3.ɵɵattributeInterpolate6,\n       'ɵɵattributeInterpolate7': r3.ɵɵattributeInterpolate7,\n       'ɵɵattributeInterpolate8': r3.ɵɵattributeInterpolate8,\n       'ɵɵattributeInterpolateV': r3.ɵɵattributeInterpolateV,\n       'ɵɵdefineComponent': r3.ɵɵdefineComponent,\n       'ɵɵdefineDirective': r3.ɵɵdefineDirective,\n       'ɵɵdefineInjectable': ɵɵdefineInjectable,\n       'ɵɵdefineInjector': ɵɵdefineInjector,\n       'ɵɵdefineNgModule': r3.ɵɵdefineNgModule,\n       'ɵɵdefinePipe': r3.ɵɵdefinePipe,\n       'ɵɵdirectiveInject': r3.ɵɵdirectiveInject,\n       'ɵɵgetInheritedFactory': r3.ɵɵgetInheritedFactory,\n       'ɵɵinject': ɵɵinject,\n       'ɵɵinjectAttribute': r3.ɵɵinjectAttribute,\n       'ɵɵinvalidFactory': r3.ɵɵinvalidFactory,\n       'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n       'ɵɵtemplateRefExtractor': r3.ɵɵtemplateRefExtractor,\n       'ɵɵNgOnChangesFeature': r3.ɵɵNgOnChangesFeature,\n       'ɵɵProvidersFeature': r3.ɵɵProvidersFeature,\n       'ɵɵCopyDefinitionFeature': r3.ɵɵCopyDefinitionFeature,\n       'ɵɵInheritDefinitionFeature': r3.ɵɵInheritDefinitionFeature,\n       'ɵɵnextContext': r3.ɵɵnextContext,\n       'ɵɵnamespaceHTML': r3.ɵɵnamespaceHTML,\n       'ɵɵnamespaceMathML': r3.ɵɵnamespaceMathML,\n       'ɵɵnamespaceSVG': r3.ɵɵnamespaceSVG,\n       'ɵɵenableBindings': r3.ɵɵenableBindings,\n       'ɵɵdisableBindings': r3.ɵɵdisableBindings,\n       'ɵɵelementStart': r3.ɵɵelementStart,\n       'ɵɵelementEnd': r3.ɵɵelementEnd,\n       'ɵɵelement': r3.ɵɵelement,\n       'ɵɵelementContainerStart': r3.ɵɵelementContainerStart,\n       'ɵɵelementContainerEnd': r3.ɵɵelementContainerEnd,\n       'ɵɵelementContainer': r3.ɵɵelementContainer,\n       'ɵɵpureFunction0': r3.ɵɵpureFunction0,\n       'ɵɵpureFunction1': r3.ɵɵpureFunction1,\n       'ɵɵpureFunction2': r3.ɵɵpureFunction2,\n       'ɵɵpureFunction3': r3.ɵɵpureFunction3,\n       'ɵɵpureFunction4': r3.ɵɵpureFunction4,\n       'ɵɵpureFunction5': r3.ɵɵpureFunction5,\n       'ɵɵpureFunction6': r3.ɵɵpureFunction6,\n       'ɵɵpureFunction7': r3.ɵɵpureFunction7,\n       'ɵɵpureFunction8': r3.ɵɵpureFunction8,\n       'ɵɵpureFunctionV': r3.ɵɵpureFunctionV,\n       'ɵɵgetCurrentView': r3.ɵɵgetCurrentView,\n       'ɵɵrestoreView': r3.ɵɵrestoreView,\n       'ɵɵlistener': r3.ɵɵlistener,\n       'ɵɵprojection': r3.ɵɵprojection,\n       'ɵɵsyntheticHostProperty': r3.ɵɵsyntheticHostProperty,\n       'ɵɵsyntheticHostListener': r3.ɵɵsyntheticHostListener,\n       'ɵɵpipeBind1': r3.ɵɵpipeBind1,\n       'ɵɵpipeBind2': r3.ɵɵpipeBind2,\n       'ɵɵpipeBind3': r3.ɵɵpipeBind3,\n       'ɵɵpipeBind4': r3.ɵɵpipeBind4,\n       'ɵɵpipeBindV': r3.ɵɵpipeBindV,\n       'ɵɵprojectionDef': r3.ɵɵprojectionDef,\n       'ɵɵhostProperty': r3.ɵɵhostProperty,\n       'ɵɵproperty': r3.ɵɵproperty,\n       'ɵɵpropertyInterpolate': r3.ɵɵpropertyInterpolate,\n       'ɵɵpropertyInterpolate1': r3.ɵɵpropertyInterpolate1,\n       'ɵɵpropertyInterpolate2': r3.ɵɵpropertyInterpolate2,\n       'ɵɵpropertyInterpolate3': r3.ɵɵpropertyInterpolate3,\n       'ɵɵpropertyInterpolate4': r3.ɵɵpropertyInterpolate4,\n       'ɵɵpropertyInterpolate5': r3.ɵɵpropertyInterpolate5,\n       'ɵɵpropertyInterpolate6': r3.ɵɵpropertyInterpolate6,\n       'ɵɵpropertyInterpolate7': r3.ɵɵpropertyInterpolate7,\n       'ɵɵpropertyInterpolate8': r3.ɵɵpropertyInterpolate8,\n       'ɵɵpropertyInterpolateV': r3.ɵɵpropertyInterpolateV,\n       'ɵɵpipe': r3.ɵɵpipe,\n       'ɵɵqueryRefresh': r3.ɵɵqueryRefresh,\n       'ɵɵviewQuery': r3.ɵɵviewQuery,\n       'ɵɵloadQuery': r3.ɵɵloadQuery,\n       'ɵɵcontentQuery': r3.ɵɵcontentQuery,\n       'ɵɵreference': r3.ɵɵreference,\n       'ɵɵclassMap': r3.ɵɵclassMap,\n       'ɵɵclassMapInterpolate1': r3.ɵɵclassMapInterpolate1,\n       'ɵɵclassMapInterpolate2': r3.ɵɵclassMapInterpolate2,\n       'ɵɵclassMapInterpolate3': r3.ɵɵclassMapInterpolate3,\n       'ɵɵclassMapInterpolate4': r3.ɵɵclassMapInterpolate4,\n       'ɵɵclassMapInterpolate5': r3.ɵɵclassMapInterpolate5,\n       'ɵɵclassMapInterpolate6': r3.ɵɵclassMapInterpolate6,\n       'ɵɵclassMapInterpolate7': r3.ɵɵclassMapInterpolate7,\n       'ɵɵclassMapInterpolate8': r3.ɵɵclassMapInterpolate8,\n       'ɵɵclassMapInterpolateV': r3.ɵɵclassMapInterpolateV,\n       'ɵɵstyleMap': r3.ɵɵstyleMap,\n       'ɵɵstyleMapInterpolate1': r3.ɵɵstyleMapInterpolate1,\n       'ɵɵstyleMapInterpolate2': r3.ɵɵstyleMapInterpolate2,\n       'ɵɵstyleMapInterpolate3': r3.ɵɵstyleMapInterpolate3,\n       'ɵɵstyleMapInterpolate4': r3.ɵɵstyleMapInterpolate4,\n       'ɵɵstyleMapInterpolate5': r3.ɵɵstyleMapInterpolate5,\n       'ɵɵstyleMapInterpolate6': r3.ɵɵstyleMapInterpolate6,\n       'ɵɵstyleMapInterpolate7': r3.ɵɵstyleMapInterpolate7,\n       'ɵɵstyleMapInterpolate8': r3.ɵɵstyleMapInterpolate8,\n       'ɵɵstyleMapInterpolateV': r3.ɵɵstyleMapInterpolateV,\n       'ɵɵstyleProp': r3.ɵɵstyleProp,\n       'ɵɵstylePropInterpolate1': r3.ɵɵstylePropInterpolate1,\n       'ɵɵstylePropInterpolate2': r3.ɵɵstylePropInterpolate2,\n       'ɵɵstylePropInterpolate3': r3.ɵɵstylePropInterpolate3,\n       'ɵɵstylePropInterpolate4': r3.ɵɵstylePropInterpolate4,\n       'ɵɵstylePropInterpolate5': r3.ɵɵstylePropInterpolate5,\n       'ɵɵstylePropInterpolate6': r3.ɵɵstylePropInterpolate6,\n       'ɵɵstylePropInterpolate7': r3.ɵɵstylePropInterpolate7,\n       'ɵɵstylePropInterpolate8': r3.ɵɵstylePropInterpolate8,\n       'ɵɵstylePropInterpolateV': r3.ɵɵstylePropInterpolateV,\n       'ɵɵclassProp': r3.ɵɵclassProp,\n       'ɵɵadvance': r3.ɵɵadvance,\n       'ɵɵtemplate': r3.ɵɵtemplate,\n       'ɵɵtext': r3.ɵɵtext,\n       'ɵɵtextInterpolate': r3.ɵɵtextInterpolate,\n       'ɵɵtextInterpolate1': r3.ɵɵtextInterpolate1,\n       'ɵɵtextInterpolate2': r3.ɵɵtextInterpolate2,\n       'ɵɵtextInterpolate3': r3.ɵɵtextInterpolate3,\n       'ɵɵtextInterpolate4': r3.ɵɵtextInterpolate4,\n       'ɵɵtextInterpolate5': r3.ɵɵtextInterpolate5,\n       'ɵɵtextInterpolate6': r3.ɵɵtextInterpolate6,\n       'ɵɵtextInterpolate7': r3.ɵɵtextInterpolate7,\n       'ɵɵtextInterpolate8': r3.ɵɵtextInterpolate8,\n       'ɵɵtextInterpolateV': r3.ɵɵtextInterpolateV,\n       'ɵɵi18n': r3.ɵɵi18n,\n       'ɵɵi18nAttributes': r3.ɵɵi18nAttributes,\n       'ɵɵi18nExp': r3.ɵɵi18nExp,\n       'ɵɵi18nStart': r3.ɵɵi18nStart,\n       'ɵɵi18nEnd': r3.ɵɵi18nEnd,\n       'ɵɵi18nApply': r3.ɵɵi18nApply,\n       'ɵɵi18nPostprocess': r3.ɵɵi18nPostprocess,\n       'ɵɵresolveWindow': r3.ɵɵresolveWindow,\n       'ɵɵresolveDocument': r3.ɵɵresolveDocument,\n       'ɵɵresolveBody': r3.ɵɵresolveBody,\n       'ɵɵsetComponentScope': r3.ɵɵsetComponentScope,\n       'ɵɵsetNgModuleScope': r3.ɵɵsetNgModuleScope,\n\n       'ɵɵsanitizeHtml': sanitization.ɵɵsanitizeHtml,\n       'ɵɵsanitizeStyle': sanitization.ɵɵsanitizeStyle,\n       'ɵɵsanitizeResourceUrl': sanitization.ɵɵsanitizeResourceUrl,\n       'ɵɵsanitizeScript': sanitization.ɵɵsanitizeScript,\n       'ɵɵsanitizeUrl': sanitization.ɵɵsanitizeUrl,\n       'ɵɵsanitizeUrlOrResourceUrl': sanitization.ɵɵsanitizeUrlOrResourceUrl,\n       'ɵɵtrustConstantHtml': sanitization.ɵɵtrustConstantHtml,\n       'ɵɵtrustConstantResourceUrl': sanitization.ɵɵtrustConstantResourceUrl,\n\n       'forwardRef': forwardRef,\n       'resolveForwardRef': resolveForwardRef,\n     }))();\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getCompilerFacade, JitCompilerUsage, R3InjectorMetadataFacade} from '../../compiler/compiler_facade';\nimport {resolveForwardRef} from '../../di/forward_ref';\nimport {NG_INJ_DEF} from '../../di/interface/defs';\nimport {reflectDependencies} from '../../di/jit/util';\nimport {Type} from '../../interface/type';\nimport {Component} from '../../metadata/directives';\nimport {ModuleWithProviders, NgModule} from '../../metadata/ng_module';\nimport {NgModuleDef, NgModuleTransitiveScopes, NgModuleType} from '../../metadata/ng_module_def';\nimport {deepForEach, flatten} from '../../util/array_utils';\nimport {assertDefined} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {getComponentDef, getDirectiveDef, getNgModuleDef, getPipeDef} from '../definition';\nimport {NG_COMP_DEF, NG_DIR_DEF, NG_FACTORY_DEF, NG_MOD_DEF, NG_PIPE_DEF} from '../fields';\nimport {ComponentDef} from '../interfaces/definition';\nimport {maybeUnwrapFn} from '../util/misc_utils';\nimport {stringifyForError} from '../util/stringify_utils';\n\nimport {angularCoreEnv} from './environment';\n\ninterface ModuleQueueItem {\n  moduleType: Type<any>;\n  ngModule: NgModule;\n}\n\nconst moduleQueue: ModuleQueueItem[] = [];\n\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType: Type<any>, ngModule: NgModule) {\n  moduleQueue.push({moduleType, ngModule});\n}\n\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nexport function flushModuleScopingQueueAsMuchAsPossible() {\n  if (!flushingModuleQueue) {\n    flushingModuleQueue = true;\n    try {\n      for (let i = moduleQueue.length - 1; i >= 0; i--) {\n        const {moduleType, ngModule} = moduleQueue[i];\n\n        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n          // dequeue\n          moduleQueue.splice(i, 1);\n          setScopeOnDeclaredComponents(moduleType, ngModule);\n        }\n      }\n    } finally {\n      flushingModuleQueue = false;\n    }\n  }\n}\n\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration: any[]|Type<any>): boolean {\n  if (Array.isArray(declaration)) {\n    return declaration.every(isResolvedDeclaration);\n  }\n  return !!resolveForwardRef(declaration);\n}\n\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nexport function compileNgModule(moduleType: Type<any>, ngModule: NgModule = {}): void {\n  compileNgModuleDefs(moduleType as NgModuleType, ngModule);\n\n  // Because we don't know if all declarations have resolved yet at the moment the\n  // NgModule decorator is executing, we're enqueueing the setting of module scope\n  // on its declarations to be run at a later time when all declarations for the module,\n  // including forward refs, have resolved.\n  enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nexport function compileNgModuleDefs(\n    moduleType: NgModuleType, ngModule: NgModule,\n    allowDuplicateDeclarationsInRoot: boolean = false): void {\n  ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n  ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n  const declarations: Type<any>[] = flatten(ngModule.declarations || EMPTY_ARRAY);\n  let ngModuleDef: any = null;\n  Object.defineProperty(moduleType, NG_MOD_DEF, {\n    configurable: true,\n    get: () => {\n      if (ngModuleDef === null) {\n        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n          // We need to assert this immediately, because allowing it to continue will cause it to\n          // go into an infinite loop before we've reached the point where we throw all the errors.\n          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n        }\n        const compiler = getCompilerFacade(\n            {usage: JitCompilerUsage.Decorator, kind: 'NgModule', type: moduleType});\n        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n          type: moduleType,\n          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n          declarations: declarations.map(resolveForwardRef),\n          imports: flatten(ngModule.imports || EMPTY_ARRAY)\n                       .map(resolveForwardRef)\n                       .map(expandModuleWithProviders),\n          exports: flatten(ngModule.exports || EMPTY_ARRAY)\n                       .map(resolveForwardRef)\n                       .map(expandModuleWithProviders),\n          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n          id: ngModule.id || null,\n        });\n        // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n        // should verify that there are no unknown elements in a template. In AOT mode, that check\n        // happens at compile time and `schemas` information is not present on Component and Module\n        // defs after compilation (so the check doesn't happen the second time at runtime).\n        if (!ngModuleDef.schemas) {\n          ngModuleDef.schemas = [];\n        }\n      }\n      return ngModuleDef;\n    }\n  });\n\n  let ngFactoryDef: any = null;\n  Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const compiler = getCompilerFacade(\n            {usage: JitCompilerUsage.Decorator, kind: 'NgModule', type: moduleType});\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n          name: moduleType.name,\n          type: moduleType,\n          deps: reflectDependencies(moduleType),\n          target: compiler.FactoryTarget.NgModule,\n          typeArgumentCount: 0,\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n\n  let ngInjectorDef: any = null;\n  Object.defineProperty(moduleType, NG_INJ_DEF, {\n    get: () => {\n      if (ngInjectorDef === null) {\n        ngDevMode &&\n            verifySemanticsOfNgModuleDef(\n                moduleType as any as NgModuleType, allowDuplicateDeclarationsInRoot);\n        const meta: R3InjectorMetadataFacade = {\n          name: moduleType.name,\n          type: moduleType,\n          providers: ngModule.providers || EMPTY_ARRAY,\n          imports: [\n            (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),\n            (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef),\n          ],\n        };\n        const compiler = getCompilerFacade(\n            {usage: JitCompilerUsage.Decorator, kind: 'NgModule', type: moduleType});\n        ngInjectorDef =\n            compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n      }\n      return ngInjectorDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nfunction verifySemanticsOfNgModuleDef(\n    moduleType: NgModuleType, allowDuplicateDeclarationsInRoot: boolean,\n    importingModule?: NgModuleType): void {\n  if (verifiedNgModule.get(moduleType)) return;\n  verifiedNgModule.set(moduleType, true);\n  moduleType = resolveForwardRef(moduleType);\n  let ngModuleDef: NgModuleDef<any>;\n  if (importingModule) {\n    ngModuleDef = getNgModuleDef(moduleType)!;\n    if (!ngModuleDef) {\n      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${\n          importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  } else {\n    ngModuleDef = getNgModuleDef(moduleType, true);\n  }\n  const errors: string[] = [];\n  const declarations = maybeUnwrapFn(ngModuleDef.declarations);\n  const imports = maybeUnwrapFn(ngModuleDef.imports);\n  flatten(imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n    verifySemanticsOfNgModuleImport(mod, moduleType);\n    verifySemanticsOfNgModuleDef(mod, false, moduleType);\n  });\n  const exports = maybeUnwrapFn(ngModuleDef.exports);\n  declarations.forEach(verifyDeclarationsHaveDefinitions);\n  declarations.forEach(verifyDirectivesHaveSelector);\n  const combinedDeclarations: Type<any>[] = [\n    ...declarations.map(resolveForwardRef),\n    ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef),\n  ];\n  exports.forEach(verifyExportsAreDeclaredOrReExported);\n  declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n  declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n\n  const ngModule = getAnnotation<NgModule>(moduleType, 'NgModule');\n  if (ngModule) {\n    ngModule.imports &&\n        flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n          verifySemanticsOfNgModuleImport(mod, moduleType);\n          verifySemanticsOfNgModuleDef(mod, false, moduleType);\n        });\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n    ngModule.entryComponents &&\n        deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n  }\n\n  // Throw Error if any errors were detected.\n  if (errors.length) {\n    throw new Error(errors.join('\\n'));\n  }\n  ////////////////////////////////////////////////////////////////////////////////////////////////\n  function verifyDeclarationsHaveDefinitions(type: Type<any>): void {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n    if (!def) {\n      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${\n          stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n    }\n  }\n\n  function verifyDirectivesHaveSelector(type: Type<any>): void {\n    type = resolveForwardRef(type);\n    const def = getDirectiveDef(type);\n    if (!getComponentDef(type) && def && def.selectors.length == 0) {\n      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n    }\n  }\n\n  function verifyExportsAreDeclaredOrReExported(type: Type<any>) {\n    type = resolveForwardRef(type);\n    const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n        getPipeDef(type) && 'pipe';\n    if (kind) {\n      // only checked if we are declared as Component, Directive, or Pipe\n      // Modules don't need to be declared or imported.\n      if (combinedDeclarations.lastIndexOf(type) === -1) {\n        // We are exporting something which we don't explicitly declare or import.\n        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${\n            stringifyForError(moduleType)} as it was neither declared nor imported!`);\n      }\n    }\n  }\n\n  function verifyDeclarationIsUnique(type: Type<any>, suppressErrors: boolean) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (existingModule && existingModule !== moduleType) {\n      if (!suppressErrors) {\n        const modules = [existingModule, moduleType].map(stringifyForError).sort();\n        errors.push(\n            `Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${\n                modules[0]} and ${modules[1]}! ` +\n            `Please consider moving ${stringifyForError(type)} to a higher module that imports ${\n                modules[0]} and ${modules[1]}. ` +\n            `You can also create a new NgModule that exports and includes ${\n                stringifyForError(\n                    type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n      }\n    } else {\n      // Mark type as having owner.\n      ownerNgModule.set(type, moduleType);\n    }\n  }\n\n  function verifyComponentIsPartOfNgModule(type: Type<any>) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (!existingModule) {\n      errors.push(`Component ${\n          stringifyForError(\n              type)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n  }\n\n  function verifyCorrectBootstrapType(type: Type<any>) {\n    type = resolveForwardRef(type);\n    if (!getComponentDef(type)) {\n      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n    }\n  }\n\n  function verifyComponentEntryComponentsIsPartOfNgModule(type: Type<any>) {\n    type = resolveForwardRef(type);\n    if (getComponentDef(type)) {\n      // We know we are component\n      const component = getAnnotation<Component>(type, 'Component');\n      if (component && component.entryComponents) {\n        deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n      }\n    }\n  }\n\n  function verifySemanticsOfNgModuleImport(type: Type<any>, importingModule: Type<any>) {\n    type = resolveForwardRef(type);\n\n    if (getComponentDef(type) || getDirectiveDef(type)) {\n      throw new Error(`Unexpected directive '${type.name}' imported by the module '${\n          importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n\n    if (getPipeDef(type)) {\n      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${\n          importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  }\n}\n\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders: NgModuleType<any>|\n                                          {ngModule: NgModuleType<any>}): NgModuleType<any> {\n  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n  return (typeOrWithProviders as any).ngModule || typeOrWithProviders;\n}\n\nfunction getAnnotation<T>(type: any, name: string): T|null {\n  let annotation: T|null = null;\n  collect(type.__annotations__);\n  collect(type.decorators);\n  return annotation;\n\n  function collect(annotations: any[]|null) {\n    if (annotations) {\n      annotations.forEach(readAnnotation);\n    }\n  }\n\n  function readAnnotation(\n      decorator: {type: {prototype: {ngMetadataName: string}, args: any[]}, args: any}): void {\n    if (!annotation) {\n      const proto = Object.getPrototypeOf(decorator);\n      if (proto.ngMetadataName == name) {\n        annotation = decorator as any;\n      } else if (decorator.type) {\n        const proto = Object.getPrototypeOf(decorator.type);\n        if (proto.ngMetadataName == name) {\n          annotation = decorator.args[0];\n        }\n      }\n    }\n  }\n}\n\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nlet ownerNgModule = new WeakMap<Type<any>, NgModuleType<any>>();\nlet verifiedNgModule = new WeakMap<NgModuleType<any>, boolean>();\n\nexport function resetCompiledComponents(): void {\n  ownerNgModule = new WeakMap<Type<any>, NgModuleType<any>>();\n  verifiedNgModule = new WeakMap<NgModuleType<any>, boolean>();\n  moduleQueue.length = 0;\n}\n\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type: Type<any>): Type<any>[] {\n  type = resolveForwardRef(type);\n  const ngModuleDef = getNgModuleDef(type, true);\n  return [...flatten(maybeUnwrapFn(ngModuleDef.exports).map((type) => {\n    const ngModuleDef = getNgModuleDef(type);\n    if (ngModuleDef) {\n      verifySemanticsOfNgModuleDef(type as any as NgModuleType, false);\n      return computeCombinedExports(type);\n    } else {\n      return type;\n    }\n  }))];\n}\n\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType: Type<any>, ngModule: NgModule) {\n  const declarations: Type<any>[] = flatten(ngModule.declarations || EMPTY_ARRAY);\n\n  const transitiveScopes = transitiveScopesFor(moduleType);\n\n  declarations.forEach(declaration => {\n    if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n      // A `ɵcmp` field exists - go ahead and patch the component directly.\n      const component = declaration as Type<any>& {ɵcmp: ComponentDef<any>};\n      const componentDef = getComponentDef(component)!;\n      patchComponentDefWithScope(componentDef, transitiveScopes);\n    } else if (\n        !declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n      // Set `ngSelectorScope` for future reference when the component compilation finishes.\n      (declaration as Type<any>& {ngSelectorScope?: any}).ngSelectorScope = moduleType;\n    }\n  });\n}\n\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nexport function patchComponentDefWithScope<C>(\n    componentDef: ComponentDef<C>, transitiveScopes: NgModuleTransitiveScopes) {\n  componentDef.directiveDefs = () =>\n      Array.from(transitiveScopes.compilation.directives)\n          .map(\n              dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir)! : getDirectiveDef(dir)!\n              )\n          .filter(def => !!def);\n  componentDef.pipeDefs = () =>\n      Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef(pipe)!);\n  componentDef.schemas = transitiveScopes.schemas;\n\n  // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n  // may face a problem where previously compiled defs available to a given Component/Directive\n  // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n  // order to avoid this problem, we force fresh TView to be created.\n  componentDef.tView = null;\n}\n\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. This function can\n * be called on modules with components that have not fully compiled yet, but the result should not\n * be used until they have.\n *\n * @param moduleType module that transitive scope should be calculated for.\n */\nexport function transitiveScopesFor<T>(moduleType: Type<T>): NgModuleTransitiveScopes {\n  if (!isNgModule(moduleType)) {\n    throw new Error(`${moduleType.name} does not have a module def (ɵmod property)`);\n  }\n  const def = getNgModuleDef(moduleType)!;\n\n  if (def.transitiveCompileScopes !== null) {\n    return def.transitiveCompileScopes;\n  }\n\n  const scopes: NgModuleTransitiveScopes = {\n    schemas: def.schemas || null,\n    compilation: {\n      directives: new Set<any>(),\n      pipes: new Set<any>(),\n    },\n    exported: {\n      directives: new Set<any>(),\n      pipes: new Set<any>(),\n    },\n  };\n\n  maybeUnwrapFn(def.imports).forEach(<I>(imported: Type<I>) => {\n    const importedType = imported as Type<I>& {\n      // If imported is an @NgModule:\n      ɵmod?: NgModuleDef<I>;\n    };\n\n    if (!isNgModule<I>(importedType)) {\n      throw new Error(`Importing ${importedType.name} which does not have a ɵmod property`);\n    }\n\n    // When this module imports another, the imported module's exported directives and pipes are\n    // added to the compilation scope of this module.\n    const importedScope = transitiveScopesFor(importedType);\n    importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n    importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n  });\n\n  maybeUnwrapFn(def.declarations).forEach(declared => {\n    const declaredWithDefs = declared as Type<any>& {\n      ɵpipe?: any;\n    };\n\n    if (getPipeDef(declaredWithDefs)) {\n      scopes.compilation.pipes.add(declared);\n    } else {\n      // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n      // had its template compiled yet. In either case, it gets added to the compilation's\n      // directives.\n      scopes.compilation.directives.add(declared);\n    }\n  });\n\n  maybeUnwrapFn(def.exports).forEach(<E>(exported: Type<E>) => {\n    const exportedType = exported as Type<E>& {\n      // Components, Directives, NgModules, and Pipes can all be exported.\n      ɵcmp?: any;\n      ɵdir?: any;\n      ɵmod?: NgModuleDef<E>;\n      ɵpipe?: any;\n    };\n\n    // Either the type is a module, a pipe, or a component/directive (which may not have a\n    // ɵcmp as it might be compiled asynchronously).\n    if (isNgModule(exportedType)) {\n      // When this module exports another, the exported module's exported directives and pipes are\n      // added to both the compilation and exported scopes of this module.\n      const exportedScope = transitiveScopesFor(exportedType);\n      exportedScope.exported.directives.forEach(entry => {\n        scopes.compilation.directives.add(entry);\n        scopes.exported.directives.add(entry);\n      });\n      exportedScope.exported.pipes.forEach(entry => {\n        scopes.compilation.pipes.add(entry);\n        scopes.exported.pipes.add(entry);\n      });\n    } else if (getPipeDef(exportedType)) {\n      scopes.exported.pipes.add(exportedType);\n    } else {\n      scopes.exported.directives.add(exportedType);\n    }\n  });\n\n  def.transitiveCompileScopes = scopes;\n  return scopes;\n}\n\nfunction expandModuleWithProviders(value: Type<any>|ModuleWithProviders<{}>): Type<any> {\n  if (isModuleWithProviders(value)) {\n    return value.ngModule;\n  }\n  return value;\n}\n\nfunction isModuleWithProviders(value: any): value is ModuleWithProviders<{}> {\n  return (value as {ngModule?: any}).ngModule !== undefined;\n}\n\nfunction isNgModule<T>(value: Type<T>): value is Type<T>&{ɵmod: NgModuleDef<T>} {\n  return !!getNgModuleDef(value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getCompilerFacade, JitCompilerUsage, R3DirectiveMetadataFacade} from '../../compiler/compiler_facade';\nimport {R3ComponentMetadataFacade, R3QueryMetadataFacade} from '../../compiler/compiler_facade_interface';\nimport {resolveForwardRef} from '../../di/forward_ref';\nimport {getReflect, reflectDependencies} from '../../di/jit/util';\nimport {Type} from '../../interface/type';\nimport {Query} from '../../metadata/di';\nimport {Component, Directive, Input} from '../../metadata/directives';\nimport {componentNeedsResolution, maybeQueueResolutionOfComponentResources} from '../../metadata/resource_loading';\nimport {ViewEncapsulation} from '../../metadata/view';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../../util/empty';\nimport {initNgDevMode} from '../../util/ng_dev_mode';\nimport {getComponentDef, getDirectiveDef} from '../definition';\nimport {NG_COMP_DEF, NG_DIR_DEF, NG_FACTORY_DEF} from '../fields';\nimport {ComponentType} from '../interfaces/definition';\nimport {stringifyForError} from '../util/stringify_utils';\n\nimport {angularCoreEnv} from './environment';\nimport {getJitOptions} from './jit_options';\nimport {flushModuleScopingQueueAsMuchAsPossible, patchComponentDefWithScope, transitiveScopesFor} from './module';\n\n/**\n * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This\n * matters in the following scenario:\n *\n * Consider a component 'A' that extends component 'B', both declared in module 'M'. During\n * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,\n * potentially triggering compilation of 'B'. If this nested compilation were to trigger\n * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the\n * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of\n * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid\n * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure\n * all compilations have finished.\n */\nlet compilationDepth = 0;\n\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * component def (ɵcmp) onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nexport function compileComponent(type: Type<any>, metadata: Component): void {\n  // Initialize ngDevMode. This must be the first statement in compileComponent.\n  // See the `initNgDevMode` docstring for more information.\n  (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n\n  let ngComponentDef: any = null;\n\n  // Metadata may have resources which need to be resolved.\n  maybeQueueResolutionOfComponentResources(type, metadata);\n\n  // Note that we're using the same function as `Directive`, because that's only subset of metadata\n  // that we need to create the ngFactoryDef. We're avoiding using the component metadata\n  // because we'd have to resolve the asynchronous templates.\n  addDirectiveFactoryDef(type, metadata);\n\n  Object.defineProperty(type, NG_COMP_DEF, {\n    get: () => {\n      if (ngComponentDef === null) {\n        const compiler =\n            getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'component', type: type});\n\n        if (componentNeedsResolution(metadata)) {\n          const error = [`Component '${type.name}' is not resolved:`];\n          if (metadata.templateUrl) {\n            error.push(` - templateUrl: ${metadata.templateUrl}`);\n          }\n          if (metadata.styleUrls && metadata.styleUrls.length) {\n            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n          }\n          error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n          throw new Error(error.join('\\n'));\n        }\n\n        // This const was called `jitOptions` previously but had to be renamed to `options` because\n        // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.\n        // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.\n        // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.\n        const options = getJitOptions();\n        let preserveWhitespaces = metadata.preserveWhitespaces;\n        if (preserveWhitespaces === undefined) {\n          if (options !== null && options.preserveWhitespaces !== undefined) {\n            preserveWhitespaces = options.preserveWhitespaces;\n          } else {\n            preserveWhitespaces = false;\n          }\n        }\n        let encapsulation = metadata.encapsulation;\n        if (encapsulation === undefined) {\n          if (options !== null && options.defaultEncapsulation !== undefined) {\n            encapsulation = options.defaultEncapsulation;\n          } else {\n            encapsulation = ViewEncapsulation.Emulated;\n          }\n        }\n\n        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\n        const meta: R3ComponentMetadataFacade = {\n          ...directiveMetadata(type, metadata),\n          typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),\n          template: metadata.template || '',\n          preserveWhitespaces,\n          styles: metadata.styles || EMPTY_ARRAY,\n          animations: metadata.animations,\n          directives: [],\n          changeDetection: metadata.changeDetection,\n          pipes: new Map(),\n          encapsulation,\n          interpolation: metadata.interpolation,\n          viewProviders: metadata.viewProviders || null,\n        };\n\n        compilationDepth++;\n        try {\n          if (meta.usesInheritance) {\n            addDirectiveDefToUndecoratedParents(type);\n          }\n          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n        } finally {\n          // Ensure that the compilation depth is decremented even when the compilation failed.\n          compilationDepth--;\n        }\n\n        if (compilationDepth === 0) {\n          // When NgModule decorator executed, we enqueued the module definition such that\n          // it would only dequeue and add itself as module scope to all of its declarations,\n          // but only if  if all of its declarations had resolved. This call runs the check\n          // to see if any modules that are in the queue can be dequeued and add scope to\n          // their declarations.\n          flushModuleScopingQueueAsMuchAsPossible();\n        }\n\n        // If component compilation is async, then the @NgModule annotation which declares the\n        // component may execute and set an ngSelectorScope property on the component type. This\n        // allows the component to patch itself with directiveDefs from the module after it\n        // finishes compiling.\n        if (hasSelectorScope(type)) {\n          const scopes = transitiveScopesFor(type.ngSelectorScope);\n          patchComponentDefWithScope(ngComponentDef, scopes);\n        }\n      }\n      return ngComponentDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nfunction hasSelectorScope<T>(component: Type<T>): component is Type<T>&\n    {ngSelectorScope: Type<any>} {\n  return (component as {ngSelectorScope?: any}).ngSelectorScope !== undefined;\n}\n\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * directive def onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nexport function compileDirective(type: Type<any>, directive: Directive|null): void {\n  let ngDirectiveDef: any = null;\n\n  addDirectiveFactoryDef(type, directive || {});\n\n  Object.defineProperty(type, NG_DIR_DEF, {\n    get: () => {\n      if (ngDirectiveDef === null) {\n        // `directive` can be null in the case of abstract directives as a base class\n        // that use `@Directive()` with no selector. In that case, pass empty object to the\n        // `directiveMetadata` function instead of null.\n        const meta = getDirectiveMetadata(type, directive || {});\n        const compiler =\n            getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'directive', type});\n        ngDirectiveDef =\n            compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);\n      }\n      return ngDirectiveDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nfunction getDirectiveMetadata(type: Type<any>, metadata: Directive) {\n  const name = type && type.name;\n  const sourceMapUrl = `ng:///${name}/ɵdir.js`;\n  const compiler = getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'directive', type});\n  const facade = directiveMetadata(type as ComponentType<any>, metadata);\n  facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n  if (facade.usesInheritance) {\n    addDirectiveDefToUndecoratedParents(type);\n  }\n  return {metadata: facade, sourceMapUrl};\n}\n\nfunction addDirectiveFactoryDef(type: Type<any>, metadata: Directive|Component) {\n  let ngFactoryDef: any = null;\n\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const meta = getDirectiveMetadata(type, metadata);\n        const compiler =\n            getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'directive', type});\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, {\n          name: meta.metadata.name,\n          type: meta.metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Directive\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nexport function extendsDirectlyFromObject(type: Type<any>): boolean {\n  return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n */\nexport function directiveMetadata(type: Type<any>, metadata: Directive): R3DirectiveMetadataFacade {\n  // Reflect inputs and outputs.\n  const reflect = getReflect();\n  const propMetadata = reflect.ownPropMetadata(type);\n\n  return {\n    name: type.name,\n    type: type,\n    selector: metadata.selector !== undefined ? metadata.selector : null,\n    host: metadata.host || EMPTY_OBJ,\n    propMetadata: propMetadata,\n    inputs: metadata.inputs || EMPTY_ARRAY,\n    outputs: metadata.outputs || EMPTY_ARRAY,\n    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n    lifecycle: {usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')},\n    typeSourceSpan: null!,\n    usesInheritance: !extendsDirectlyFromObject(type),\n    exportAs: extractExportAs(metadata.exportAs),\n    providers: metadata.providers || null,\n    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery)\n  };\n}\n\n/**\n * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.\n */\nfunction addDirectiveDefToUndecoratedParents(type: Type<any>) {\n  const objPrototype = Object.prototype;\n  let parent = Object.getPrototypeOf(type.prototype).constructor;\n\n  // Go up the prototype until we hit `Object`.\n  while (parent && parent !== objPrototype) {\n    // Since inheritance works if the class was annotated already, we only need to add\n    // the def if there are no annotations and the def hasn't been created already.\n    if (!getDirectiveDef(parent) && !getComponentDef(parent) &&\n        shouldAddAbstractDirective(parent)) {\n      compileDirective(parent, null);\n    }\n    parent = Object.getPrototypeOf(parent);\n  }\n}\n\nfunction convertToR3QueryPredicate(selector: any): any|string[] {\n  return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\n\nexport function convertToR3QueryMetadata(propertyName: string, ann: Query): R3QueryMetadataFacade {\n  return {\n    propertyName: propertyName,\n    predicate: convertToR3QueryPredicate(ann.selector),\n    descendants: ann.descendants,\n    first: ann.first,\n    read: ann.read ? ann.read : null,\n    static: !!ann.static,\n    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,\n  };\n}\nfunction extractQueriesMetadata(\n    type: Type<any>, propMetadata: {[key: string]: any[]},\n    isQueryAnn: (ann: any) => ann is Query): R3QueryMetadataFacade[] {\n  const queriesMeta: R3QueryMetadataFacade[] = [];\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      const annotations = propMetadata[field];\n      annotations.forEach(ann => {\n        if (isQueryAnn(ann)) {\n          if (!ann.selector) {\n            throw new Error(\n                `Can't construct a query for the property \"${field}\" of ` +\n                `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\n          }\n          if (annotations.some(isInputAnnotation)) {\n            throw new Error(`Cannot combine @Input decorators with query decorators`);\n          }\n          queriesMeta.push(convertToR3QueryMetadata(field, ann));\n        }\n      });\n    }\n  }\n  return queriesMeta;\n}\n\nfunction extractExportAs(exportAs: string|undefined): string[]|null {\n  return exportAs === undefined ? null : splitByComma(exportAs);\n}\n\nfunction isContentQuery(value: any): value is Query {\n  const name = value.ngMetadataName;\n  return name === 'ContentChild' || name === 'ContentChildren';\n}\n\nfunction isViewQuery(value: any): value is Query {\n  const name = value.ngMetadataName;\n  return name === 'ViewChild' || name === 'ViewChildren';\n}\n\nfunction isInputAnnotation(value: any): value is Input {\n  return value.ngMetadataName === 'Input';\n}\n\nfunction splitByComma(value: string): string[] {\n  return value.split(',').map(piece => piece.trim());\n}\n\nconst LIFECYCLE_HOOKS = [\n  'ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked',\n  'ngAfterContentInit', 'ngAfterContentChecked'\n];\n\nfunction shouldAddAbstractDirective(type: Type<any>): boolean {\n  const reflect = getReflect();\n\n  if (LIFECYCLE_HOOKS.some(hookName => reflect.hasLifecycleHook(type, hookName))) {\n    return true;\n  }\n\n  const propMetadata = reflect.propMetadata(type);\n\n  for (const field in propMetadata) {\n    const annotations = propMetadata[field];\n\n    for (let i = 0; i < annotations.length; i++) {\n      const current = annotations[i];\n      const metadataName = current.ngMetadataName;\n\n      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) ||\n          metadataName === 'Output' || metadataName === 'HostBinding' ||\n          metadataName === 'HostListener') {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {Provider} from '../di/interface/provider';\nimport {Type} from '../interface/type';\nimport {compileComponent, compileDirective} from '../render3/jit/directive';\nimport {compilePipe} from '../render3/jit/pipe';\nimport {makeDecorator, makePropDecorator, TypeDecorator} from '../util/decorators';\n\nimport {ViewEncapsulation} from './view';\n\n\n\n/**\n * Type of the Directive decorator / constructor function.\n * @publicApi\n */\nexport interface DirectiveDecorator {\n  /**\n   * Decorator that marks a class as an Angular directive.\n   * You can define your own directives to attach custom behavior to elements in the DOM.\n   *\n   * The options provide configuration metadata that determines\n   * how the directive should be processed, instantiated and used at\n   * runtime.\n   *\n   * Directive classes, like component classes, can implement\n   * [life-cycle hooks](guide/lifecycle-hooks) to influence their configuration and behavior.\n   *\n   *\n   * @usageNotes\n   * To define a directive, mark the class with the decorator and provide metadata.\n   *\n   * ```ts\n   * import {Directive} from '@angular/core';\n   *\n   * @Directive({\n   *   selector: 'my-directive',\n   * })\n   * export class MyDirective {\n   * ...\n   * }\n   * ```\n   *\n   * ### Declaring directives\n   *\n   * Directives are [declarables](guide/glossary#declarable).\n   * They must be declared by an NgModule\n   * in order to be usable in an app.\n   *\n   * A directive must belong to exactly one NgModule. Do not re-declare\n   * a directive imported from another module.\n   * List the directive class in the `declarations` field of an NgModule.\n   *\n   * ```ts\n   * declarations: [\n   *  AppComponent,\n   *  MyDirective\n   * ],\n   * ```\n   *\n   * @Annotation\n   */\n  (obj?: Directive): TypeDecorator;\n\n  /**\n   * See the `Directive` decorator.\n   */\n  new(obj?: Directive): Directive;\n}\n\n/**\n * Directive decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport interface Directive {\n  /**\n   * The CSS selector that identifies this directive in a template\n   * and triggers instantiation of the directive.\n   *\n   * Declare as one of the following:\n   *\n   * - `element-name`: Select by element name.\n   * - `.class`: Select by class name.\n   * - `[attribute]`: Select by attribute name.\n   * - `[attribute=value]`: Select by attribute name and value.\n   * - `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n   * - `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n   *\n   * Angular only allows directives to apply on CSS selectors that do not cross\n   * element boundaries.\n   *\n   * For the following template HTML, a directive with an `input[type=text]` selector,\n   * would be instantiated only on the `<input type=\"text\">` element.\n   *\n   * ```html\n   * <form>\n   *   <input type=\"text\">\n   *   <input type=\"radio\">\n   * <form>\n   * ```\n   *\n   */\n  selector?: string;\n\n  /**\n   * Enumerates the set of data-bound input properties for a directive\n   *\n   * Angular automatically updates input properties during change detection.\n   * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`\n   * configuration:\n   *\n   * - `directiveProperty` specifies the component property where the value is written.\n   * - `bindingProperty` specifies the DOM property where the value is read from.\n   *\n   * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.\n   *\n   * @usageNotes\n   *\n   * The following example creates a component with two data-bound properties.\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'bank-account',\n   *   inputs: ['bankName', 'id: account-id'],\n   *   template: `\n   *     Bank Name: {{bankName}}\n   *     Account Id: {{id}}\n   *   `\n   * })\n   * class BankAccount {\n   *   bankName: string;\n   *   id: string;\n   * }\n   * ```\n   *\n   */\n  inputs?: string[];\n\n  /**\n   * Enumerates the set of event-bound output properties.\n   *\n   * When an output property emits an event, an event handler attached to that event\n   * in the template is invoked.\n   *\n   * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`\n   * configuration:\n   *\n   * - `directiveProperty` specifies the component property that emits events.\n   * - `bindingProperty` specifies the DOM property the event handler is attached to.\n   *\n   * @usageNotes\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'child-dir',\n   *   outputs: [ 'bankNameChange' ]\n   *   template: `<input (input)=\"bankNameChange.emit($event.target.value)\" />`\n   * })\n   * class ChildDir {\n   *  bankNameChange: EventEmitter<string> = new EventEmitter<string>();\n   * }\n   *\n   * @Component({\n   *   selector: 'main',\n   *   template: `\n   *     {{ bankName }} <child-dir (bankNameChange)=\"onBankNameChange($event)\"></child-dir>\n   *   `\n   * })\n   * class MainComponent {\n   *  bankName: string;\n   *\n   *   onBankNameChange(bankName: string) {\n   *     this.bankName = bankName;\n   *   }\n   * }\n   * ```\n   *\n   */\n  outputs?: string[];\n\n  /**\n   * Configures the [injector](guide/glossary#injector) of this\n   * directive or component with a [token](guide/glossary#di-token)\n   * that maps to a [provider](guide/glossary#provider) of a dependency.\n   */\n  providers?: Provider[];\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * @usageNotes\n   *\n   * ```ts\n   * @Directive({\n   *   selector: 'child-dir',\n   *   exportAs: 'child'\n   * })\n   * class ChildDir {\n   * }\n   *\n   * @Component({\n   *   selector: 'main',\n   *   template: `<child-dir #c=\"child\"></child-dir>`\n   * })\n   * class MainComponent {\n   * }\n   * ```\n   *\n   */\n  exportAs?: string;\n\n  /**\n   * Configures the queries that will be injected into the directive.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * @usageNotes\n   *\n   * The following example shows how queries are defined\n   * and when their results are available in lifecycle hooks:\n   *\n   * ```ts\n   * @Component({\n   *   selector: 'someDir',\n   *   queries: {\n   *     contentChildren: new ContentChildren(ChildDirective),\n   *     viewChildren: new ViewChildren(ChildDirective)\n   *   },\n   *   template: '<child-directive></child-directive>'\n   * })\n   * class SomeDir {\n   *   contentChildren: QueryList<ChildDirective>,\n   *   viewChildren: QueryList<ChildDirective>\n   *\n   *   ngAfterContentInit() {\n   *     // contentChildren is set\n   *   }\n   *\n   *   ngAfterViewInit() {\n   *     // viewChildren is set\n   *   }\n   * }\n   * ```\n   *\n   * @Annotation\n   */\n  queries?: {[key: string]: any};\n\n  /**\n   * Maps class properties to host element bindings for properties,\n   * attributes, and events, using a set of key-value pairs.\n   *\n   * Angular automatically checks host property bindings during change detection.\n   * If a binding changes, Angular updates the directive's host element.\n   *\n   * When the key is a property of the host element, the property value is\n   * the propagated to the specified DOM property.\n   *\n   * When the key is a static attribute in the DOM, the attribute value\n   * is propagated to the specified property in the host element.\n   *\n   * For event handling:\n   * - The key is the DOM event that the directive listens to.\n   * To listen to global events, add the target to the event name.\n   * The target can be `window`, `document` or `body`.\n   * - The value is the statement to execute when the event occurs. If the\n   * statement evaluates to `false`, then `preventDefault` is applied on the DOM\n   * event. A handler method can refer to the `$event` local variable.\n   *\n   */\n  host?: {[key: string]: string};\n\n  /**\n   * When present, this directive/component is ignored by the AOT compiler.\n   * It remains in distributed code, and the JIT compiler attempts to compile it\n   * at run time, in the browser.\n   * To ensure the correct behavior, the app must import `@angular/compiler`.\n   */\n  jit?: true;\n}\n\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nexport const Directive: DirectiveDecorator = makeDecorator(\n    'Directive', (dir: Directive = {}) => dir, undefined, undefined,\n    (type: Type<any>, meta: Directive) => compileDirective(type, meta));\n\n/**\n * Component decorator interface\n *\n * @publicApi\n */\nexport interface ComponentDecorator {\n  /**\n   * Decorator that marks a class as an Angular component and provides configuration\n   * metadata that determines how the component should be processed,\n   * instantiated, and used at runtime.\n   *\n   * Components are the most basic UI building block of an Angular app.\n   * An Angular app contains a tree of Angular components.\n   *\n   * Angular components are a subset of directives, always associated with a template.\n   * Unlike other directives, only one component can be instantiated for a given element in a\n   * template.\n   *\n   * A component must belong to an NgModule in order for it to be available\n   * to another component or application. To make it a member of an NgModule,\n   * list it in the `declarations` field of the `NgModule` metadata.\n   *\n   * Note that, in addition to these options for configuring a directive,\n   * you can control a component's runtime behavior by implementing\n   * life-cycle hooks. For more information, see the\n   * [Lifecycle Hooks](guide/lifecycle-hooks) guide.\n   *\n   * @usageNotes\n   *\n   * ### Setting component inputs\n   *\n   * The following example creates a component with two data-bound properties,\n   * specified by the `inputs` value.\n   *\n   * <code-example path=\"core/ts/metadata/directives.ts\" region=\"component-input\"></code-example>\n   *\n   *\n   * ### Setting component outputs\n   *\n   * The following example shows two event emitters that emit on an interval. One\n   * emits an output every second, while the other emits every five seconds.\n   *\n   * {@example core/ts/metadata/directives.ts region='component-output-interval'}\n   *\n   * ### Injecting a class with a view provider\n   *\n   * The following simple example injects a class into a component\n   * using the view provider specified in component metadata:\n   *\n   * ```ts\n   * class Greeter {\n   *    greet(name:string) {\n   *      return 'Hello ' + name + '!';\n   *    }\n   * }\n   *\n   * @Directive({\n   *   selector: 'needs-greeter'\n   * })\n   * class NeedsGreeter {\n   *   greeter:Greeter;\n   *\n   *   constructor(greeter:Greeter) {\n   *     this.greeter = greeter;\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'greet',\n   *   viewProviders: [\n   *     Greeter\n   *   ],\n   *   template: `<needs-greeter></needs-greeter>`\n   * })\n   * class HelloWorld {\n   * }\n   *\n   * ```\n   *\n   * ### Preserving whitespace\n   *\n   * Removing whitespace can greatly reduce AOT-generated code size and speed up view creation.\n   * As of Angular 6, the default for `preserveWhitespaces` is false (whitespace is removed).\n   * To change the default setting for all components in your application, set\n   * the `preserveWhitespaces` option of the AOT compiler.\n   *\n   * By default, the AOT compiler removes whitespace characters as follows:\n   * * Trims all whitespaces at the beginning and the end of a template.\n   * * Removes whitespace-only text nodes. For example,\n   *\n   * ```html\n   * <button>Action 1</button>  <button>Action 2</button>\n   * ```\n   *\n   * becomes:\n   *\n   * ```html\n   * <button>Action 1</button><button>Action 2</button>\n   * ```\n   *\n   * * Replaces a series of whitespace characters in text nodes with a single space.\n   * For example, `<span>\\n some text\\n</span>` becomes `<span> some text </span>`.\n   * * Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,\n   * where whitespace characters are significant.\n   *\n   * Note that these transformations can influence DOM nodes layout, although impact\n   * should be minimal.\n   *\n   * You can override the default behavior to preserve whitespace characters\n   * in certain fragments of a template. For example, you can exclude an entire\n   * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:\n   *\n   * ```html\n   * <div ngPreserveWhitespaces>\n   *     whitespaces are preserved here\n   *     <span>    and here </span>\n   * </div>\n   * ```\n   *\n   * You can force a single space to be preserved in a text node by using `&ngsp;`,\n   * which is replaced with a space character by Angular's template\n   * compiler:\n   *\n   * ```html\n   * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n   * <!-- compiled to be equivalent to:\n   *  <a>Spaces</a> <a>between</a> <a>links.</a>  -->\n   * ```\n   *\n   * Note that sequences of `&ngsp;` are still collapsed to just one space character when\n   * the `preserveWhitespaces` option is set to `false`.\n   *\n   * ```html\n   * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n   * <!-- compiled to be equivalent to:\n   *  <a>before</a> <a>after</a> -->\n   * ```\n   *\n   * To preserve sequences of whitespace characters, use the\n   * `ngPreserveWhitespaces` attribute.\n   *\n   * @Annotation\n   */\n  (obj: Component): TypeDecorator;\n  /**\n   * See the `Component` decorator.\n   */\n  new(obj: Component): Component;\n}\n\n/**\n * Supplies configuration metadata for an Angular component.\n *\n * @publicApi\n */\nexport interface Component extends Directive {\n  /**\n   * The change-detection strategy to use for this component.\n   *\n   * When a component is instantiated, Angular creates a change detector,\n   * which is responsible for propagating the component's bindings.\n   * The strategy is one of:\n   * - `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\n   * - `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Defines the set of injectable objects that are visible to its view DOM children.\n   * See [example](#injecting-a-class-with-a-view-provider).\n   *\n   */\n  viewProviders?: Provider[];\n\n  /**\n   * The module ID of the module that contains the component.\n   * The component must be able to resolve relative URLs for templates and styles.\n   * SystemJS exposes the `__moduleName` variable within each module.\n   * In CommonJS, this can  be set to `module.id`.\n   *\n   */\n  moduleId?: string;\n\n  /**\n   * The relative path or absolute URL of a template file for an Angular component.\n   * If provided, do not supply an inline template using `template`.\n   *\n   */\n  templateUrl?: string;\n\n  /**\n   * An inline template for an Angular component. If provided,\n   * do not supply a template file using `templateUrl`.\n   *\n   */\n  template?: string;\n\n  /**\n   * One or more relative paths or absolute URLs for files containing CSS stylesheets to use\n   * in this component.\n   */\n  styleUrls?: string[];\n\n  /**\n   * One or more inline CSS stylesheets to use\n   * in this component.\n   */\n  styles?: string[];\n\n  /**\n   * One or more animation `trigger()` calls, containing\n   * [`state()`](api/animations/state) and `transition()` definitions.\n   * See the [Animations guide](/guide/animations) and animations API documentation.\n   *\n   */\n  animations?: any[];\n\n  /**\n   * An encapsulation policy for the component's styling.\n   * Possible values:\n   * - `ViewEncapsulation.Emulated`: Apply modified component styles in order to emulate\n   *                                 a native Shadow DOM CSS encapsulation behavior.\n   * - `ViewEncapsulation.None`: Apply component styles globally without any sort of encapsulation.\n   * - `ViewEncapsulation.ShadowDom`: Use the browser's native Shadow DOM API to encapsulate styles.\n   *\n   * If not supplied, the value is taken from the `CompilerOptions`\n   * which defaults to `ViewEncapsulation.Emulated`.\n   *\n   * If the policy is `ViewEncapsulation.Emulated` and the component has no\n   * {@link Component#styles styles} nor {@link Component#styleUrls styleUrls},\n   * the policy is automatically switched to `ViewEncapsulation.None`.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Overrides the default interpolation start and end delimiters (`{{` and `}}`).\n   */\n  interpolation?: [string, string];\n\n  /**\n   * A set of components that should be compiled along with\n   * this component. For each component listed here,\n   * Angular creates a {@link ComponentFactory} and stores it in the\n   * {@link ComponentFactoryResolver}.\n   * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n   */\n  entryComponents?: Array<Type<any>|any[]>;\n\n  /**\n   * True to preserve or false to remove potentially superfluous whitespace characters\n   * from the compiled template. Whitespace characters are those matching the `\\s`\n   * character class in JavaScript regular expressions. Default is false, unless\n   * overridden in compiler options.\n   */\n  preserveWhitespaces?: boolean;\n}\n\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Component: ComponentDecorator = makeDecorator(\n    'Component', (c: Component = {}) => ({changeDetection: ChangeDetectionStrategy.Default, ...c}),\n    Directive, undefined, (type: Type<any>, meta: Component) => compileComponent(type, meta));\n\n/**\n * Type of the Pipe decorator / constructor function.\n *\n * @publicApi\n */\nexport interface PipeDecorator {\n  /**\n   *\n   * Decorator that marks a class as pipe and supplies configuration metadata.\n   *\n   * A pipe class must implement the `PipeTransform` interface.\n   * For example, if the name is \"myPipe\", use a template binding expression\n   * such as the following:\n   *\n   * ```\n   * {{ exp | myPipe }}\n   * ```\n   *\n   * The result of the expression is passed to the pipe's `transform()` method.\n   *\n   * A pipe must belong to an NgModule in order for it to be available\n   * to a template. To make it a member of an NgModule,\n   * list it in the `declarations` field of the `NgModule` metadata.\n   *\n   * @see [Style Guide: Pipe Names](guide/styleguide#02-09)\n   *\n   */\n  (obj: Pipe): TypeDecorator;\n\n  /**\n   * See the `Pipe` decorator.\n   */\n  new(obj: Pipe): Pipe;\n}\n\n/**\n * Type of the Pipe metadata.\n *\n * @publicApi\n */\nexport interface Pipe {\n  /**\n   * The pipe name to use in template bindings.\n   * Typically uses [lowerCamelCase](guide/glossary#case-types)\n   * because the name cannot contain hyphens.\n   */\n  name: string;\n\n  /**\n   * When true, the pipe is pure, meaning that the\n   * `transform()` method is invoked only when its input arguments\n   * change. Pipes are pure by default.\n   *\n   * If the pipe has internal state (that is, the result\n   * depends on state other than its arguments), set `pure` to false.\n   * In this case, the pipe is invoked on each change-detection cycle,\n   * even if the arguments have not changed.\n   */\n  pure?: boolean;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const Pipe: PipeDecorator = makeDecorator(\n    'Pipe', (p: Pipe) => ({pure: true, ...p}), undefined, undefined,\n    (type: Type<any>, meta: Pipe) => compilePipe(type, meta));\n\n\n/**\n * @publicApi\n */\nexport interface InputDecorator {\n  /**\n   * Decorator that marks a class field as an input property and supplies configuration metadata.\n   * The input property is bound to a DOM property in the template. During change detection,\n   * Angular automatically updates the data property with the DOM property's value.\n   *\n   * @usageNotes\n   *\n   * You can supply an optional name to use in templates when the\n   * component is instantiated, that maps to the\n   * name of the bound property. By default, the original\n   * name of the bound property is used for input binding.\n   *\n   * The following example creates a component with two input properties,\n   * one of which is given a special binding name.\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'bank-account',\n   *   template: `\n   *     Bank Name: {{bankName}}\n   *     Account Id: {{id}}\n   *   `\n   * })\n   * class BankAccount {\n   *   // This property is bound using its original name.\n   *   @Input() bankName: string;\n   *   // this property value is bound to a different property name\n   *   // when this component is instantiated in a template.\n   *   @Input('account-id') id: string;\n   *\n   *   // this property is not bound, and is not automatically updated by Angular\n   *   normalizedBankName: string;\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   template: `\n   *     <bank-account bankName=\"RBC\" account-id=\"4747\"></bank-account>\n   *   `\n   * })\n   * class App {}\n   * ```\n   *\n   * @see [Input and Output properties](guide/inputs-outputs)\n   */\n  (bindingPropertyName?: string): any;\n  new(bindingPropertyName?: string): any;\n}\n\n/**\n * Type of metadata for an `Input` property.\n *\n * @publicApi\n */\nexport interface Input {\n  /**\n   * The name of the DOM property to which the input property is bound.\n   */\n  bindingPropertyName?: string;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const Input: InputDecorator =\n    makePropDecorator('Input', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\n/**\n * Type of the Output decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OutputDecorator {\n  /**\n   * Decorator that marks a class field as an output property and supplies configuration metadata.\n   * The DOM property bound to the output property is automatically updated during change detection.\n   *\n   * @usageNotes\n   *\n   * You can supply an optional name to use in templates when the\n   * component is instantiated, that maps to the\n   * name of the bound property. By default, the original\n   * name of the bound property is used for output binding.\n   *\n   * See `Input` decorator for an example of providing a binding name.\n   *\n   * @see [Input and Output properties](guide/inputs-outputs)\n   *\n   */\n  (bindingPropertyName?: string): any;\n  new(bindingPropertyName?: string): any;\n}\n\n/**\n * Type of the Output metadata.\n *\n * @publicApi\n */\nexport interface Output {\n  /**\n   * The name of the DOM property to which the output property is bound.\n   */\n  bindingPropertyName?: string;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const Output: OutputDecorator =\n    makePropDecorator('Output', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\n\n\n/**\n * Type of the HostBinding decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostBindingDecorator {\n  /**\n   * Decorator that marks a DOM property as a host-binding property and supplies configuration\n   * metadata.\n   * Angular automatically checks host property bindings during change detection, and\n   * if a binding changes it updates the host element of the directive.\n   *\n   * @usageNotes\n   *\n   * The following example creates a directive that sets the `valid` and `invalid`\n   * properties on the DOM element that has an `ngModel` directive on it.\n   *\n   * ```typescript\n   * @Directive({selector: '[ngModel]'})\n   * class NgModelStatus {\n   *   constructor(public control: NgModel) {}\n   *   @HostBinding('class.valid') get valid() { return this.control.valid; }\n   *   @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   template: `<input [(ngModel)]=\"prop\">`,\n   * })\n   * class App {\n   *   prop;\n   * }\n   * ```\n   *\n   */\n  (hostPropertyName?: string): any;\n  new(hostPropertyName?: string): any;\n}\n\n/**\n * Type of the HostBinding metadata.\n *\n * @publicApi\n */\nexport interface HostBinding {\n  /**\n   * The DOM property that is bound to a data property.\n   */\n  hostPropertyName?: string;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const HostBinding: HostBindingDecorator =\n    makePropDecorator('HostBinding', (hostPropertyName?: string) => ({hostPropertyName}));\n\n\n/**\n * Type of the HostListener decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostListenerDecorator {\n  /**\n   * Decorator that declares a DOM event to listen for,\n   * and provides a handler method to run when that event occurs.\n   *\n   * Angular invokes the supplied handler method when the host element emits the specified event,\n   * and updates the bound element with the result.\n   *\n   * If the handler method returns false, applies `preventDefault` on the bound element.\n   */\n  (eventName: string, args?: string[]): any;\n  new(eventName: string, args?: string[]): any;\n}\n\n/**\n * Type of the HostListener metadata.\n *\n * @publicApi\n */\nexport interface HostListener {\n  /**\n   * The DOM event to listen for.\n   */\n  eventName?: string;\n  /**\n   * A set of arguments to pass to the handler method when the event occurs.\n   */\n  args?: string[];\n}\n\n/**\n * Decorator that binds a DOM event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n *\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```ts\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *   }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n *\n * ```\n *\n * The following example registers another DOM event handler that listens for key-press events.\n * ``` ts\n * import { HostListener, Component } from \"@angular/core\";\n *\n * @Component({\n *   selector: 'app',\n *   template: `<h1>Hello, you have pressed keys {{counter}} number of times!</h1> Press any key to\n * increment the counter.\n *   <button (click)=\"resetCounter()\">Reset Counter</button>`\n * })\n * class AppComponent {\n *   counter = 0;\n *   @HostListener('window:keydown', ['$event'])\n *   handleKeyDown(event: KeyboardEvent) {\n *     this.counter++;\n *   }\n *   resetCounter() {\n *     this.counter = 0;\n *   }\n * }\n * ```\n *\n * @Annotation\n * @publicApi\n */\nexport const HostListener: HostListenerDecorator =\n    makePropDecorator('HostListener', (eventName?: string, args?: string[]) => ({eventName, args}));\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Provider} from '../di/interface/provider';\nimport {Type} from '../interface/type';\nimport {SchemaMetadata} from '../metadata/schema';\nimport {compileNgModule} from '../render3/jit/module';\nimport {makeDecorator, TypeDecorator} from '../util/decorators';\n\n\n/**\n * A wrapper around an NgModule that associates it with [providers](guide/glossary#provider\n * \"Definition\"). Usage without a generic type is deprecated.\n *\n * @see [Deprecations](guide/deprecations#modulewithproviders-type-without-a-generic)\n *\n * @publicApi\n */\nexport interface ModuleWithProviders<T> {\n  ngModule: Type<T>;\n  providers?: Provider[];\n}\n\n\n/**\n * Type of the NgModule decorator / constructor function.\n *\n * @publicApi\n */\nexport interface NgModuleDecorator {\n  /**\n   * Decorator that marks a class as an NgModule and supplies configuration metadata.\n   */\n  (obj?: NgModule): TypeDecorator;\n  new(obj?: NgModule): NgModule;\n}\n\n/**\n * Type of the NgModule metadata.\n *\n * @publicApi\n */\nexport interface NgModule {\n  /**\n   * The set of injectable objects that are available in the injector\n   * of this module.\n   *\n   * @see [Dependency Injection guide](guide/dependency-injection)\n   * @see [NgModule guide](guide/providers)\n   *\n   * @usageNotes\n   *\n   * Dependencies whose providers are listed here become available for injection\n   * into any component, directive, pipe or service that is a child of this injector.\n   * The NgModule used for bootstrapping uses the root injector, and can provide dependencies\n   * to any part of the app.\n   *\n   * A lazy-loaded module has its own injector, typically a child of the app root injector.\n   * Lazy-loaded services are scoped to the lazy-loaded module's injector.\n   * If a lazy-loaded module also provides the `UserService`, any component created\n   * within that module's context (such as by router navigation) gets the local instance\n   * of the service, not the instance in the root injector.\n   * Components in external modules continue to receive the instance provided by their injectors.\n   *\n   * ### Example\n   *\n   * The following example defines a class that is injected in\n   * the HelloWorld NgModule:\n   *\n   * ```\n   * class Greeter {\n   *    greet(name:string) {\n   *      return 'Hello ' + name + '!';\n   *    }\n   * }\n   *\n   * @NgModule({\n   *   providers: [\n   *     Greeter\n   *   ]\n   * })\n   * class HelloWorld {\n   *   greeter:Greeter;\n   *\n   *   constructor(greeter:Greeter) {\n   *     this.greeter = greeter;\n   *   }\n   * }\n   * ```\n   */\n  providers?: Provider[];\n\n  /**\n   * The set of components, directives, and pipes ([declarables](guide/glossary#declarable))\n   * that belong to this module.\n   *\n   * @usageNotes\n   *\n   * The set of selectors that are available to a template include those declared here, and\n   * those that are exported from imported NgModules.\n   *\n   * Declarables must belong to exactly one module.\n   * The compiler emits an error if you try to declare the same class in more than one module.\n   * Be careful not to declare a class that is imported from another module.\n   *\n   * ### Example\n   *\n   * The following example allows the CommonModule to use the `NgFor`\n   * directive.\n   *\n   * ```javascript\n   * @NgModule({\n   *   declarations: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  declarations?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of NgModules whose exported [declarables](guide/glossary#declarable)\n   * are available to templates in this module.\n   *\n   * @usageNotes\n   *\n   * A template can use exported declarables from any\n   * imported module, including those from modules that are imported indirectly\n   * and re-exported.\n   * For example, `ModuleA` imports `ModuleB`, and also exports\n   * it, which makes the declarables from `ModuleB` available\n   * wherever `ModuleA` is imported.\n   *\n   * ### Example\n   *\n   * The following example allows MainModule to use anything exported by\n   * `CommonModule`:\n   *\n   * ```javascript\n   * @NgModule({\n   *   imports: [CommonModule]\n   * })\n   * class MainModule {\n   * }\n   * ```\n   *\n   */\n  imports?: Array<Type<any>|ModuleWithProviders<{}>|any[]>;\n\n  /**\n   * The set of components, directives, and pipes declared in this\n   * NgModule that can be used in the template of any component that is part of an\n   * NgModule that imports this NgModule. Exported declarations are the module's public API.\n   *\n   * A declarable belongs to one and only one NgModule.\n   * A module can list another module among its exports, in which case all of that module's\n   * public declaration are exported.\n   *\n   * @usageNotes\n   *\n   * Declarations are private by default.\n   * If this ModuleA does not export UserComponent, then only the components within this\n   * ModuleA can use UserComponent.\n   *\n   * ModuleA can import ModuleB and also export it, making exports from ModuleB\n   * available to an NgModule that imports ModuleA.\n   *\n   * ### Example\n   *\n   * The following example exports the `NgFor` directive from CommonModule.\n   *\n   * ```javascript\n   * @NgModule({\n   *   exports: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  exports?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of components to compile when this NgModule is defined,\n   * so that they can be dynamically loaded into the view.\n   *\n   * For each component listed here, Angular creates a `ComponentFactory`\n   * and stores it in the `ComponentFactoryResolver`.\n   *\n   * Angular automatically adds components in the module's bootstrap\n   * and route definitions into the `entryComponents` list. Use this\n   * option to add components that are bootstrapped\n   * using one of the imperative techniques, such as `ViewContainerRef.createComponent()`.\n   *\n   * @see [Entry Components](guide/entry-components)\n   * @deprecated\n   * Since 9.0.0. With Ivy, this property is no longer necessary.\n   * (You may need to keep these if building a library that will be consumed by a View Engine\n   * application.)\n   */\n  entryComponents?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of components that are bootstrapped when\n   * this module is bootstrapped. The components listed here\n   * are automatically added to `entryComponents`.\n   */\n  bootstrap?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the NgModule.\n   * Elements and properties that are neither Angular components nor directives\n   * must be declared in a schema.\n   *\n   * Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\n   *\n   * @security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`\n   * you must ensure that allowed elements and properties securely escape inputs.\n   */\n  schemas?: Array<SchemaMetadata|any[]>;\n\n  /**\n   * A name or path that uniquely identifies this NgModule in `getNgModuleById`.\n   * If left `undefined`, the NgModule is not registered with `getNgModuleById`.\n   */\n  id?: string;\n\n  /**\n   * When present, this module is ignored by the AOT compiler.\n   * It remains in distributed code, and the JIT compiler attempts to compile it\n   * at run time, in the browser.\n   * To ensure the correct behavior, the app must import `@angular/compiler`.\n   */\n  jit?: true;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const NgModule: NgModuleDecorator = makeDecorator(\n    'NgModule', (ngModule: NgModule) => ngModule, undefined, undefined,\n    /**\n     * Decorator that marks the following class as an NgModule, and supplies\n     * configuration metadata for it.\n     *\n     * * The `declarations` and `entryComponents` options configure the compiler\n     * with information about what belongs to the NgModule.\n     * * The `providers` options configures the NgModule's injector to provide\n     * dependencies the NgModule members.\n     * * The `imports` and `exports` options bring in members from other modules, and make\n     * this module's members available to others.\n     */\n    (type: Type<any>, meta: NgModule) => compileNgModule(type, meta));\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function noop(...args: any[]): any {\n  // Do nothing.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*\n * This file exists to support compilation of @angular/core in Ivy mode.\n *\n * When the Angular compiler processes a compilation unit, it normally writes imports to\n * @angular/core. When compiling the core package itself this strategy isn't usable. Instead, the\n * compiler writes imports to this file.\n *\n * Only a subset of such imports are supported - core is not allowed to declare components or pipes.\n * A check in ngtsc's `R3SymbolsImportRewriter` validates this condition. The rewriter is only used\n * when compiling @angular/core and is responsible for translating an external name (prefixed with\n * ɵ) to the internal symbol name as exported below.\n *\n * The below symbols are used for @Injectable and @NgModule compilation.\n */\n\nexport {ɵɵinject} from './di/injector_compatibility';\nexport {ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵInjectableDeclaration} from './di/interface/defs';\nexport {NgModuleDef} from './metadata/ng_module_def';\nexport {ɵɵdefineNgModule} from './render3/definition';\nexport {ɵɵFactoryDeclaration, ɵɵInjectorDeclaration, ɵɵNgModuleDeclaration} from './render3/interfaces/public_definitions';\nexport {setClassMetadata} from './render3/metadata';\nexport {NgModuleFactory} from './render3/ng_module_ref';\nexport {noSideEffects as ɵnoSideEffects} from './util/closure';\n\n\n\n/**\n * The existence of this constant (in this particular file) informs the Angular compiler that the\n * current program is actually @angular/core, which needs to be compiled specially.\n */\nexport const ITS_JUST_ANGULAR = true;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {Inject, Injectable, InjectionToken, Optional} from './di';\nimport {isObservable, isPromise} from './util/lang';\nimport {noop} from './util/noop';\n\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * @see `ApplicationInitStatus`\n *\n * @usageNotes\n *\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\n * and a function returning a promise.\n *\n * ```\n *  function initializeApp(): Promise<any> {\n *    return new Promise((resolve, reject) => {\n *      // Do some asynchronous stuff\n *      resolve();\n *    });\n *  }\n *\n *  @NgModule({\n *   imports: [BrowserModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useFactory: () => initializeApp,\n *     multi: true\n *    }]\n *   })\n *  export class AppModule {}\n * ```\n *\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\n * demo purposes to illustrate how the factory function can work with other providers available\n * through DI.\n *\n * ```\n *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {\n *   return () => httpClient.get(\"https://someUrl.com/api/user\")\n *     .pipe(\n *        tap(user => { ... })\n *     );\n *  }\n *\n *  @NgModule({\n *    imports: [BrowserModule, HttpClientModule],\n *    declarations: [AppComponent],\n *    bootstrap: [AppComponent],\n *    providers: [{\n *      provide: APP_INITIALIZER,\n *      useFactory: initializeAppFactory,\n *      deps: [HttpClient],\n *      multi: true\n *    }]\n *  })\n *  export class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport const APP_INITIALIZER =\n    new InjectionToken<ReadonlyArray<() => Observable<unknown>| Promise<unknown>| void>>(\n        'Application Initializer');\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\n@Injectable()\nexport class ApplicationInitStatus {\n  private resolve = noop;\n  private reject = noop;\n  private initialized = false;\n  public readonly donePromise: Promise<any>;\n  public readonly done = false;\n\n  constructor(@Inject(APP_INITIALIZER) @Optional() private readonly appInits:\n                  ReadonlyArray<() => Observable<unknown>| Promise<unknown>| void>) {\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const asyncInitPromises: Promise<any>[] = [];\n\n    const complete = () => {\n      (this as {done: boolean}).done = true;\n      this.resolve();\n    };\n\n    if (this.appInits) {\n      for (let i = 0; i < this.appInits.length; i++) {\n        const initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        } else if (isObservable(initResult)) {\n          const observableAsPromise = new Promise<void>((resolve, reject) => {\n            initResult.subscribe({complete: resolve, error: reject});\n          });\n          asyncInitPromises.push(observableAsPromise);\n        }\n      }\n    }\n\n    Promise.all(asyncInitPromises)\n        .then(() => {\n          complete();\n        })\n        .catch(e => {\n          this.reject(e);\n        });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './di';\nimport {ComponentRef} from './linker/component_factory';\n\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") representing a unique string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * BY default, the value is randomly generated and assigned to the application by Angular.\n * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure\n * the root {@link Injector} that uses this token.\n *\n * @publicApi\n */\nexport const APP_ID = new InjectionToken<string>('AppId');\n\nexport function _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n\n/**\n * Providers that generate a random `APP_ID_TOKEN`.\n * @publicApi\n */\nexport const APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: <any[]>[],\n};\n\nfunction _randomChar(): string {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n\n/**\n * A function that is executed when a platform is initialized.\n * @publicApi\n */\nexport const PLATFORM_INITIALIZER = new InjectionToken<Array<() => void>>('Platform Initializer');\n\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nexport const PLATFORM_ID = new InjectionToken<Object>('Platform ID');\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that provides a set of callbacks to\n * be called for every component that is bootstrapped.\n *\n * Each callback must take a `ComponentRef` instance and return nothing.\n *\n * `(componentRef: ComponentRef) => void`\n *\n * @publicApi\n */\nexport const APP_BOOTSTRAP_LISTENER =\n    new InjectionToken<Array<(compRef: ComponentRef<any>) => void>>('appBootstrapListener');\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates the root directory of\n * the application\n * @publicApi\n */\nexport const PACKAGE_ROOT_URL = new InjectionToken<string>('Application Packages Root URL');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from './di';\n\n@Injectable()\nexport class Console {\n  log(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  warn(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.warn(message);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\n\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const LOCALE_ID = new InjectionToken<string>('LocaleId');\n\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * <div class=\"alert is-helpful\">\n *\n * **Deprecation notice:**\n *\n * The default currency code is currently always `USD` but this is deprecated from v9.\n *\n * **In v10 the default currency code will be taken from the current locale.**\n *\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n * your application `NgModule`:\n *\n * ```ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * ```\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const DEFAULT_CURRENCY_CODE = new InjectionToken<string>('DefaultCurrencyCode');\n\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS = new InjectionToken<string>('Translations');\n\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS_FORMAT = new InjectionToken<string>('TranslationsFormat');\n\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n-common-merge#report-missing-translations) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di/injectable';\nimport {InjectionToken} from '../di/injection_token';\nimport {StaticProvider} from '../di/interface/provider';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {Type} from '../interface/type';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {ComponentFactory as ComponentFactoryR3} from '../render3/component_ref';\nimport {getComponentDef, getNgModuleDef} from '../render3/definition';\nimport {NgModuleFactory as NgModuleFactoryR3} from '../render3/ng_module_ref';\nimport {maybeUnwrapFn} from '../render3/util/misc_utils';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n\n/**\n * Combination of NgModuleFactory and ComponentFactories.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n      public ngModuleFactory: NgModuleFactory<T>,\n      public componentFactories: ComponentFactory<any>[]) {}\n}\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\n@Injectable()\nexport class Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents` have to be inlined.\n   */\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return new NgModuleFactoryR3(moduleType);\n  }\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return Promise.resolve(this.compileModuleSync(moduleType));\n  }\n\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n    const moduleDef = getNgModuleDef(moduleType)!;\n    const componentFactories =\n        maybeUnwrapFn(moduleDef.declarations)\n            .reduce((factories: ComponentFactory<any>[], declaration: Type<any>) => {\n              const componentDef = getComponentDef(declaration);\n              componentDef && factories.push(new ComponentFactoryR3(componentDef));\n              return factories;\n            }, [] as ComponentFactory<any>[]);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n  }\n\n  /**\n   * Clears all caches.\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type<any>) {}\n\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType: Type<any>): string|undefined {\n    return undefined;\n  }\n}\n\n/**\n * Options for creating a compiler\n *\n * @publicApi\n */\nexport type CompilerOptions = {\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: StaticProvider[],\n  missingTranslation?: MissingTranslationStrategy,\n  preserveWhitespaces?: boolean,\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst promise: Promise<any> = (() => Promise.resolve(0))();\n\ndeclare const Zone: any;\n\nexport function scheduleMicroTask(fn: Function) {\n  if (typeof Zone === 'undefined') {\n    // use promise to schedule microTask instead of use Zone\n    promise.then(() => {\n      fn && fn.apply(null, null);\n    });\n  } else {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter} from '../event_emitter';\nimport {global} from '../util/global';\nimport {noop} from '../util/noop';\nimport {getNativeRequestAnimationFrame} from '../util/raf';\n\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class NgZone {\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly hasPendingMicrotasks: boolean = false;\n\n  /**\n   * Whether there are no outstanding microtasks or macrotasks.\n   */\n  readonly isStable: boolean = true;\n\n  /**\n   * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n   */\n  readonly onUnstable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when there is no more microtasks enqueued in the current VM Turn.\n   * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n   * For this reason this event can fire multiple times per VM Turn.\n   */\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n   * implies we are about to relinquish VM turn.\n   * This event gets called just once.\n   */\n  readonly onStable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies that an error has been delivered.\n   */\n  readonly onError: EventEmitter<any> = new EventEmitter(false);\n\n\n  constructor({\n    enableLongStackTrace = false,\n    shouldCoalesceEventChangeDetection = false,\n    shouldCoalesceRunChangeDetection = false\n  }) {\n    if (typeof Zone == 'undefined') {\n      throw new Error(`In this configuration Angular requires Zone.js`);\n    }\n\n    Zone.assertZonePatched();\n    const self = this as any as NgZonePrivate;\n    self._nesting = 0;\n\n    self._outer = self._inner = Zone.current;\n\n    if ((Zone as any)['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new ((Zone as any)['TaskTrackingZoneSpec'] as any));\n    }\n\n    if (enableLongStackTrace && (Zone as any)['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['longStackTraceZoneSpec']);\n    }\n    // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\n    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\n    self.shouldCoalesceEventChangeDetection =\n        !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\n    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\n    self.lastRequestAnimationFrameId = -1;\n    self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;\n    forkInnerZoneWithAngularBehavior(self);\n  }\n\n  static isInAngularZone(): boolean {\n    return Zone.current.get('isAngularZone') === true;\n  }\n\n  static assertInAngularZone(): void {\n    if (!NgZone.isInAngularZone()) {\n      throw new Error('Expected to be in Angular Zone, but it is not!');\n    }\n  }\n\n  static assertNotInAngularZone(): void {\n    if (NgZone.isInAngularZone()) {\n      throw new Error('Expected to not be in Angular Zone, but it is!');\n    }\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.run(fn, applyThis, applyArgs);\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T {\n    const zone = (this as any as NgZonePrivate)._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs);\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   */\n  runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.runGuarded(fn, applyThis, applyArgs);\n  }\n\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n   */\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return (this as any as NgZonePrivate)._outer.run(fn);\n  }\n}\n\nconst EMPTY_PAYLOAD = {};\n\ninterface NgZonePrivate extends NgZone {\n  _outer: Zone;\n  _inner: Zone;\n  _nesting: number;\n  _hasPendingMicrotasks: boolean;\n\n  hasPendingMacrotasks: boolean;\n  hasPendingMicrotasks: boolean;\n  lastRequestAnimationFrameId: number;\n  /**\n   * A flag to indicate if NgZone is currently inside\n   * checkStable and to prevent re-entry. The flag is\n   * needed because it is possible to invoke the change\n   * detection from within change detection leading to\n   * incorrect behavior.\n   *\n   * For detail, please refer here,\n   * https://github.com/angular/angular/pull/40540\n   */\n  isCheckStableRunning: boolean;\n  isStable: boolean;\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can coalesce such kind of events to trigger\n   * change detection only once.\n   *\n   * By default, this option will be false. So the events will not be\n   * coalesced and the change detection will be triggered multiple times.\n   * And if this option be set to true, the change detection will be\n   * triggered async by scheduling it in an animation frame. So in the case above,\n   * the change detection will only be trigged once.\n   */\n  shouldCoalesceEventChangeDetection: boolean;\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   *\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loops trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  shouldCoalesceRunChangeDetection: boolean;\n\n  nativeRequestAnimationFrame: (callback: FrameRequestCallback) => number;\n\n  // Cache a  \"fake\" top eventTask so you don't need to schedule a new task every\n  // time you run a `checkStable`.\n  fakeTopEventTask: Task;\n}\n\nfunction checkStable(zone: NgZonePrivate) {\n  // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent\n  // re-entry. The case is:\n  //\n  // @Component({...})\n  // export class AppComponent {\n  // constructor(private ngZone: NgZone) {\n  //   this.ngZone.onStable.subscribe(() => {\n  //     this.ngZone.run(() => console.log('stable'););\n  //   });\n  // }\n  //\n  // The onStable subscriber run another function inside ngZone\n  // which causes `checkStable()` re-entry.\n  // But this fix causes some issues in g3, so this fix will be\n  // launched in another PR.\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\n\nfunction delayChangeDetectionForEvents(zone: NgZonePrivate) {\n  /**\n   * We also need to check _nesting here\n   * Consider the following case with shouldCoalesceRunChangeDetection = true\n   *\n   * ngZone.run(() => {});\n   * ngZone.run(() => {});\n   *\n   * We want the two `ngZone.run()` only trigger one change detection\n   * when shouldCoalesceRunChangeDetection is true.\n   * And because in this case, change detection run in async way(requestAnimationFrame),\n   * so we also need to check the _nesting here to prevent multiple\n   * change detections.\n   */\n  if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {\n    return;\n  }\n  zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(global, () => {\n    // This is a work around for https://github.com/angular/angular/issues/36839.\n    // The core issue is that when event coalescing is enabled it is possible for microtasks\n    // to get flushed too early (As is the case with `Promise.then`) between the\n    // coalescing eventTasks.\n    //\n    // To workaround this we schedule a \"fake\" eventTask before we process the\n    // coalescing eventTasks. The benefit of this is that the \"fake\" container eventTask\n    //  will prevent the microtasks queue from getting drained in between the coalescing\n    // eventTask execution.\n    if (!zone.fakeTopEventTask) {\n      zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', () => {\n        zone.lastRequestAnimationFrameId = -1;\n        updateMicroTaskStatus(zone);\n        zone.isCheckStableRunning = true;\n        checkStable(zone);\n        zone.isCheckStableRunning = false;\n      }, undefined, () => {}, () => {});\n    }\n    zone.fakeTopEventTask.invoke();\n  });\n  updateMicroTaskStatus(zone);\n}\n\nfunction forkInnerZoneWithAngularBehavior(zone: NgZonePrivate) {\n  const delayChangeDetectionForEventsDelegate = () => {\n    delayChangeDetectionForEvents(zone);\n  };\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: <any>{'isAngularZone': true},\n    onInvokeTask:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, task: Task, applyThis: any,\n         applyArgs: any): any => {\n          try {\n            onEnter(zone);\n            return delegate.invokeTask(target, task, applyThis, applyArgs);\n          } finally {\n            if ((zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask') ||\n                zone.shouldCoalesceRunChangeDetection) {\n              delayChangeDetectionForEventsDelegate();\n            }\n            onLeave(zone);\n          }\n        },\n\n    onInvoke:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, callback: Function, applyThis: any,\n         applyArgs?: any[], source?: string): any => {\n          try {\n            onEnter(zone);\n            return delegate.invoke(target, callback, applyThis, applyArgs, source);\n          } finally {\n            if (zone.shouldCoalesceRunChangeDetection) {\n              delayChangeDetectionForEventsDelegate();\n            }\n            onLeave(zone);\n          }\n        },\n\n    onHasTask:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) => {\n          delegate.hasTask(target, hasTaskState);\n          if (current === target) {\n            // We are only interested in hasTask events which originate from our zone\n            // (A child hasTask event is not interesting to us)\n            if (hasTaskState.change == 'microTask') {\n              zone._hasPendingMicrotasks = hasTaskState.microTask;\n              updateMicroTaskStatus(zone);\n              checkStable(zone);\n            } else if (hasTaskState.change == 'macroTask') {\n              zone.hasPendingMacrotasks = hasTaskState.macroTask;\n            }\n          }\n        },\n\n    onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any): boolean => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\n\nfunction updateMicroTaskStatus(zone: NgZonePrivate) {\n  if (zone._hasPendingMicrotasks ||\n      ((zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) &&\n       zone.lastRequestAnimationFrameId !== -1)) {\n    zone.hasPendingMicrotasks = true;\n  } else {\n    zone.hasPendingMicrotasks = false;\n  }\n}\n\nfunction onEnter(zone: NgZonePrivate) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\n\nfunction onLeave(zone: NgZonePrivate) {\n  zone._nesting--;\n  checkStable(zone);\n}\n\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport class NoopNgZone implements NgZone {\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly isStable: boolean = true;\n  readonly onUnstable: EventEmitter<any> = new EventEmitter();\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter();\n  readonly onStable: EventEmitter<any> = new EventEmitter();\n  readonly onError: EventEmitter<any> = new EventEmitter();\n\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n\n  runGuarded<T>(fn: (...args: any[]) => any, applyThis?: any, applyArgs?: any): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return fn();\n  }\n\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any, name?: string): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {global} from './global';\n\nexport function getNativeRequestAnimationFrame() {\n  let nativeRequestAnimationFrame: (callback: FrameRequestCallback) => number =\n      global['requestAnimationFrame'];\n  let nativeCancelAnimationFrame: (handle: number) => void = global['cancelAnimationFrame'];\n  if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {\n    // use unpatched version of requestAnimationFrame(native delegate) if possible\n    // to avoid another Change detection\n    const unpatchedRequestAnimationFrame =\n        (nativeRequestAnimationFrame as any)[(Zone as any).__symbol__('OriginalDelegate')];\n    if (unpatchedRequestAnimationFrame) {\n      nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;\n    }\n    const unpatchedCancelAnimationFrame =\n        (nativeCancelAnimationFrame as any)[(Zone as any).__symbol__('OriginalDelegate')];\n    if (unpatchedCancelAnimationFrame) {\n      nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;\n    }\n  }\n  return {nativeRequestAnimationFrame, nativeCancelAnimationFrame};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di';\nimport {scheduleMicroTask} from '../util/microtask';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n\n// Angular internal, not intended for public API.\nexport interface PendingMacrotask {\n  source: string;\n  creationLocation: Error;\n  runCount?: number;\n  data?: TaskData;\n}\n\nexport interface TaskData {\n  target?: XMLHttpRequest;\n  delay?: number;\n  isPeriodic?: boolean;\n}\n\n// Angular internal, not intended for public API.\nexport type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\nexport type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n\ninterface WaitCallback {\n  // Needs to be 'any' - setTimeout returns a number according to ES6, but\n  // on NodeJS it returns a Timer.\n  timeoutId: any;\n  doneCb: DoneCallback;\n  updateCb?: UpdateCallback;\n}\n\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser. Each bootstrapped Angular application on the page will have\n * an instance of Testability.\n * @publicApi\n */\n@Injectable()\nexport class Testability implements PublicTestability {\n  private _pendingCount: number = 0;\n  private _isZoneStable: boolean = true;\n  /**\n   * Whether any work was done since the last 'whenStable' callback. This is\n   * useful to detect if this could have potentially destabilized another\n   * component while it is stabilizing.\n   * @internal\n   */\n  private _didWork: boolean = false;\n  private _callbacks: WaitCallback[] = [];\n\n  private taskTrackingZone: {macroTasks: Task[]}|null = null;\n\n  constructor(private _ngZone: NgZone) {\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this.taskTrackingZone =\n          typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n\n  private _watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Increases the number of pending request\n   * @deprecated pending requests are now tracked with zones.\n   */\n  increasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n\n  /**\n   * Decreases the number of pending request\n   * @deprecated pending requests are now tracked with zones\n   */\n  decreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n\n  /**\n   * Whether an associated application is stable\n   */\n  isStable(): boolean {\n    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n\n  private _runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop()!;\n          clearTimeout(cb.timeoutId);\n          cb.doneCb(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter((cb) => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n\n        return true;\n      });\n\n      this._didWork = true;\n    }\n  }\n\n  private getPendingTasks(): PendingMacrotask[] {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n\n    // Copy the tasks data so that we don't leak tasks.\n    return this.taskTrackingZone.macroTasks.map((t: Task) => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: (t as any).creationLocation as Error,\n        data: t.data\n      };\n    });\n  }\n\n  private addCallback(cb: DoneCallback, timeout?: number, updateCb?: UpdateCallback) {\n    let timeoutId: any = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n        cb(this._didWork, this.getPendingTasks());\n      }, timeout);\n    }\n    this._callbacks.push(<WaitCallback>{doneCb: cb, timeoutId: timeoutId, updateCb: updateCb});\n  }\n\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error(\n          'Task tracking zone is required when passing an update callback to ' +\n          'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?');\n    }\n    // These arguments are 'Function' above to keep the public API simple.\n    this.addCallback(doneCb as DoneCallback, timeout, updateCb as UpdateCallback);\n    this._runCallbacksIfReady();\n  }\n\n  /**\n   * Get the number of pending requests\n   * @deprecated pending requests are now tracked with zones\n   */\n  getPendingRequestCount(): number {\n    return this._pendingCount;\n  }\n\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\n\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\n@Injectable()\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n\n  constructor() {\n    _testabilityGetter.addToWindow(this);\n  }\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token: any) {\n    this._applications.delete(token);\n  }\n\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() {\n    this._applications.clear();\n  }\n\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem: any): Testability|null {\n    return this._applications.get(elem) || null;\n  }\n\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities(): Testability[] {\n    return Array.from(this._applications.values());\n  }\n\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements(): any[] {\n    return Array.from(this._applications.keys());\n  }\n\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability|null {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null;\n}\n\nclass _NoopGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {}\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    return null;\n  }\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet _testabilityGetter: GetTestability = new _NoopGetTestability();\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport './util/ng_jit_mode';\n\nimport {merge, Observable, Observer, Subscription} from 'rxjs';\nimport {share} from 'rxjs/operators';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {getCompilerFacade, JitCompilerUsage} from './compiler/compiler_facade';\nimport {Console} from './console';\nimport {Injectable} from './di/injectable';\nimport {InjectionToken} from './di/injection_token';\nimport {Injector} from './di/injector';\nimport {StaticProvider} from './di/interface/provider';\nimport {INJECTOR_SCOPE} from './di/scope';\nimport {ErrorHandler} from './error_handler';\nimport {RuntimeError, RuntimeErrorCode} from './errors';\nimport {DEFAULT_LOCALE_ID} from './i18n/localization';\nimport {LOCALE_ID} from './i18n/tokens';\nimport {Type} from './interface/type';\nimport {COMPILER_OPTIONS, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {InternalViewRef, ViewRef} from './linker/view_ref';\nimport {isComponentResourceResolutionQueueEmpty, resolveComponentResources} from './metadata/resource_loading';\nimport {assertNgModuleType} from './render3/assert';\nimport {ComponentFactory as R3ComponentFactory} from './render3/component_ref';\nimport {setLocaleId} from './render3/i18n/i18n_locale_id';\nimport {setJitOptions} from './render3/jit/jit_options';\nimport {NgModuleFactory as R3NgModuleFactory} from './render3/ng_module_ref';\nimport {publishDefaultGlobalUtils as _publishDefaultGlobalUtils} from './render3/util/global_utils';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {isPromise} from './util/lang';\nimport {scheduleMicroTask} from './util/microtask';\nimport {stringify} from './util/stringify';\nimport {NgZone, NoopNgZone} from './zone/ng_zone';\n\nlet _platform: PlatformRef;\n\nexport function compileNgModuleFactory<M>(\n    injector: Injector, options: CompilerOptions,\n    moduleType: Type<M>): Promise<NgModuleFactory<M>> {\n  ngDevMode && assertNgModuleType(moduleType);\n\n  const moduleFactory = new R3NgModuleFactory(moduleType);\n\n  // All of the logic below is irrelevant for AOT-compiled code.\n  if (typeof ngJitMode !== 'undefined' && !ngJitMode) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n\n  // Configure the compiler to use the provided options. This call may fail when multiple modules\n  // are bootstrapped with incompatible options, as a component can only be compiled according to\n  // a single set of options.\n  setJitOptions({\n    defaultEncapsulation: _lastDefined(compilerOptions.map(opts => opts.defaultEncapsulation)),\n    preserveWhitespaces: _lastDefined(compilerOptions.map(opts => opts.preserveWhitespaces)),\n  });\n\n  if (isComponentResourceResolutionQueueEmpty()) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compilerProviders = _mergeArrays(compilerOptions.map(o => o.providers!));\n\n  // In case there are no compiler providers, we just return the module factory as\n  // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n  // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n  // unnecessarily require the JIT compiler.\n  if (compilerProviders.length === 0) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compiler = getCompilerFacade({\n    usage: JitCompilerUsage.Decorator,\n    kind: 'NgModule',\n    type: moduleType,\n  });\n  const compilerInjector = Injector.create({providers: compilerProviders});\n  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n  // The resource loader can also return a string while the \"resolveComponentResources\"\n  // always expects a promise. Therefore we need to wrap the returned value in a promise.\n  return resolveComponentResources(url => Promise.resolve(resourceLoader.get(url)))\n      .then(() => moduleFactory);\n}\n\nexport function publishDefaultGlobalUtils() {\n  ngDevMode && _publishDefaultGlobalUtils();\n}\n\nexport function isBoundToModule<C>(cf: ComponentFactory<C>): boolean {\n  return (cf as R3ComponentFactory<C>).isBoundToModule;\n}\n\nexport const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>('AllowMultipleToken');\n\n\n\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nexport class NgProbeToken {\n  constructor(public name: string, public token: any) {}\n}\n\n/**\n * Creates a platform.\n * Platforms must be created on launch using this function.\n *\n * @publicApi\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed &&\n      !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?\n        'There can be only one platform. Destroy the previous one to create a new one.' :\n        '';\n    throw new RuntimeError(RuntimeErrorCode.MULTIPLE_PLATFORMS, errorMessage);\n  }\n  publishDefaultGlobalUtils();\n  _platform = injector.get(PlatformRef);\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach((init: any) => init());\n  return _platform;\n}\n\n/**\n * Creates a factory for a platform. Can be used to provide or override `Providers` specific to\n * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.\n * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories\n * to build up configurations that might be required by different libraries or parts of the\n * application.\n * @param name Identifies the new platform factory.\n * @param providers A set of dependency providers for platforms created with the new factory.\n *\n * @publicApi\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef)|null, name: string,\n    providers: StaticProvider[] = []): (extraProviders?: StaticProvider[]) => PlatformRef {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders: StaticProvider[] = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        const injectedProviders: StaticProvider[] =\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}, {\n              provide: INJECTOR_SCOPE,\n              useValue: 'platform'\n            });\n        createPlatform(Injector.create({providers: injectedProviders, name: desc}));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Checks that there is currently a platform that contains the given token as a provider.\n *\n * @publicApi\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const platform = getPlatform();\n\n  if (!platform) {\n    const errorMessage =\n        (typeof ngDevMode === 'undefined' || ngDevMode) ? 'No platform exists!' : '';\n    throw new RuntimeError(RuntimeErrorCode.PLATFORM_NOT_FOUND, errorMessage);\n  }\n\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n      !platform.injector.get(requiredToken, null)) {\n    throw new RuntimeError(\n        RuntimeErrorCode.MULTIPLE_PLATFORMS,\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n\n/**\n * Destroys the current Angular platform and all Angular applications on the page.\n * Destroys all modules and listeners registered with the platform.\n *\n * @publicApi\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport function getPlatform(): PlatformRef|null {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n */\nexport interface BootstrapOptions {\n  /**\n   * Optionally specify which `NgZone` should be used.\n   *\n   * - Provide your own `NgZone` instance.\n   * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n   * - `noop` - Use `NoopNgZone` which does nothing.\n   */\n  ngZone?: NgZone|'zone.js'|'noop';\n\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can colesce such kind of events to only trigger\n   * change detection only once.\n   *\n   * By default, this option will be false. So the events will not be\n   * coalesced and the change detection will be triggered multiple times.\n   * And if this option be set to true, the change detection will be\n   * triggered async by scheduling a animation frame. So in the case above,\n   * the change detection will only be triggered once.\n   */\n  ngZoneEventCoalescing?: boolean;\n\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   *\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  ngZoneRunCoalescing?: boolean;\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page.\n * Each page has exactly one platform. Services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * A page's platform is initialized implicitly when a platform is created using a platform\n * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.\n *\n * @publicApi\n */\n@Injectable()\nexport class PlatformRef {\n  private _modules: NgModuleRef<any>[] = [];\n  private _destroyListeners: Function[] = [];\n  private _destroyed: boolean = false;\n\n  /** @internal */\n  constructor(private _injector: Injector) {}\n\n  /**\n   * Creates an instance of an `@NgModule` for the given platform for offline compilation.\n   *\n   * @usageNotes\n   *\n   * The following example creates the NgModule for a browser platform.\n   *\n   * ```typescript\n   * my_module.ts:\n   *\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * main.ts:\n   * import {MyModuleNgFactory} from './my_module.ngfactory';\n   * import {platformBrowser} from '@angular/platform-browser';\n   *\n   * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n   * ```\n   *\n   * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function\n   *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.\n   */\n  bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    const ngZoneOption = options ? options.ngZone : undefined;\n    const ngZoneEventCoalescing = (options && options.ngZoneEventCoalescing) || false;\n    const ngZoneRunCoalescing = (options && options.ngZoneRunCoalescing) || false;\n    const ngZone = getNgZone(ngZoneOption, {ngZoneEventCoalescing, ngZoneRunCoalescing});\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are\n    // created within the Angular zone\n    // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be\n    // created outside of the Angular zone.\n    return ngZone.run(() => {\n      const ngZoneInjector = Injector.create(\n          {providers: providers, parent: this.injector, name: moduleFactory.moduleType.name});\n      const moduleRef = <InternalNgModuleRef<M>>moduleFactory.create(ngZoneInjector);\n      const exceptionHandler: ErrorHandler|null = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?\n            'No ErrorHandler. Is platform module (BrowserModule) included?' :\n            '';\n        throw new RuntimeError(RuntimeErrorCode.ERROR_HANDLER_NOT_FOUND, errorMessage);\n      }\n      ngZone!.runOutsideAngular(() => {\n        const subscription = ngZone!.onError.subscribe({\n          next: (error: any) => {\n            exceptionHandler.handleError(error);\n          }\n        });\n        moduleRef.onDestroy(() => {\n          remove(this._modules, moduleRef);\n          subscription.unsubscribe();\n        });\n      });\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone!, () => {\n        const initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy\n          const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n          setLocaleId(localeId || DEFAULT_LOCALE_ID);\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   *\n   */\n  bootstrapModule<M>(\n      moduleType: Type<M>,\n      compilerOptions: (CompilerOptions&BootstrapOptions)|\n      Array<CompilerOptions&BootstrapOptions> = []): Promise<NgModuleRef<M>> {\n    const options = optionsReducer({}, compilerOptions);\n    return compileNgModuleFactory(this.injector, options, moduleType)\n        .then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n\n  private _moduleDoBootstrap(moduleRef: InternalNgModuleRef<any>): void {\n    const appRef = moduleRef.injector.get(ApplicationRef) as ApplicationRef;\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, ` +\n              `but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n              `Please define one of these.` :\n          '';\n      throw new RuntimeError(RuntimeErrorCode.BOOTSTRAP_COMPONENTS_NOT_FOUND, errorMessage);\n    }\n    this._modules.push(moduleRef);\n  }\n\n  /**\n   * Registers a listener to be called when the platform is destroyed.\n   */\n  onDestroy(callback: () => void): void {\n    this._destroyListeners.push(callback);\n  }\n\n  /**\n   * Retrieves the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector(): Injector {\n    return this._injector;\n  }\n\n  /**\n   * Destroys the current Angular platform and all Angular applications on the page.\n   * Destroys all modules and listeners registered with the platform.\n   */\n  destroy() {\n    if (this._destroyed) {\n      const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?\n          'The platform has already been destroyed!' :\n          '';\n      throw new RuntimeError(RuntimeErrorCode.ALREADY_DESTROYED_PLATFORM, errorMessage);\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n\n  get destroyed() {\n    return this._destroyed;\n  }\n}\n\nfunction getNgZone(\n    ngZoneOption: NgZone|'zone.js'|'noop'|undefined,\n    extra?: {ngZoneEventCoalescing: boolean, ngZoneRunCoalescing: boolean}): NgZone {\n  let ngZone: NgZone;\n\n  if (ngZoneOption === 'noop') {\n    ngZone = new NoopNgZone();\n  } else {\n    ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({\n               enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\n               shouldCoalesceEventChangeDetection: !!extra?.ngZoneEventCoalescing,\n               shouldCoalesceRunChangeDetection: !!extra?.ngZoneRunCoalescing\n             });\n  }\n  return ngZone;\n}\n\nfunction _callAndReportToErrorHandler(\n    errorHandler: ErrorHandler, ngZone: NgZone, callback: () => any): any {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n\nfunction optionsReducer<T extends Object>(dst: any, objs: T|T[]): T {\n  if (Array.isArray(objs)) {\n    dst = objs.reduce(optionsReducer, dst);\n  } else {\n    dst = {...dst, ...(objs as any)};\n  }\n  return dst;\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n *\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\n@Injectable()\nexport class ApplicationRef {\n  /** @internal */\n  private _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\n  private _views: InternalViewRef[] = [];\n  private _runningTick: boolean = false;\n  private _stable = true;\n  private _onMicrotaskEmptySubscription: Subscription;\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  public readonly componentTypes: Type<any>[] = [];\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  public readonly components: ComponentRef<any>[] = [];\n\n  /**\n   * Returns an Observable that indicates when the application is stable or unstable.\n   *\n   * @see  [Usage notes](#is-stable-examples) for examples and caveats when using this API.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly isStable!: Observable<boolean>;\n\n  /** @internal */\n  constructor(\n      private _zone: NgZone, private _injector: Injector, private _exceptionHandler: ErrorHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _initStatus: ApplicationInitStatus) {\n    this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({\n      next: () => {\n        this._zone.run(() => {\n          this.tick();\n        });\n      }\n    });\n\n    const isCurrentlyStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n          !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n\n    const isStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      let stableSub: Subscription;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n\n      const unstableSub: Subscription = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => {\n            observer.next(false);\n          });\n        }\n      });\n\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n\n    (this as {isStable: Observable<boolean>}).isStable =\n        merge(isCurrentlyStable, isStable.pipe(share()));\n  }\n\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   */\n  bootstrap<C>(component: Type<C>, rootSelectorOrNode?: string|any): ComponentRef<C>;\n\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   *\n   * @deprecated Passing Component factories as the `Application.bootstrap` function argument is\n   *     deprecated. Pass Component Types instead.\n   */\n  bootstrap<C>(componentFactory: ComponentFactory<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C>;\n\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   */\n  bootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C> {\n    if (!this._initStatus.done) {\n      const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?\n          'Cannot bootstrap as there are still asynchronous initializers running. ' +\n              'Bootstrap components in the `ngDoBootstrap` method of the root module.' :\n          '';\n      throw new RuntimeError(RuntimeErrorCode.ASYNC_INITIALIZERS_STILL_RUNNING, errorMessage);\n    }\n    let componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory =\n          this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)!;\n    }\n    this.componentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule =\n        isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n    const nativeElement = compRef.location.nativeElement;\n    const testability = compRef.injector.get(Testability, null);\n    const testabilityRegistry = testability && compRef.injector.get(TestabilityRegistry);\n    if (testability && testabilityRegistry) {\n      testabilityRegistry.registerApplication(nativeElement, testability);\n    }\n\n    compRef.onDestroy(() => {\n      this.detachView(compRef.hostView);\n      remove(this.components, compRef);\n      if (testabilityRegistry) {\n        testabilityRegistry.unregisterApplication(nativeElement);\n      }\n    });\n\n    this._loadComponent(compRef);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const _console = this._injector.get(Console);\n      _console.log(\n          `Angular is running in development mode. Call enableProdMode() to enable production mode.`);\n    }\n    return compRef;\n  }\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick(): void {\n    if (this._runningTick) {\n      const errorMessage = (typeof ngDevMode === 'undefined' || ngDevMode) ?\n          'ApplicationRef.tick is called recursively' :\n          '';\n      throw new RuntimeError(RuntimeErrorCode.RECURSIVE_APPLICATION_REF_TICK, errorMessage);\n    }\n\n    try {\n      this._runningTick = true;\n      for (let view of this._views) {\n        view.detectChanges();\n      }\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        for (let view of this._views) {\n          view.checkNoChanges();\n        }\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n    }\n  }\n\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n\n  private _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners =\n        this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._views.slice().forEach((view) => view.destroy());\n    this._onMicrotaskEmptySubscription.unsubscribe();\n  }\n\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() {\n    return this._views.length;\n  }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\nfunction _lastDefined<T>(args: T[]): T|undefined {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n\nfunction _mergeArrays(parts: any[][]): any[] {\n  const result: any[] = [];\n  parts.forEach((part) => part && result.push(...part));\n  return result;\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```ts\n * import { merge, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(from(sources, scheduler));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from './global';\n\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\n\nlet _devMode: boolean = true;\nlet _runModeLocked: boolean = false;\n\n\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n\n  // The below check is there so when ngDevMode is set via terser\n  // `global['ngDevMode'] = false;` is also dropped.\n  if (typeof ngDevMode === undefined || !!ngDevMode) {\n    global['ngDevMode'] = false;\n  }\n\n  _devMode = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags} from '../di';\nimport {InternalInjectFlags} from '../di/interface/injector';\nimport {TNode, TNodeType} from '../render3/interfaces/node';\nimport {isComponentHost} from '../render3/interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getComponentLViewByIndex} from '../render3/util/view_utils';\nimport {ViewRef as R3_ViewRef} from '../render3/view_ref';\n\n/**\n * Base class that provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n *\n * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)\n * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nexport abstract class ChangeDetectorRef {\n  /**\n   * When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n   * change detection strategy, explicitly marks the view as changed so that\n   * it can be checked again.\n   *\n   * Components are normally marked as dirty (in need of rerendering) when inputs\n   * have changed or events have fired in the view. Call this method to ensure that\n   * a component is checked even if these triggers have not occured.\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   */\n  abstract markForCheck(): void;\n\n  /**\n   * Detaches this view from the change-detection tree.\n   * A detached view is  not checked until it is reattached.\n   * Use in combination with `detectChanges()` to implement local change detection checks.\n   *\n   * Detached views are not checked during change detection runs until they are\n   * re-attached, even if they are marked as dirty.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detach(): void;\n\n  /**\n   * Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\n   * detach}\n   * to implement local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detectChanges(): void;\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * Use in development mode to verify that running change detection doesn't introduce\n   * other changes.\n   */\n  abstract checkNoChanges(): void;\n\n  /**\n   * Re-attaches the previously detached view to the change detection tree.\n   * Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   */\n  abstract reattach(): void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: (flags: InjectFlags) => ChangeDetectorRef = injectChangeDetectorRef;\n}\n\n\n\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport function injectChangeDetectorRef(flags: InjectFlags): ChangeDetectorRef {\n  return createViewRef(\n      getCurrentTNode()!, getLView(),\n      (flags & InternalInjectFlags.ForPipe) === InternalInjectFlags.ForPipe);\n}\n\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param tNode The node that is requesting a ChangeDetectorRef\n * @param lView The view to which the node belongs\n * @param isPipe Whether the view is being injected into a pipe.\n * @returns The ChangeDetectorRef to use\n */\nfunction createViewRef(tNode: TNode, lView: LView, isPipe: boolean): ChangeDetectorRef {\n  if (isComponentHost(tNode) && !isPipe) {\n    // The LView represents the location where the component is declared.\n    // Instead we want the LView for the component View and so we need to look it up.\n    const componentView = getComponentLViewByIndex(tNode.index, lView);  // look down\n    return new R3_ViewRef(componentView, componentView);\n  } else if (tNode.type & (TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Icu)) {\n    // The LView represents the location where the injection is requested from.\n    // We need to locate the containing LView (in case where the `lView` is an embedded view)\n    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW];  // look up\n    return new R3_ViewRef(hostComponentView, lView);\n  }\n  return null!;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../../util/stringify';\nimport {isListLikeIterable, iterateListLike} from '../change_detection_util';\n\nimport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction} from './iterable_differs';\n\n\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\n  constructor() {}\n  supports(obj: Object|null|undefined): boolean {\n    return isListLikeIterable(obj);\n  }\n\n  create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn);\n  }\n}\n\nconst trackByIdentity = (index: number, item: any) => item;\n\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n  public readonly length: number = 0;\n  // TODO(issue/24571): remove '!'.\n  public readonly collection!: V[]|Iterable<V>|null;\n  // Keeps track of the used records at any point in time (during & across `_check()` calls)\n  private _linkedRecords: _DuplicateMap<V>|null = null;\n  // Keeps track of the removed records at any point in time during `_check()` calls.\n  private _unlinkedRecords: _DuplicateMap<V>|null = null;\n  private _previousItHead: IterableChangeRecord_<V>|null = null;\n  private _itHead: IterableChangeRecord_<V>|null = null;\n  private _itTail: IterableChangeRecord_<V>|null = null;\n  private _additionsHead: IterableChangeRecord_<V>|null = null;\n  private _additionsTail: IterableChangeRecord_<V>|null = null;\n  private _movesHead: IterableChangeRecord_<V>|null = null;\n  private _movesTail: IterableChangeRecord_<V>|null = null;\n  private _removalsHead: IterableChangeRecord_<V>|null = null;\n  private _removalsTail: IterableChangeRecord_<V>|null = null;\n  // Keeps track of records where custom track by is the same, but item identity has changed\n  private _identityChangesHead: IterableChangeRecord_<V>|null = null;\n  private _identityChangesTail: IterableChangeRecord_<V>|null = null;\n  private _trackByFn: TrackByFunction<V>;\n\n  constructor(trackByFn?: TrackByFunction<V>) {\n    this._trackByFn = trackByFn || trackByIdentity;\n  }\n\n  forEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachOperation(\n      fn: (item: IterableChangeRecord<V>, previousIndex: number|null, currentIndex: number|null) =>\n          void) {\n    let nextIt = this._itHead;\n    let nextRemove = this._removalsHead;\n    let addRemoveOffset = 0;\n    let moveOffsets: number[]|null = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const record: IterableChangeRecord<V> = !nextRemove ||\n              nextIt &&\n                  nextIt.currentIndex! <\n                      getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n          nextIt! :\n          nextRemove;\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt!._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const localCurrentIndex = currentIndex! - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n\n  forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n\n  diff(collection: NgIterable<V>|null|undefined): DefaultIterableDiffer<V>|null {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new Error(\n          `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n\n  onDestroy() {}\n\n  check(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let record: IterableChangeRecord_<V>|null = this._itHead;\n    let mayBeDirty: boolean = false;\n    let index: number;\n    let item: V;\n    let itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      (this as {length: number}).length = collection.length;\n\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      (this as {length: number}).length = index;\n    }\n\n    this._truncate(record);\n    (this as {collection: V[] | Iterable<V>}).collection = collection;\n    return this.isDirty;\n  }\n\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n        this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * @internal\n   */\n  _reset() {\n    if (this.isDirty) {\n      let record: IterableChangeRecord_<V>|null;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = record._nextMoved) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * @internal\n   */\n  _mismatch(record: IterableChangeRecord_<V>|null, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let previousRecord: IterableChangeRecord_<V>|null;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // See if we have evicted the item, which used to be at some anterior position of _itHead list.\n    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (record !== null) {\n      // It is an item which we have evicted earlier: reinsert it back into the list.\n      // But first we need to check if identity changed, so we can update in view if necessary.\n      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n\n      this._reinsertAfter(record, previousRecord, index);\n    } else {\n      // Attempt to see if the item is at some posterior position of _itHead list.\n      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n      if (record !== null) {\n        // We have the item in _itHead at/after `index` position. We need to move it forward in the\n        // collection.\n        // But first we need to check if identity changed, so we can update in view if necessary.\n        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n\n        this._moveAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new IterableChangeRecord_<V>(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * @internal\n   */\n  _verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    let reinsertRecord: IterableChangeRecord_<V>|null =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev!, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n\n  /**\n   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {@link IterableChangeRecord_}.\n   *\n   * @internal\n   */\n  _truncate(record: IterableChangeRecord_<V>|null) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const nextRecord: IterableChangeRecord_<V>|null = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n\n  /** @internal */\n  _reinsertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const prev = record._prevRemoved;\n    const next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _moveAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _addAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _insertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const next: IterableChangeRecord_<V>|null =\n        prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n\n  /** @internal */\n  _remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n\n  /** @internal */\n  _unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const prev = record._prev;\n    const next = record._next;\n\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n\n  /** @internal */\n  _addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n\n  private _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\n\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number|null = null;\n  previousIndex: number|null = null;\n\n  /** @internal */\n  _nextPrevious: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prev: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _next: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextAdded: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextMoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextIdentityChange: IterableChangeRecord_<V>|null = null;\n\n\n  constructor(public item: V, public trackById: any) {}\n}\n\n// A linked list of IterableChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList<V> {\n  /** @internal */\n  _head: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _tail: IterableChangeRecord_<V>|null = null;\n\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail!._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex!) &&\n          Object.is(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record: IterableChangeRecord_<V>): boolean {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const prev: IterableChangeRecord_<V>|null = record._prevDup;\n    const next: IterableChangeRecord_<V>|null = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n\n  put(record: IterableChangeRecord_<V>) {\n    const key = record.trackById;\n\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   */\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    const key = trackById;\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n\n  /**\n   * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const key = record.trackById;\n    const recordList: _DuplicateItemRecordList<V> = this.map.get(key)!;\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n\n  get isEmpty(): boolean {\n    return this.map.size === 0;\n  }\n\n  clear() {\n    this.map.clear();\n  }\n}\n\nfunction getPreviousIndex(item: any, addRemoveOffset: number, moveOffsets: number[]|null): number {\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../../util/stringify';\nimport {isJsObject} from '../change_detection_util';\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory} from './keyvalue_differs';\n\n\nexport class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\n  constructor() {}\n  supports(obj: any): boolean {\n    return obj instanceof Map || isJsObject(obj);\n  }\n\n  create<K, V>(): KeyValueDiffer<K, V> {\n    return new DefaultKeyValueDiffer<K, V>();\n  }\n}\n\nexport class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\n  private _records = new Map<K, KeyValueChangeRecord_<K, V>>();\n  private _mapHead: KeyValueChangeRecord_<K, V>|null = null;\n  // _appendAfter is used in the check loop\n  private _appendAfter: KeyValueChangeRecord_<K, V>|null = null;\n  private _previousMapHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _changesHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _changesTail: KeyValueChangeRecord_<K, V>|null = null;\n  private _additionsHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _additionsTail: KeyValueChangeRecord_<K, V>|null = null;\n  private _removalsHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _removalsTail: KeyValueChangeRecord_<K, V>|null = null;\n\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._changesHead !== null ||\n        this._removalsHead !== null;\n  }\n\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  diff(map?: Map<any, any>|{[k: string]: any}|null): any {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new Error(\n          `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n\n    return this.check(map) ? this : null;\n  }\n\n  onDestroy() {}\n\n  /**\n   * Check the current state of the map vs the previous.\n   * The algorithm is optimised for when the keys do no change.\n   */\n  check(map: Map<any, any>|{[k: string]: any}): boolean {\n    this._reset();\n\n    let insertBefore = this._mapHead;\n    this._appendAfter = null;\n\n    this._forEach(map, (value: any, key: any) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n\n      this._removalsHead = insertBefore;\n\n      for (let record: KeyValueChangeRecord_<K, V>|null = insertBefore; record !== null;\n           record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n\n    return this.isDirty;\n  }\n\n  /**\n   * Inserts a record before `before` or append at the end of the list when `before` is null.\n   *\n   * Notes:\n   * - This method appends at `this._appendAfter`,\n   * - This method updates `this._appendAfter`,\n   * - The return value is the new value for the insertion pointer.\n   */\n  private _insertBeforeOrAppend(\n      before: KeyValueChangeRecord_<K, V>|null,\n      record: KeyValueChangeRecord_<K, V>): KeyValueChangeRecord_<K, V>|null {\n    if (before) {\n      const prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n\n      this._appendAfter = before;\n      return before;\n    }\n\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n\n    this._appendAfter = record;\n    return null;\n  }\n\n  private _getOrCreateRecordForKey(key: K, value: V): KeyValueChangeRecord_<K, V> {\n    if (this._records.has(key)) {\n      const record = this._records.get(key)!;\n      this._maybeAddToChanges(record, value);\n      const prev = record._prev;\n      const next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n\n      return record;\n    }\n\n    const record = new KeyValueChangeRecord_<K, V>(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n\n  /** @internal */\n  _reset() {\n    if (this.isDirty) {\n      let record: KeyValueChangeRecord_<K, V>|null;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n\n  // Add the record or a given key to the list of changes only when the value has actually changed\n  private _maybeAddToChanges(record: KeyValueChangeRecord_<K, V>, newValue: any): void {\n    if (!Object.is(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n\n  private _addToAdditions(record: KeyValueChangeRecord_<K, V>) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail!._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n\n  private _addToChanges(record: KeyValueChangeRecord_<K, V>) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail!._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n\n  /** @internal */\n  private _forEach<K, V>(obj: Map<K, V>|{[k: string]: V}, fn: (v: V, k: any) => void) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\n\nclass KeyValueChangeRecord_<K, V> implements KeyValueChangeRecord<K, V> {\n  previousValue: V|null = null;\n  currentValue: V|null = null;\n\n  /** @internal */\n  _nextPrevious: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _next: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _prev: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextAdded: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextRemoved: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextChanged: KeyValueChangeRecord_<K, V>|null = null;\n\n  constructor(public key: K) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵdefineInjectable} from '../../di/interface/defs';\nimport {StaticProvider} from '../../di/interface/provider';\nimport {Optional, SkipSelf} from '../../di/metadata';\nimport {DefaultIterableDifferFactory} from '../differs/default_iterable_differ';\n\n\n\n/**\n * A type describing supported iterable types.\n *\n * @publicApi\n */\nexport type NgIterable<T> = Array<T>|Iterable<T>;\n\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * @publicApi\n */\nexport interface IterableDiffer<V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: NgIterable<V>|undefined|null): IterableChanges<V>|null;\n}\n\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface IterableChanges<V> {\n  /**\n   * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n   * new `Iterable`.\n   *\n   * NOTE: These are not necessarily the actual operations which were applied to the original\n   * `Iterable`, rather these are a set of computed operations which may not be the same as the\n   * ones applied.\n   *\n   * @param record A change which needs to be applied\n   * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `previousIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `currentIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   */\n  forEachOperation(\n      fn:\n          (record: IterableChangeRecord<V>, previousIndex: number|null,\n           currentIndex: number|null) => void): void;\n\n  /**\n   * Iterate over changes in the order of original `Iterable` showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all added items. */\n  forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all moved items. */\n  forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all removed items. */\n  forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n   * changed.\n   */\n  forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface IterableChangeRecord<V> {\n  /** Current index of the item in `Iterable` or null if removed. */\n  readonly currentIndex: number|null;\n\n  /** Previous index of the item in `Iterable` or null if added. */\n  readonly previousIndex: number|null;\n\n  /** The item. */\n  readonly item: V;\n\n  /** Track by identity as computed by the `TrackByFunction`. */\n  readonly trackById: any;\n}\n\n/**\n * A function optionally passed into the `NgForOf` directive to customize how `NgForOf` uniquely\n * identifies items in an iterable.\n *\n * `NgForOf` needs to uniquely identify items in the iterable to correctly perform DOM updates\n * when items in the iterable are reordered, new items are added, or existing items are removed.\n *\n *\n * In all of these scenarios it is usually desirable to only update the DOM elements associated\n * with the items affected by the change. This behavior is important to:\n *\n * - preserve any DOM-specific UI state (like cursor position, focus, text selection) when the\n *   iterable is modified\n * - enable animation of item addition, removal, and iterable reordering\n * - preserve the value of the `<select>` element when nested `<option>` elements are dynamically\n *   populated using `NgForOf` and the bound iterable is updated\n *\n * A common use for custom `trackBy` functions is when the model that `NgForOf` iterates over\n * contains a property with a unique identifier. For example, given a model:\n *\n * ```ts\n * class User {\n *   id: number;\n *   name: string;\n *   ...\n * }\n * ```\n * a custom `trackBy` function could look like the following:\n * ```ts\n * function userTrackBy(index, user) {\n *   return user.id;\n * }\n * ```\n *\n * A custom `trackBy` function must have several properties:\n *\n * - be [idempotent](https://en.wikipedia.org/wiki/Idempotence) (be without side effects, and always\n * return the same value for a given input)\n * - return unique value for all unique inputs\n * - be fast\n *\n * @see [`NgForOf#ngForTrackBy`](api/common/NgForOf#ngForTrackBy)\n * @publicApi\n */\nexport interface TrackByFunction<T> {\n  // Note: the type parameter `U` enables more accurate template type checking in case a trackBy\n  // function is declared using a base type of the iterated type. The `U` type gives TypeScript\n  // additional freedom to infer a narrower type for the `item` parameter type, instead of imposing\n  // the trackBy's declared item type as the inferred type for `T`.\n  // See https://github.com/angular/angular/issues/40125\n\n  /**\n   * @param index The index of the item within the iterable.\n   * @param item The item in the iterable.\n   */\n  <U extends T>(index: number, item: T&U): any;\n}\n\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n * @publicApi\n */\nexport interface IterableDifferFactory {\n  supports(objects: any): boolean;\n  create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n}\n\nexport function defaultIterableDiffersFactory() {\n  return new IterableDiffers([new DefaultIterableDifferFactory()]);\n}\n\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nexport class IterableDiffers {\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable(\n      {token: IterableDiffers, providedIn: 'root', factory: defaultIterableDiffersFactory});\n\n  /**\n   * @deprecated v4.0.0 - Should be private\n   */\n  factories: IterableDifferFactory[];\n  constructor(factories: IterableDifferFactory[]) {\n    this.factories = factories;\n  }\n\n  static create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers {\n    if (parent != null) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n\n    return new IterableDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n   * inherited {@link IterableDiffers} instance with the provided factories and return a new\n   * {@link IterableDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link IterableDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     IterableDiffers.extend([new ImmutableListDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend(factories: IterableDifferFactory[]): StaticProvider {\n    return {\n      provide: IterableDiffers,\n      useFactory: (parent: IterableDiffers|null) => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for IterableDiffers, in such a case just assume\n        // `defaultIterableDiffersFactory`.\n        return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n\n  find(iterable: any): IterableDifferFactory {\n    const factory = this.factories.find(f => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${\n          getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Optional, SkipSelf, StaticProvider, ɵɵdefineInjectable} from '../../di';\nimport {DefaultKeyValueDifferFactory} from './default_keyvalue_differ';\n\n\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @publicApi\n */\nexport interface KeyValueDiffer<K, V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: Map<K, V>): KeyValueChanges<K, V>|null;\n\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: {[key: string]: V}): KeyValueChanges<string, V>|null;\n  // TODO(TS2.1): diff<KP extends string>(this: KeyValueDiffer<KP, V>, object: Record<KP, V>):\n  // KeyValueDiffer<KP, V>;\n}\n\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface KeyValueChanges<K, V> {\n  /**\n   * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over changes in the order of original Map showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all keys for which values have changed.\n   */\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all added items.\n   */\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all removed items.\n   */\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface KeyValueChangeRecord<K, V> {\n  /**\n   * Current key in the Map.\n   */\n  readonly key: K;\n\n  /**\n   * Current value for the key or `null` if removed.\n   */\n  readonly currentValue: V|null;\n\n  /**\n   * Previous value for the key or `null` if added.\n   */\n  readonly previousValue: V|null;\n}\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @publicApi\n */\nexport interface KeyValueDifferFactory {\n  /**\n   * Test to see if the differ knows how to diff this kind of object.\n   */\n  supports(objects: any): boolean;\n\n  /**\n   * Create a `KeyValueDiffer`.\n   */\n  create<K, V>(): KeyValueDiffer<K, V>;\n}\n\nexport function defaultKeyValueDiffersFactory() {\n  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);\n}\n\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nexport class KeyValueDiffers {\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable(\n      {token: KeyValueDiffers, providedIn: 'root', factory: defaultKeyValueDiffersFactory});\n\n  /**\n   * @deprecated v4.0.0 - Should be private.\n   */\n  factories: KeyValueDifferFactory[];\n\n  constructor(factories: KeyValueDifferFactory[]) {\n    this.factories = factories;\n  }\n\n  static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers {\n    if (parent) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n   * {@link KeyValueDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link KeyValueDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: (parent: KeyValueDiffers) => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for KeyValueDiffers, in such a case just assume\n        // `defaultKeyValueDiffersFactory`.\n        return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n\n  find(kv: any): KeyValueDifferFactory {\n    const factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new Error(`Cannot find a differ supporting object '${kv}'`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nimport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nimport {IterableDifferFactory, IterableDiffers} from './differs/iterable_differs';\nimport {KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\n\nexport {SimpleChange, SimpleChanges} from '../interface/simple_change';\nexport {devModeEqual} from './change_detection_util';\nexport {ChangeDetectorRef} from './change_detector_ref';\nexport {ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy} from './constants';\nexport {DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nexport {DefaultIterableDiffer} from './differs/default_iterable_differ';\nexport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nexport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, NgIterable, TrackByFunction} from './differs/iterable_differs';\nexport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\nexport {PipeTransform} from './pipe_transform';\n\n\n\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nconst keyValDiff: KeyValueDifferFactory[] = [new DefaultKeyValueDifferFactory()];\n\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nconst iterableDiff: IterableDifferFactory[] = [new DefaultIterableDifferFactory()];\n\nexport const defaultIterableDiffers = new IterableDiffers(iterableDiff);\n\nexport const defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createPlatformFactory, PlatformRef} from './application_ref';\nimport {PLATFORM_ID} from './application_tokens';\nimport {Console} from './console';\nimport {Injector, StaticProvider} from './di';\nimport {TestabilityRegistry} from './testability/testability';\n\nconst _CORE_PLATFORM_PROVIDERS: StaticProvider[] = [\n  // Set a default platform name for platforms that don't set it explicitly.\n  {provide: PLATFORM_ID, useValue: 'unknown'},\n  {provide: PlatformRef, deps: [Injector]},\n  {provide: TestabilityRegistry, deps: []},\n  {provide: Console, deps: []},\n];\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nexport const platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationInitStatus} from './application_init';\nimport {ApplicationRef} from './application_ref';\nimport {APP_ID_RANDOM_PROVIDER} from './application_tokens';\nimport {defaultIterableDiffers, defaultKeyValueDiffers, IterableDiffers, KeyValueDiffers} from './change_detection/change_detection';\nimport {Injector, StaticProvider} from './di';\nimport {Inject, Optional, SkipSelf} from './di/metadata';\nimport {ErrorHandler} from './error_handler';\nimport {DEFAULT_LOCALE_ID, USD_CURRENCY_CODE} from './i18n/localization';\nimport {DEFAULT_CURRENCY_CODE, LOCALE_ID} from './i18n/tokens';\nimport {ComponentFactoryResolver} from './linker';\nimport {Compiler} from './linker/compiler';\nimport {NgModule} from './metadata';\nimport {SCHEDULER} from './render3/component_ref';\nimport {NgZone} from './zone';\n\ndeclare const $localize: {locale?: string};\n\nexport function _iterableDiffersFactory() {\n  return defaultIterableDiffers;\n}\n\nexport function _keyValueDiffersFactory() {\n  return defaultKeyValueDiffers;\n}\n\nexport function _localeFactory(locale?: string): string {\n  return locale || getGlobalLocale();\n}\n/**\n * Work out the locale from the potential global properties.\n *\n * * Closure Compiler: use `goog.getLocale()`.\n * * Ivy enabled: use `$localize.locale`\n */\nexport function getGlobalLocale(): string {\n  if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode &&\n      typeof goog !== 'undefined' && goog.getLocale() !== 'en') {\n    // * The default `goog.getLocale()` value is `en`, while Angular used `en-US`.\n    // * In order to preserve backwards compatibility, we use Angular default value over\n    //   Closure Compiler's one.\n    return goog.getLocale();\n  } else {\n    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n    // COMPILE-TIME INLINER.\n    //\n    // * During compile time inlining of translations the expression will be replaced\n    //   with a string literal that is the current locale. Other forms of this expression are not\n    //   guaranteed to be replaced.\n    //\n    // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n    //   if required, or just to provide their own `LOCALE_ID` provider.\n    return (typeof $localize !== 'undefined' && $localize.locale) || DEFAULT_LOCALE_ID;\n  }\n}\n\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n */\nexport const APPLICATION_MODULE_PROVIDERS: StaticProvider[] = [\n  {\n    provide: ApplicationRef,\n    useClass: ApplicationRef,\n    deps: [NgZone, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n  },\n  {provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory},\n  {\n    provide: ApplicationInitStatus,\n    useClass: ApplicationInitStatus,\n    deps: [[new Optional(), APP_INITIALIZER]]\n  },\n  {provide: Compiler, useClass: Compiler, deps: []},\n  APP_ID_RANDOM_PROVIDER,\n  {provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: []},\n  {provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: []},\n  {\n    provide: LOCALE_ID,\n    useFactory: _localeFactory,\n    deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n  },\n  {provide: DEFAULT_CURRENCY_CODE, useValue: USD_CURRENCY_CODE},\n];\n\n/**\n * Schedule work at next available slot.\n *\n * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n *\n * @param ngZone NgZone to use for scheduling.\n */\nexport function zoneSchedulerFactory(ngZone: NgZone): (fn: () => void) => void {\n  let queue: (() => void)[] = [];\n  ngZone.onStable.subscribe(() => {\n    while (queue.length) {\n      queue.pop()!();\n    }\n  });\n  return function(fn: () => void) {\n    queue.push(fn);\n  };\n}\n\n/**\n * Configures the root injector for an app with\n * providers of `@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\n@NgModule({providers: APPLICATION_MODULE_PROVIDERS})\nexport class ApplicationModule {\n  // Inject ApplicationRef to make it eager...\n  constructor(appRef: ApplicationRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet _DOM: DomAdapter = null!;\n\nexport function getDOM(): DomAdapter {\n  return _DOM;\n}\n\nexport function setDOM(adapter: DomAdapter) {\n  _DOM = adapter;\n}\n\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class DomAdapter {\n  // Needs Domino-friendly test utility\n  abstract dispatchEvent(el: any, evt: any): any;\n  abstract readonly supportsDOMEvents: boolean;\n\n  // Used by Meta\n  abstract remove(el: any): void;\n  abstract createElement(tagName: any, doc?: any): HTMLElement;\n  abstract createHtmlDocument(): HTMLDocument;\n  abstract getDefaultDocument(): Document;\n\n  // Used by By.css\n  abstract isElementNode(node: any): boolean;\n\n  // Used by Testability\n  abstract isShadowRoot(node: any): boolean;\n\n  // Used by KeyEventsPlugin\n  abstract onAndCancel(el: any, evt: any, listener: any): Function;\n\n  // Used by PlatformLocation and ServerEventManagerPlugin\n  abstract getGlobalEventTarget(doc: Document, target: string): any;\n\n  // Used by PlatformLocation\n  abstract getBaseHref(doc: Document): string|null;\n  abstract resetBaseElement(): void;\n\n  // TODO: remove dependency in DefaultValueAccessor\n  abstract getUserAgent(): string;\n\n  // Used in the legacy @angular/http package which has some usage in g3.\n  abstract getCookie(name: string): string|null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application in a Web Worker).\n *\n * @publicApi\n */\nexport const DOCUMENT = new InjectionToken<Document>('DocumentToken');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, ɵɵinject} from '@angular/core';\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be\n * platform-agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that Angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-server` provides\n * one suitable for use with server-side rendering.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM APIs like pushState, popState, etc.\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`\n * class, they are all platform-agnostic.\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'platform',\n  // See #23917\n  useFactory: useBrowserPlatformLocation\n})\nexport abstract class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract getState(): unknown;\n  /**\n   * Returns a function that, when executed, removes the `popstate` event handler.\n   */\n  abstract onPopState(fn: LocationChangeListener): VoidFunction;\n  /**\n   * Returns a function that, when executed, removes the `hashchange` event handler.\n   */\n  abstract onHashChange(fn: LocationChangeListener): VoidFunction;\n\n  abstract get href(): string;\n  abstract get protocol(): string;\n  abstract get hostname(): string;\n  abstract get port(): string;\n  abstract get pathname(): string;\n  abstract get search(): string;\n  abstract get hash(): string;\n\n  abstract replaceState(state: any, title: string, url: string): void;\n\n  abstract pushState(state: any, title: string, url: string): void;\n\n  abstract forward(): void;\n\n  abstract back(): void;\n\n  historyGo?(relativePosition: number): void {\n    throw new Error('Not implemented');\n  }\n}\n\nexport function useBrowserPlatformLocation() {\n  return ɵɵinject(BrowserPlatformLocation);\n}\n\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nexport const LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n\n/**\n * @description\n * A serializable version of the event from `onPopState` or `onHashChange`\n *\n * @publicApi\n */\nexport interface LocationChangeEvent {\n  type: string;\n  state: any;\n}\n\n/**\n * @publicApi\n */\nexport interface LocationChangeListener {\n  (event: LocationChangeEvent): any;\n}\n\n\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\n@Injectable({\n  providedIn: 'platform',\n  // See #23917\n  useFactory: createBrowserPlatformLocation,\n})\nexport class BrowserPlatformLocation extends PlatformLocation {\n  public readonly location!: Location;\n  private _history!: History;\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._init();\n  }\n\n  // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n  /** @internal */\n  _init() {\n    (this as {location: Location}).location = window.location;\n    this._history = window.history;\n  }\n\n  override getBaseHrefFromDOM(): string {\n    return getDOM().getBaseHref(this._doc)!;\n  }\n\n  override onPopState(fn: LocationChangeListener): VoidFunction {\n    const window = getDOM().getGlobalEventTarget(this._doc, 'window');\n    window.addEventListener('popstate', fn, false);\n    return () => window.removeEventListener('popstate', fn);\n  }\n\n  override onHashChange(fn: LocationChangeListener): VoidFunction {\n    const window = getDOM().getGlobalEventTarget(this._doc, 'window');\n    window.addEventListener('hashchange', fn, false);\n    return () => window.removeEventListener('hashchange', fn);\n  }\n\n  override get href(): string {\n    return this.location.href;\n  }\n  override get protocol(): string {\n    return this.location.protocol;\n  }\n  override get hostname(): string {\n    return this.location.hostname;\n  }\n  override get port(): string {\n    return this.location.port;\n  }\n  override get pathname(): string {\n    return this.location.pathname;\n  }\n  override get search(): string {\n    return this.location.search;\n  }\n  override get hash(): string {\n    return this.location.hash;\n  }\n  override set pathname(newPath: string) {\n    this.location.pathname = newPath;\n  }\n\n  override pushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  override replaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  override forward(): void {\n    this._history.forward();\n  }\n\n  override back(): void {\n    this._history.back();\n  }\n\n  override historyGo(relativePosition: number = 0): void {\n    this._history.go(relativePosition);\n  }\n\n  override getState(): unknown {\n    return this._history.state;\n  }\n}\n\nexport function supportsState(): boolean {\n  return !!window.history.pushState;\n}\nexport function createBrowserPlatformLocation() {\n  return new BrowserPlatformLocation(ɵɵinject(DOCUMENT));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Joins two parts of a URL with a slash if needed.\n *\n * @param start  URL string\n * @param end    URL string\n *\n *\n * @returns The joined URL string.\n */\nexport function joinWithSlash(start: string, end: string): string {\n  if (start.length == 0) {\n    return end;\n  }\n  if (end.length == 0) {\n    return start;\n  }\n  let slashes = 0;\n  if (start.endsWith('/')) {\n    slashes++;\n  }\n  if (end.startsWith('/')) {\n    slashes++;\n  }\n  if (slashes == 2) {\n    return start + end.substring(1);\n  }\n  if (slashes == 1) {\n    return start + end;\n  }\n  return start + '/' + end;\n}\n\n/**\n * Removes a trailing slash from a URL string if needed.\n * Looks for the first occurrence of either `#`, `?`, or the end of the\n * line as `/` characters and removes the trailing slash if one exists.\n *\n * @param url URL string.\n *\n * @returns The URL string, modified if needed.\n */\nexport function stripTrailingSlash(url: string): string {\n  const match = url.match(/#|\\?|$/);\n  const pathEndIdx = match && match.index || url.length;\n  const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n  return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n}\n\n/**\n * Normalizes URL parameters by prepending with `?` if needed.\n *\n * @param  params String of URL parameters.\n *\n * @returns The normalized URL parameters string.\n */\nexport function normalizeQueryParams(params: string): string {\n  return params && params[0] !== '?' ? '?' + params : params;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, OnDestroy, Optional, ɵɵinject} from '@angular/core';\nimport {DOCUMENT} from '../dom_tokens';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams} from './util';\n\n/**\n * Enables the `Location` service to read route state from the browser's URL.\n * Angular provides two strategies:\n * `HashLocationStrategy` and `PathLocationStrategy`.\n *\n * Applications should use the `Router` or `Location` services to\n * interact with application route state.\n *\n * For instance, `HashLocationStrategy` produces URLs like\n * <code class=\"no-auto-link\">http://example.com#/foo</code>,\n * and `PathLocationStrategy` produces\n * <code class=\"no-auto-link\">http://example.com/foo</code> as an equivalent URL.\n *\n * See these two classes for more.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: provideLocationStrategy})\nexport abstract class LocationStrategy {\n  abstract path(includeHash?: boolean): string;\n  abstract prepareExternalUrl(internal: string): string;\n  abstract pushState(state: any, title: string, url: string, queryParams: string): void;\n  abstract replaceState(state: any, title: string, url: string, queryParams: string): void;\n  abstract forward(): void;\n  abstract back(): void;\n  historyGo?(relativePosition: number): void {\n    throw new Error('Not implemented');\n  }\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract getBaseHref(): string;\n}\n\nexport function provideLocationStrategy(platformLocation: PlatformLocation) {\n  // See #23917\n  const location = ɵɵinject(DOCUMENT).location;\n  return new PathLocationStrategy(\n      ɵɵinject(PlatformLocation as any), location && location.origin || '');\n}\n\n\n/**\n * A predefined [DI token](guide/glossary#di-token) for the base href\n * to be used with the `PathLocationStrategy`.\n * The base href is the URL prefix that should be preserved when generating\n * and recognizing URLs.\n *\n * @usageNotes\n *\n * The following example shows how to use this token to configure the root app injector\n * with a base href value, so that the DI framework can supply the dependency anywhere in the app.\n *\n * ```typescript\n * import {Component, NgModule} from '@angular/core';\n * import {APP_BASE_HREF} from '@angular/common';\n *\n * @NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport const APP_BASE_HREF = new InjectionToken<string>('appBaseHref');\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}\n * or add a `<base href>` element to the document.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app/'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`. To ensure all relative URIs resolve correctly,\n * the `<base href>` and/or `APP_BASE_HREF` should end with a `/`.\n *\n * Similarly, if you add `<base href='/my/app/'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Note that when using `PathLocationStrategy`, neither the query nor\n * the fragment in the `<base href>` will be preserved, as outlined\n * by the [RFC](https://tools.ietf.org/html/rfc3986#section-5.2.2).\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\n@Injectable()\nexport class PathLocationStrategy extends LocationStrategy implements OnDestroy {\n  private _baseHref: string;\n  private _removeListenerFns: (() => void)[] = [];\n\n  constructor(\n      private _platformLocation: PlatformLocation,\n      @Optional() @Inject(APP_BASE_HREF) href?: string) {\n    super();\n\n    if (href == null) {\n      href = this._platformLocation.getBaseHrefFromDOM();\n    }\n\n    if (href == null) {\n      throw new Error(\n          `No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n    }\n\n    this._baseHref = href;\n  }\n\n  ngOnDestroy(): void {\n    while (this._removeListenerFns.length) {\n      this._removeListenerFns.pop()!();\n    }\n  }\n\n  override onPopState(fn: LocationChangeListener): void {\n    this._removeListenerFns.push(\n        this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));\n  }\n\n  override getBaseHref(): string {\n    return this._baseHref;\n  }\n\n  override prepareExternalUrl(internal: string): string {\n    return joinWithSlash(this._baseHref, internal);\n  }\n\n  override path(includeHash: boolean = false): string {\n    const pathname =\n        this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);\n    const hash = this._platformLocation.hash;\n    return hash && includeHash ? `${pathname}${hash}` : pathname;\n  }\n\n  override pushState(state: any, title: string, url: string, queryParams: string) {\n    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n    this._platformLocation.pushState(state, title, externalUrl);\n  }\n\n  override replaceState(state: any, title: string, url: string, queryParams: string) {\n    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n    this._platformLocation.replaceState(state, title, externalUrl);\n  }\n\n  override forward(): void {\n    this._platformLocation.forward();\n  }\n\n  override back(): void {\n    this._platformLocation.back();\n  }\n\n  override historyGo(relativePosition: number = 0): void {\n    this._platformLocation.historyGo?.(relativePosition);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, OnDestroy, Optional} from '@angular/core';\n\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams} from './util';\n\n\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\n@Injectable()\nexport class HashLocationStrategy extends LocationStrategy implements OnDestroy {\n  private _baseHref: string = '';\n  private _removeListenerFns: (() => void)[] = [];\n\n  constructor(\n      private _platformLocation: PlatformLocation,\n      @Optional() @Inject(APP_BASE_HREF) _baseHref?: string) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n\n  ngOnDestroy(): void {\n    while (this._removeListenerFns.length) {\n      this._removeListenerFns.pop()!();\n    }\n  }\n\n  override onPopState(fn: LocationChangeListener): void {\n    this._removeListenerFns.push(\n        this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));\n  }\n\n  override getBaseHref(): string {\n    return this._baseHref;\n  }\n\n  override path(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    let path = this._platformLocation.hash;\n    if (path == null) path = '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n\n  override prepareExternalUrl(internal: string): string {\n    const url = joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? ('#' + url) : url;\n  }\n\n  override pushState(state: any, title: string, path: string, queryParams: string) {\n    let url: string|null = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.pushState(state, title, url);\n  }\n\n  override replaceState(state: any, title: string, path: string, queryParams: string) {\n    let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.replaceState(state, title, url);\n  }\n\n  override forward(): void {\n    this._platformLocation.forward();\n  }\n\n  override back(): void {\n    this._platformLocation.back();\n  }\n\n  override historyGo(relativePosition: number = 0): void {\n    this._platformLocation.historyGo?.(relativePosition);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable, ɵɵinject} from '@angular/core';\nimport {SubscriptionLike} from 'rxjs';\nimport {LocationStrategy} from './location_strategy';\nimport {PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams, stripTrailingSlash} from './util';\n\n/** @publicApi */\nexport interface PopStateEvent {\n  pop?: boolean;\n  state?: any;\n  type?: string;\n  url?: string;\n}\n\n/**\n * @description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on the `LocationStrategy` used, `Location` persists\n * to the URL's path or the URL's hash segment.\n *\n * @usageNotes\n *\n * It's better to use the `Router.navigate()` service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * <code-example path='common/location/ts/path_location_component.ts'\n * region='LocationComponent'></code-example>\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'root',\n  // See #23917\n  useFactory: createLocation,\n})\nexport class Location {\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  /** @internal */\n  _baseHref: string;\n  /** @internal */\n  _platformStrategy: LocationStrategy;\n  /** @internal */\n  _platformLocation: PlatformLocation;\n  /** @internal */\n  _urlChangeListeners: ((url: string, state: unknown) => void)[] = [];\n  /** @internal */\n  _urlChangeSubscription?: SubscriptionLike;\n\n  constructor(platformStrategy: LocationStrategy, platformLocation: PlatformLocation) {\n    this._platformStrategy = platformStrategy;\n    const browserBaseHref = this._platformStrategy.getBaseHref();\n    this._platformLocation = platformLocation;\n    this._baseHref = stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n    this._platformStrategy.onPopState((ev) => {\n      this._subject.emit({\n        'url': this.path(true),\n        'pop': true,\n        'state': ev.state,\n        'type': ev.type,\n      });\n    });\n  }\n\n  /**\n   * Normalizes the URL path for this location.\n   *\n   * @param includeHash True to include an anchor fragment in the path.\n   *\n   * @returns The normalized URL path.\n   */\n  // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n  // removed.\n  path(includeHash: boolean = false): string {\n    return this.normalize(this._platformStrategy.path(includeHash));\n  }\n\n  /**\n   * Reports the current state of the location history.\n   * @returns The current value of the `history.state` object.\n   */\n  getState(): unknown {\n    return this._platformLocation.getState();\n  }\n\n  /**\n   * Normalizes the given path and compares to the current normalized path.\n   *\n   * @param path The given URL path.\n   * @param query Query parameters.\n   *\n   * @returns True if the given URL path is equal to the current normalized path, false\n   * otherwise.\n   */\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + normalizeQueryParams(query));\n  }\n\n  /**\n   * Normalizes a URL path by stripping any trailing slashes.\n   *\n   * @param url String representing a URL.\n   *\n   * @returns The normalized URL string.\n   */\n  normalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n  }\n\n  /**\n   * Normalizes an external URL path.\n   * If the given URL doesn't begin with a leading slash (`'/'`), adds one\n   * before normalizing. Adds a hash if `HashLocationStrategy` is\n   * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n   *\n   * @param url String representing a URL.\n   *\n   * @returns  A normalized platform-specific URL.\n   */\n  prepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._platformStrategy.prepareExternalUrl(url);\n  }\n\n  // TODO: rename this method to pushState\n  /**\n   * Changes the browser's URL to a normalized version of a given URL, and pushes a\n   * new item onto the platform's history.\n   *\n   * @param path  URL path to normalize.\n   * @param query Query parameters.\n   * @param state Location history state.\n   *\n   */\n  go(path: string, query: string = '', state: any = null): void {\n    this._platformStrategy.pushState(state, '', path, query);\n    this._notifyUrlChangeListeners(\n        this.prepareExternalUrl(path + normalizeQueryParams(query)), state);\n  }\n\n  /**\n   * Changes the browser's URL to a normalized version of the given URL, and replaces\n   * the top item on the platform's history stack.\n   *\n   * @param path  URL path to normalize.\n   * @param query Query parameters.\n   * @param state Location history state.\n   */\n  replaceState(path: string, query: string = '', state: any = null): void {\n    this._platformStrategy.replaceState(state, '', path, query);\n    this._notifyUrlChangeListeners(\n        this.prepareExternalUrl(path + normalizeQueryParams(query)), state);\n  }\n\n  /**\n   * Navigates forward in the platform's history.\n   */\n  forward(): void {\n    this._platformStrategy.forward();\n  }\n\n  /**\n   * Navigates back in the platform's history.\n   */\n  back(): void {\n    this._platformStrategy.back();\n  }\n\n  /**\n   * Navigate to a specific page from session history, identified by its relative position to the\n   * current page.\n   *\n   * @param relativePosition  Position of the target page in the history relative to the current\n   *     page.\n   * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`\n   * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go\n   * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs\n   * when `relativePosition` equals 0.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history\n   */\n  historyGo(relativePosition: number = 0): void {\n    this._platformStrategy.historyGo?.(relativePosition);\n  }\n\n  /**\n   * Registers a URL change listener. Use to catch updates performed by the Angular\n   * framework that are not detectible through \"popstate\" or \"hashchange\" events.\n   *\n   * @param fn The change handler function, which take a URL and a location history state.\n   */\n  onUrlChange(fn: (url: string, state: unknown) => void) {\n    this._urlChangeListeners.push(fn);\n\n    if (!this._urlChangeSubscription) {\n      this._urlChangeSubscription = this.subscribe(v => {\n        this._notifyUrlChangeListeners(v.url, v.state);\n      });\n    }\n  }\n\n  /** @internal */\n  _notifyUrlChangeListeners(url: string = '', state: unknown) {\n    this._urlChangeListeners.forEach(fn => fn(url, state));\n  }\n\n  /**\n   * Subscribes to the platform's `popState` events.\n   *\n   * Note: `Location.go()` does not trigger the `popState` event in the browser. Use\n   * `Location.onUrlChange()` to subscribe to URL changes instead.\n   *\n   * @param value Event that is triggered when the state history changes.\n   * @param exception The exception to throw.\n   *\n   * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)\n   *\n   * @returns Subscribed events.\n   */\n  subscribe(\n      onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,\n      onReturn?: (() => void)|null): SubscriptionLike {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n\n  /**\n   * Normalizes URL parameters by prepending with `?` if needed.\n   *\n   * @param  params String of URL parameters.\n   *\n   * @returns The normalized URL parameters string.\n   */\n  public static normalizeQueryParams: (params: string) => string = normalizeQueryParams;\n\n  /**\n   * Joins two parts of a URL with a slash if needed.\n   *\n   * @param start  URL string\n   * @param end    URL string\n   *\n   *\n   * @returns The joined URL string.\n   */\n  public static joinWithSlash: (start: string, end: string) => string = joinWithSlash;\n\n  /**\n   * Removes a trailing slash from a URL string if needed.\n   * Looks for the first occurrence of either `#`, `?`, or the end of the\n   * line as `/` characters and removes the trailing slash if one exists.\n   *\n   * @param url URL string.\n   *\n   * @returns The URL string, modified if needed.\n   */\n  public static stripTrailingSlash: (url: string) => string = stripTrailingSlash;\n}\n\nexport function createLocation() {\n  return new Location(ɵɵinject(LocationStrategy as any), ɵɵinject(PlatformLocation as any));\n}\n\nfunction _stripBaseHref(baseHref: string, url: string): string {\n  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵCurrencyIndex, ɵExtraLocaleDataIndex, ɵfindLocaleData, ɵgetLocaleCurrencyCode, ɵgetLocalePluralCase, ɵLocaleDataIndex} from '@angular/core';\n\nimport {CURRENCIES_EN, CurrenciesSymbols} from './currencies';\n\n\n/**\n * Format styles that can be used to represent numbers.\n * @see `getLocaleNumberFormat()`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport enum NumberFormatStyle {\n  Decimal,\n  Percent,\n  Currency,\n  Scientific\n}\n\n/**\n * Plurality cases used for translating plurals to different languages.\n *\n * @see `NgPlural`\n * @see `NgPluralCase`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport enum Plural {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Few = 3,\n  Many = 4,\n  Other = 5,\n}\n\n/**\n * Context-dependant translation forms for strings.\n * Typically the standalone version is for the nominative form of the word,\n * and the format version is used for the genitive case.\n * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport enum FormStyle {\n  Format,\n  Standalone\n}\n\n/**\n * String widths available for translations.\n * The specific character widths are locale-specific.\n * Examples are given for the word \"Sunday\" in English.\n *\n * @publicApi\n */\nexport enum TranslationWidth {\n  /** 1 character for `en-US`. For example: 'S' */\n  Narrow,\n  /** 3 characters for `en-US`. For example: 'Sun' */\n  Abbreviated,\n  /** Full length for `en-US`. For example: \"Sunday\" */\n  Wide,\n  /** 2 characters for `en-US`, For example: \"Su\" */\n  Short\n}\n\n/**\n * String widths available for date-time formats.\n * The specific character widths are locale-specific.\n * Examples are given for `en-US`.\n *\n * @see `getLocaleDateFormat()`\n * @see `getLocaleTimeFormat()`\n * @see `getLocaleDateTimeFormat()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n * @publicApi\n */\nexport enum FormatWidth {\n  /**\n   * For `en-US`, 'M/d/yy, h:mm a'`\n   * (Example: `6/15/15, 9:03 AM`)\n   */\n  Short,\n  /**\n   * For `en-US`, `'MMM d, y, h:mm:ss a'`\n   * (Example: `Jun 15, 2015, 9:03:01 AM`)\n   */\n  Medium,\n  /**\n   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n   */\n  Long,\n  /**\n   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n   */\n  Full\n}\n\n/**\n * Symbols that can be used to replace placeholders in number patterns.\n * Examples are based on `en-US` values.\n *\n * @see `getLocaleNumberSymbol()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport enum NumberSymbol {\n  /**\n   * Decimal separator.\n   * For `en-US`, the dot character.\n   * Example: 2,345`.`67\n   */\n  Decimal,\n  /**\n   * Grouping separator, typically for thousands.\n   * For `en-US`, the comma character.\n   * Example: 2`,`345.67\n   */\n  Group,\n  /**\n   * List-item separator.\n   * Example: \"one, two, and three\"\n   */\n  List,\n  /**\n   * Sign for percentage (out of 100).\n   * Example: 23.4%\n   */\n  PercentSign,\n  /**\n   * Sign for positive numbers.\n   * Example: +23\n   */\n  PlusSign,\n  /**\n   * Sign for negative numbers.\n   * Example: -23\n   */\n  MinusSign,\n  /**\n   * Computer notation for exponential value (n times a power of 10).\n   * Example: 1.2E3\n   */\n  Exponential,\n  /**\n   * Human-readable format of exponential.\n   * Example: 1.2x103\n   */\n  SuperscriptingExponent,\n  /**\n   * Sign for permille (out of 1000).\n   * Example: 23.4‰\n   */\n  PerMille,\n  /**\n   * Infinity, can be used with plus and minus.\n   * Example: ∞, +∞, -∞\n   */\n  Infinity,\n  /**\n   * Not a number.\n   * Example: NaN\n   */\n  NaN,\n  /**\n   * Symbol used between time units.\n   * Example: 10:52\n   */\n  TimeSeparator,\n  /**\n   * Decimal separator for currency values (fallback to `Decimal`).\n   * Example: $2,345.67\n   */\n  CurrencyDecimal,\n  /**\n   * Group separator for currency values (fallback to `Group`).\n   * Example: $2,345.67\n   */\n  CurrencyGroup\n}\n\n/**\n * The value for each day of the week, based on the `en-US` locale\n *\n * @publicApi\n */\nexport enum WeekDay {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @param locale A locale code, such as `fr-FR`.\n * @returns The locale code. For example, `fr`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleId(locale: string): string {\n  return ɵfindLocaleData(locale)[ɵLocaleDataIndex.LocaleId];\n}\n\n/**\n * Retrieves day period strings for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const amPmData = <[string, string][][]>[\n    data[ɵLocaleDataIndex.DayPeriodsFormat], data[ɵLocaleDataIndex.DayPeriodsStandalone]\n  ];\n  const amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleDayNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const daysData =\n      <string[][][]>[data[ɵLocaleDataIndex.DaysFormat], data[ɵLocaleDataIndex.DaysStandalone]];\n  const days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleMonthNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const monthsData =\n      <string[][][]>[data[ɵLocaleDataIndex.MonthsFormat], data[ɵLocaleDataIndex.MonthsStandalone]];\n  const months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @param locale A locale code for the locale format rules to use.\n * @param width The required character width.\n\n * @returns An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleEraNames(\n    locale: string, width: TranslationWidth): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const erasData = <[string, string][]>data[ɵLocaleDataIndex.Eras];\n  return getLastDefinedValue(erasData, width);\n}\n\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleFirstDayOfWeek(locale: string): WeekDay {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.FirstDayOfWeek];\n}\n\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The range of day values, `[startDay, endDay]`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay] {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.WeekendRange];\n}\n\n/**\n * Retrieves a localized date-value formating string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formating string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.DateFormat], width);\n}\n\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n\n * @publicApi\n */\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.TimeFormat], width);\n}\n\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  const dateTimeFormatData = <string[]>data[ɵLocaleDataIndex.DateTimeFormat];\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @param locale The locale code.\n * @param symbol The symbol to localize.\n * @returns The character for the localized symbol.\n * @see `NumberSymbol`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\n  const data = ɵfindLocaleData(locale);\n  const res = data[ɵLocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n    }\n  }\n  return res;\n}\n\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @param locale A locale code for the locale format rules to use.\n * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @returns The localized format string.\n * @see `NumberFormatStyle`\n * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.NumberFormats][type];\n}\n\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The localized symbol character,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleCurrencySymbol(locale: string): string|null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencySymbol] || null;\n}\n\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency name,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleCurrencyName(locale: string): string|null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencyName] || null;\n}\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n * @publicApi\n */\nexport function getLocaleCurrencyCode(locale: string): string|null {\n  return ɵgetLocaleCurrencyCode(locale);\n}\n\n/**\n * Retrieves the currency values for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency values.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction getLocaleCurrencies(locale: string): {[code: string]: CurrenciesSymbols} {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Currencies];\n}\n\n/**\n * @alias core/ɵgetLocalePluralCase\n * @publicApi\n */\nexport const getLocalePluralCase: (locale: string) => ((value: number) => Plural) =\n    ɵgetLocalePluralCase;\n\nfunction checkFullData(data: any) {\n  if (!data[ɵLocaleDataIndex.ExtraData]) {\n    throw new Error(`Missing extra locale data for the locale \"${\n        data[ɵLocaleDataIndex\n                 .LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n  }\n}\n\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n-common-format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n * @see `getLocaleExtraDayPeriods()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time|[Time, Time])[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const rules = data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\n  return rules.map((rule: string|[string, string]) => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n-common-format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns The translated day-period strings.\n * @see `getLocaleExtraDayPeriodRules()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const dayPeriodsData = <string[][][]>[\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodFormats],\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone]\n  ];\n  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n\n/**\n * Retrieves the writing direction of a specified locale\n * @param locale A locale code for the locale format rules to use.\n * @publicApi\n * @returns 'rtl' or 'ltr'\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nexport function getLocaleDirection(locale: string): 'ltr'|'rtl' {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Directionality];\n}\n\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @param data The data array to retrieve from.\n * @param index A 0-based index into the array to start from.\n * @returns The value immediately before the given index position.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\n  for (let i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new Error('Locale data API: locale data undefined');\n}\n\n/**\n * Represents a time value with hours and minutes.\n *\n * @publicApi\n */\nexport type Time = {\n  hours: number,\n  minutes: number\n};\n\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time: string): Time {\n  const [h, m] = time.split(':');\n  return {hours: +h, minutes: +m};\n}\n\n\n\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @param code The currency code.\n * @param format The format, `wide` or `narrow`.\n * @param locale A locale code for the locale format rules to use.\n *\n * @returns The symbol, or the currency code if no symbol is available.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getCurrencySymbol(code: string, format: 'wide'|'narrow', locale = 'en'): string {\n  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n  const symbolNarrow = currency[ɵCurrencyIndex.SymbolNarrow];\n\n  if (format === 'narrow' && typeof symbolNarrow === 'string') {\n    return symbolNarrow;\n  }\n\n  return currency[ɵCurrencyIndex.Symbol] || code;\n}\n\n// Most currencies have cents, that's why the default is 2\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @param code The currency code.\n * @returns The number of decimal digits, typically 0 or 2.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n *\n * @publicApi\n */\nexport function getNumberOfCurrencyDigits(code: string): number {\n  let digits;\n  const currency = CURRENCIES_EN[code];\n  if (currency) {\n    digits = currency[ɵCurrencyIndex.NbOfDigits];\n  }\n  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, LOCALE_ID} from '@angular/core';\n\nimport {getLocalePluralCase, Plural} from './locale_data_api';\n\n\n/**\n * @publicApi\n */\nexport abstract class NgLocalization {\n  abstract getPluralCategory(value: any, locale?: string): string;\n}\n\n\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization, locale?: string): string {\n  let key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value, locale);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new Error(`No plural message found for value \"${value}\"`);\n}\n\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\n@Injectable()\nexport class NgLocaleLocalization extends NgLocalization {\n  constructor(@Inject(LOCALE_ID) protected locale: string) {\n    super();\n  }\n\n  override getPluralCategory(value: any, locale?: string): string {\n    const plural = getLocalePluralCase(locale || this.locale)(value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {COMMON_DIRECTIVES} from './directives/index';\nimport {NgLocaleLocalization, NgLocalization} from './i18n/localization';\nimport {COMMON_PIPES} from './pipes/index';\n\n\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n * @publicApi\n */\n@NgModule({\n  declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  providers: [\n    {provide: NgLocalization, useClass: NgLocaleLocalization},\n  ],\n})\nexport class CommonModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵdefineInjectable, ɵɵinject} from '@angular/core';\n\nimport {DOCUMENT} from './dom_tokens';\n\n\n\n/**\n * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.\n *\n * @publicApi\n */\nexport abstract class ViewportScroller {\n  // De-sugared tree-shakable injection\n  // See #23917\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable({\n    token: ViewportScroller,\n    providedIn: 'root',\n    factory: () => new BrowserViewportScroller(ɵɵinject(DOCUMENT), window)\n  });\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   * @param offset A position in screen coordinates (a tuple with x and y values)\n   * or a function that returns the top offset position.\n   *\n   */\n  abstract setOffset(offset: [number, number]|(() => [number, number])): void;\n\n  /**\n   * Retrieves the current scroll position.\n   * @returns A position in screen coordinates (a tuple with x and y values).\n   */\n  abstract getScrollPosition(): [number, number];\n\n  /**\n   * Scrolls to a specified position.\n   * @param position A position in screen coordinates (a tuple with x and y values).\n   */\n  abstract scrollToPosition(position: [number, number]): void;\n\n  /**\n   * Scrolls to an anchor element.\n   * @param anchor The ID of the anchor element.\n   */\n  abstract scrollToAnchor(anchor: string): void;\n\n  /**\n   * Disables automatic scroll restoration provided by the browser.\n   * See also [window.history.scrollRestoration\n   * info](https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration).\n   */\n  abstract setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void;\n}\n\n/**\n * Manages the scroll position for a browser window.\n */\nexport class BrowserViewportScroller implements ViewportScroller {\n  private offset: () => [number, number] = () => [0, 0];\n\n  constructor(private document: Document, private window: Window) {}\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   * @param offset A position in screen coordinates (a tuple with x and y values)\n   * or a function that returns the top offset position.\n   *\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {\n    if (Array.isArray(offset)) {\n      this.offset = () => offset;\n    } else {\n      this.offset = offset;\n    }\n  }\n\n  /**\n   * Retrieves the current scroll position.\n   * @returns The position in screen coordinates.\n   */\n  getScrollPosition(): [number, number] {\n    if (this.supportsScrolling()) {\n      return [this.window.pageXOffset, this.window.pageYOffset];\n    } else {\n      return [0, 0];\n    }\n  }\n\n  /**\n   * Sets the scroll position.\n   * @param position The new position in screen coordinates.\n   */\n  scrollToPosition(position: [number, number]): void {\n    if (this.supportsScrolling()) {\n      this.window.scrollTo(position[0], position[1]);\n    }\n  }\n\n  /**\n   * Scrolls to an element and attempts to focus the element.\n   *\n   * Note that the function name here is misleading in that the target string may be an ID for a\n   * non-anchor element.\n   *\n   * @param target The ID of an element or name of the anchor.\n   *\n   * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document\n   * @see https://html.spec.whatwg.org/#scroll-to-fragid\n   */\n  scrollToAnchor(target: string): void {\n    if (!this.supportsScrolling()) {\n      return;\n    }\n\n    const elSelected = findAnchorFromDocument(this.document, target);\n\n    if (elSelected) {\n      this.scrollToElement(elSelected);\n      // After scrolling to the element, the spec dictates that we follow the focus steps for the\n      // target. Rather than following the robust steps, simply attempt focus.\n      this.attemptFocus(elSelected);\n    }\n  }\n\n  /**\n   * Disables automatic scroll restoration provided by the browser.\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {\n    if (this.supportScrollRestoration()) {\n      const history = this.window.history;\n      if (history && history.scrollRestoration) {\n        history.scrollRestoration = scrollRestoration;\n      }\n    }\n  }\n\n  /**\n   * Scrolls to an element using the native offset and the specified offset set on this scroller.\n   *\n   * The offset can be used when we know that there is a floating header and scrolling naively to an\n   * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.\n   */\n  private scrollToElement(el: HTMLElement): void {\n    const rect = el.getBoundingClientRect();\n    const left = rect.left + this.window.pageXOffset;\n    const top = rect.top + this.window.pageYOffset;\n    const offset = this.offset();\n    this.window.scrollTo(left - offset[0], top - offset[1]);\n  }\n\n  /**\n   * Calls `focus` on the `focusTarget` and returns `true` if the element was focused successfully.\n   *\n   * If `false`, further steps may be necessary to determine a valid substitute to be focused\n   * instead.\n   *\n   * @see https://html.spec.whatwg.org/#get-the-focusable-area\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus\n   * @see https://html.spec.whatwg.org/#focusable-area\n   */\n  private attemptFocus(focusTarget: HTMLElement): boolean {\n    focusTarget.focus();\n    return this.document.activeElement === focusTarget;\n  }\n\n  /**\n   * We only support scroll restoration when we can get a hold of window.\n   * This means that we do not support this behavior when running in a web worker.\n   *\n   * Lifting this restriction right now would require more changes in the dom adapter.\n   * Since webworkers aren't widely used, we will lift it once RouterScroller is\n   * battle-tested.\n   */\n  private supportScrollRestoration(): boolean {\n    try {\n      if (!this.supportsScrolling()) {\n        return false;\n      }\n      // The `scrollRestoration` property could be on the `history` instance or its prototype.\n      const scrollRestorationDescriptor = getScrollRestorationProperty(this.window.history) ||\n          getScrollRestorationProperty(Object.getPrototypeOf(this.window.history));\n      // We can write to the `scrollRestoration` property if it is a writable data field or it has a\n      // setter function.\n      return !!scrollRestorationDescriptor &&\n          !!(scrollRestorationDescriptor.writable || scrollRestorationDescriptor.set);\n    } catch {\n      return false;\n    }\n  }\n\n  private supportsScrolling(): boolean {\n    try {\n      return !!this.window && !!this.window.scrollTo && 'pageXOffset' in this.window;\n    } catch {\n      return false;\n    }\n  }\n}\n\nfunction getScrollRestorationProperty(obj: any): PropertyDescriptor|undefined {\n  return Object.getOwnPropertyDescriptor(obj, 'scrollRestoration');\n}\n\nfunction findAnchorFromDocument(document: Document, target: string): HTMLElement|null {\n  const documentResult = document.getElementById(target) || document.getElementsByName(target)[0];\n\n  if (documentResult) {\n    return documentResult;\n  }\n\n  // `getElementById` and `getElementsByName` won't pierce through the shadow DOM so we\n  // have to traverse the DOM manually and do the lookup through the shadow roots.\n  if (typeof document.createTreeWalker === 'function' && document.body &&\n      ((document.body as any).createShadowRoot || document.body.attachShadow)) {\n    const treeWalker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT);\n    let currentNode = treeWalker.currentNode as HTMLElement | null;\n\n    while (currentNode) {\n      const shadowRoot = currentNode.shadowRoot;\n\n      if (shadowRoot) {\n        // Note that `ShadowRoot` doesn't support `getElementsByName`\n        // so we have to fall back to `querySelector`.\n        const result =\n            shadowRoot.getElementById(target) || shadowRoot.querySelector(`[name=\"${target}\"]`);\n        if (result) {\n          return result;\n        }\n      }\n\n      currentNode = treeWalker.nextNode() as HTMLElement | null;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Provides an empty implementation of the viewport scroller.\n */\nexport class NullViewportScroller implements ViewportScroller {\n  /**\n   * Empty implementation\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {}\n\n  /**\n   * Empty implementation\n   */\n  getScrollPosition(): [number, number] {\n    return [0, 0];\n  }\n\n  /**\n   * Empty implementation\n   */\n  scrollToPosition(position: [number, number]): void {}\n\n  /**\n   * Empty implementation\n   */\n  scrollToAnchor(anchor: string): void {}\n\n  /**\n   * Empty implementation\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  readonly supportsDOMEvents: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵparseCookieValue as parseCookieValue, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/common';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => {\n      el.removeEventListener(evt, listener, false);\n    };\n  }\n  dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  remove(node: Node): void {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n  createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument(): Document {\n    return document;\n  }\n\n  isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement(): void {\n    baseElement = null;\n  }\n  getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  getCookie(name: string): string|null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: HTMLAnchorElement|undefined;\nfunction relativePath(url: any): string {\n  urlParsingNode = urlParsingNode || document.createElement('a');\n  urlParsingNode.setAttribute('href', url);\n  const pathName = urlParsingNode.pathname;\n  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const cookie of cookieStr.split(';')) {\n    const eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {APP_INITIALIZER, ApplicationInitStatus, InjectionToken, Injector, StaticProvider} from '@angular/core';\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n\nexport function appInitializerFactory(transitionId: string, document: any, injector: Injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const dom = getDOM();\n      const styles: HTMLCollectionOf<HTMLStyleElement> =\n          document.querySelectorAll(`style[ng-transition=\"${transitionId}\"]`);\n      for (let i = 0; i < styles.length; i++) {\n        dom.remove(styles[i]);\n      }\n    });\n  };\n}\n\nexport const SERVER_TRANSITION_PROVIDERS: StaticProvider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TRANSITION_ID, DOCUMENT, Injector],\n    multi: true\n  },\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {GetTestability, setTestabilityGetter, Testability, TestabilityRegistry, ɵglobal as global} from '@angular/core';\n\nexport class BrowserGetTestability implements GetTestability {\n  static init() {\n    setTestabilityGetter(new BrowserGetTestability());\n  }\n\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Registers a global handler for an event in a target view.\n   *\n   * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns A callback function that can be used to remove the handler.\n   * @deprecated No longer being used in Ivy code. To be removed in version 14.\n   */\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    const plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // TODO(issue/24571): remove '!'.\n  manager!: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n\n  addGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\n\n@Injectable()\nexport class SharedStylesHost {\n  /** @internal */\n  protected _stylesSet = new Set<string>();\n\n  addStyles(styles: string[]): void {\n    const additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n\n  onStylesAdded(additions: Set<string>): void {}\n\n  getAllStyles(): string[] {\n    return Array.from(this._stylesSet);\n  }\n}\n\n@Injectable()\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n  // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n  private _hostNodes = new Map<Node, Node[]>();\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._hostNodes.set(_doc.head, []);\n  }\n\n  private _addStylesToHost(styles: Set<string>, host: Node, styleNodes: Node[]): void {\n    styles.forEach((style: string) => {\n      const styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      styleNodes.push(host.appendChild(styleEl));\n    });\n  }\n\n  addHost(hostNode: Node): void {\n    const styleNodes: Node[] = [];\n    this._addStylesToHost(this._stylesSet, hostNode, styleNodes);\n    this._hostNodes.set(hostNode, styleNodes);\n  }\n\n  removeHost(hostNode: Node): void {\n    const styleNodes = this._hostNodes.get(hostNode);\n    if (styleNodes) {\n      styleNodes.forEach(removeStyle);\n    }\n    this._hostNodes.delete(hostNode);\n  }\n\n  override onStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach((styleNodes, hostNode) => {\n      this._addStylesToHost(additions, hostNode, styleNodes);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._hostNodes.forEach(styleNodes => styleNodes.forEach(removeStyle));\n  }\n}\n\nfunction removeStyle(styleNode: Node): void {\n  getDOM().remove(styleNode);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_ID, Inject, Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let i = 0; i < styles.length; i++) {\n    let style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n  // decoratePreventDefault or is a listener added outside the Angular context so it can handle the\n  // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap\n  // the listener (see below).\n  return (event: any) => {\n    // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node\n    // can inspect the listener toString contents for the existence of this special token. Because\n    // the token is a string literal, it is ensured to not be modified by compiled code.\n    if (event === '__ngUnwrap__') {\n      return eventHandler;\n    }\n\n    const allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n\n    return undefined;\n  };\n}\n\nlet hasLoggedNativeEncapsulationWarning = false;\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2 {\n  private rendererByCompId = new Map<string, Renderer2>();\n  private defaultRenderer: Renderer2;\n\n  constructor(\n      private eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      @Inject(APP_ID) private appId: string) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer = new EmulatedEncapsulationDomRenderer2(\n              this.eventManager, this.sharedStylesHost, type, this.appId);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        (<EmulatedEncapsulationDomRenderer2>renderer).applyToHost(element);\n        return renderer;\n      }\n      // @ts-ignore TODO: Remove as part of FW-2290. TS complains about us dealing with an enum\n      // value that is not known (but previously was the value for ViewEncapsulation.Native)\n      case 1:\n      case ViewEncapsulation.ShadowDom:\n        // TODO(FW-2290): remove the `case 1:` fallback logic and the warning in v12.\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // @ts-ignore TODO: Remove as part of FW-2290. TS complains about us dealing with an\n            // enum value that is not known (but previously was the value for\n            // ViewEncapsulation.Native)\n            !hasLoggedNativeEncapsulationWarning && type.encapsulation === 1) {\n          hasLoggedNativeEncapsulationWarning = true;\n          console.warn(\n              'ViewEncapsulation.Native is no longer supported. Falling back to ViewEncapsulation.ShadowDom. The fallback will be removed in v12.');\n        }\n\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\n\n  begin() {}\n  end() {}\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  constructor(private eventManager: EventManager) {}\n\n  destroy(): void {}\n\n  destroyNode = null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\n      // will result in undefined, so we just return the namespace here.\n      return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return document.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return document.createComment(value);\n  }\n\n  createText(value: string): any {\n    return document.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    parent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      // TODO(FW-811): Ivy may cause issues here because it's passing around\n      // full URIs for namespaces, therefore this lookup will fail.\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      // TODO(FW-811): Ivy may cause issues here because it's passing around\n      // full URIs for namespaces, therefore this lookup will fail.\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        // TODO(FW-811): Since ivy is passing around full URIs for namespaces\n        // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\n        // which is wrong.\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    NG_DEV_MODE && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback));\n    }\n    return <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)) as () => void;\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(`Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${\n        name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\n      private component: RendererType2, appId: string) {\n    super(eventManager);\n    const styles = flattenStyles(appId + '-' + component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(appId + '-' + component.id);\n    this.hostAttr = shimHostAttribute(appId + '-' + component.id);\n  }\n\n  applyToHost(element: any) {\n    super.setAttribute(element, this.hostAttr, '');\n  }\n\n  override createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      private hostEl: any, component: RendererType2) {\n    super(eventManager);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  override destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n\n  override appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  override insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  override removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  override parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, handler as EventListener, false);\n    return () => this.removeEventListener(element, eventName, handler as EventListener);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    return target.removeEventListener(eventName, callback as EventListener);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf https://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  static parseEventName(eventName: string): {fullKey: string, domEventName: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string, domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  static getEventFullKey(event: KeyboardEvent): string {\n    let fullKey = '';\n    let key = getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n\nfunction getEventKey(event: any): string {\n  let key = event.key;\n  if (key == null) {\n    key = event.keyIdentifier;\n    // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n    // Safari cf\n    // https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n    if (key == null) {\n      return 'Unidentified';\n    }\n    if (key.startsWith('U+')) {\n      key = String.fromCharCode(parseInt(key.substring(2), 16));\n      if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n        // There is a bug in Chrome for numeric keypad keys:\n        // https://code.google.com/p/chromium/issues/detail?id=155654\n        // 1, 2, 3 ... are reported as A, B, C ...\n        key = (_chromeNumKeyPadMap as any)[key];\n      }\n    }\n  }\n\n  return _keyMap[key] || key;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, DOCUMENT, XhrFactory, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, createPlatformFactory, ErrorHandler, Inject, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, platformCore, PlatformRef, RendererFactory2, Sanitizer, SkipSelf, StaticProvider, Testability, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵsetDocument} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\nexport const BROWSER_MODULE_PROVIDERS: StaticProvider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  {\n    provide: DomRendererFactory2,\n    useClass: DomRendererFactory2,\n    deps: [EventManager, DomSharedStylesHost, APP_ID]\n  },\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n  {provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT]},\n  {provide: Testability, useClass: Testability, deps: [NgZone]},\n  {provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone]},\n  {provide: XhrFactory, useClass: BrowserXhr, deps: []},\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule]})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BrowserModule) parentModule: BrowserModule|null) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const PLATFORM_BROWSER_ID = 'browser';\nexport const PLATFORM_SERVER_ID = 'server';\nexport const PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\nexport const PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nexport function isPlatformBrowser(platformId: Object): boolean {\n  return platformId === PLATFORM_BROWSER_ID;\n}\n\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nexport function isPlatformServer(platformId: Object): boolean {\n  return platformId === PLATFORM_SERVER_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker app platform.\n * @publicApi\n */\nexport function isPlatformWorkerApp(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_APP_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * @publicApi\n */\nexport function isPlatformWorkerUi(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_UI_ID;\n}\n","import { SchedulerLike, ValueFromArray } from '../types';\nimport { Observable } from '../Observable';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return from(args as T[], scheduler);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  }\n\n  getValue(): T {\n    const { hasError, thrownError, _value } = this;\n    if (hasError) {\n      throw thrownError;\n    }\n    this._throwIfClosed();\n    return _value;\n  }\n\n  next(value: T): void {\n    super.next((this._value = value));\n  }\n}\n","const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\n\n/**\n * Used in functions where either a list of arguments, a single array of arguments, or a\n * dictionary of arguments can be returned. Returns an object with an `args` property with\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\n * property.\n */\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return { args: first, keys: null };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map((key) => first[key]),\n        keys,\n      };\n    }\n  }\n\n  return { args: args as T[], keys: null };\n}\n\nfunction isPOJO(obj: any): obj is object {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n","import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf, ObservableInputTuple } from '../types';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { Subscriber } from '../Subscriber';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { Subscription } from '../Subscription';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { AnyCatcher } from '../AnyCatcher';\nimport { executeSchedule } from '../util/executeSchedule';\n\n// combineLatest(any)\n// We put this first because we need to catch cases where the user has supplied\n// _exactly `any`_ as the argument. Since `any` literally matches _anything_,\n// we don't want it to randomly hit one of the other type signatures below,\n// as we have no idea at build-time what type we should be returning when given an any.\n\n/**\n * You have passed `any` here, we can't figure out if it is\n * an array or an object, so you're getting `unknown`. Use better types.\n * @param arg Something typed as `any`\n */\nexport function combineLatest<T extends AnyCatcher>(arg: T): Observable<unknown>;\n\n// combineLatest([a, b, c])\nexport function combineLatest(sources: []): Observable<never>;\nexport function combineLatest<A extends readonly unknown[]>(sources: readonly [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R,\n  scheduler: SchedulerLike\n): Observable<R>;\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  sources: readonly [...ObservableInputTuple<A>],\n  scheduler: SchedulerLike\n): Observable<A>;\n\n// combineLatest(a, b, c)\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelectorAndScheduler: [...ObservableInputTuple<A>, (...values: A) => R, SchedulerLike]\n): Observable<R>;\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]\n): Observable<A>;\n\n// combineLatest({a, b, c})\nexport function combineLatest(sourcesObject: { [K in any]: never }): Observable<never>;\nexport function combineLatest<T extends Record<string, ObservableInput<any>>>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed in the\n * observables array. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to this operator,\n * the returned Observable will always emit an array of `n` values, in an order\n * corresponding to the order of the passed Observables (the value from the first Observable\n * will be at index 0 of the array and so on).\n *\n * Static version of `combineLatest` accepts an array of Observables. Note that an array of\n * Observables is a good choice, if you don't know beforehand how many Observables\n * you will combine. Passing an empty array will result in an Observable that\n * completes immediately.\n *\n * To ensure the output array always has the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all these values but the last\n * will be lost. On the other hand, if some Observable does not emit a value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will now be impossible to include a value from the\n * completed Observable in the resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, the resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, the result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of a completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * ## Examples\n * ### Combine two timer Observables\n * ```ts\n * import { combineLatest, timer } from 'rxjs';\n *\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest([firstTimer, secondTimer]);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n * ### Combine a dictionary of Observables\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { delay, startWith } from 'rxjs/operators';\n *\n * const observables = {\n *   a: of(1).pipe(delay(1000), startWith(0)),\n *   b: of(5).pipe(delay(5000), startWith(0)),\n *   c: of(10).pipe(delay(10000), startWith(0))\n * };\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // {a: 0, b: 0, c: 0} immediately\n * // {a: 1, b: 0, c: 0} after 1s\n * // {a: 1, b: 5, c: 0} after 5s\n * // {a: 1, b: 5, c: 10} after 10s\n * ```\n * ### Combine an array of Observables\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { delay, startWith } from 'rxjs/operators';\n *\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\n *     startWith(0),\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n *\n * ### Use map operator to dynamically calculate the Body-Mass Index\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest([weight, height]).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} [observables] An array of input Observables to combine with each other.\n * An array of Observables must be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<O extends ObservableInput<any>, R>(...args: any[]): Observable<R> | Observable<ObservedValueOf<O>[]> {\n  const scheduler = popScheduler(args);\n  const resultSelector = popResultSelector(args);\n\n  const { args: observables, keys } = argsArgArrayOrObject(args);\n\n  if (observables.length === 0) {\n    // If no observables are passed, or someone has passed an ampty array\n    // of observables, or even an empty object POJO, we need to just\n    // complete (EMPTY), but we have to honor the scheduler provided if any.\n    return from([], scheduler as any);\n  }\n\n  const result = new Observable<ObservedValueOf<O>[]>(\n    combineLatestInit(\n      observables as ObservableInput<ObservedValueOf<O>>[],\n      scheduler,\n      keys\n        ? // A handler for scrubbing the array of args into a dictionary.\n          (values) => createObject(keys, values)\n        : // A passthrough to just return the array\n          identity\n    )\n  );\n\n  return resultSelector ? (result.pipe(mapOneOrManyArgs(resultSelector)) as Observable<R>) : result;\n}\n\nexport function combineLatestInit(\n  observables: ObservableInput<any>[],\n  scheduler?: SchedulerLike,\n  valueTransform: (values: any[]) => any = identity\n) {\n  return (subscriber: Subscriber<any>) => {\n    // The outer subscription. We're capturing this in a function\n    // because we may have to schedule it.\n    maybeSchedule(\n      scheduler,\n      () => {\n        const { length } = observables;\n        // A store for the values each observable has emitted so far. We match observable to value on index.\n        const values = new Array(length);\n        // The number of currently active subscriptions, as they complete, we decrement this number to see if\n        // we are all done combining values, so we can complete the result.\n        let active = length;\n        // The number of inner sources that still haven't emitted the first value\n        // We need to track this because all sources need to emit one value in order\n        // to start emitting values.\n        let remainingFirstValues = length;\n        // The loop to kick off subscription. We're keying everything on index `i` to relate the observables passed\n        // in to the slot in the output array or the key in the array of keys in the output dictionary.\n        for (let i = 0; i < length; i++) {\n          maybeSchedule(\n            scheduler,\n            () => {\n              const source = from(observables[i], scheduler as any);\n              let hasFirstValue = false;\n              source.subscribe(\n                new OperatorSubscriber(\n                  subscriber,\n                  (value) => {\n                    // When we get a value, record it in our set of values.\n                    values[i] = value;\n                    if (!hasFirstValue) {\n                      // If this is our first value, record that.\n                      hasFirstValue = true;\n                      remainingFirstValues--;\n                    }\n                    if (!remainingFirstValues) {\n                      // We're not waiting for any more\n                      // first values, so we can emit!\n                      subscriber.next(valueTransform(values.slice()));\n                    }\n                  },\n                  () => {\n                    if (!--active) {\n                      // We only complete the result if we have no more active\n                      // inner observables.\n                      subscriber.complete();\n                    }\n                  }\n                )\n              );\n            },\n            subscriber\n          );\n        }\n      },\n      subscriber\n    );\n  };\n}\n\n/**\n * A small utility to handle the couple of locations where we want to schedule if a scheduler was provided,\n * but we don't if there was no scheduler.\n */\nfunction maybeSchedule(scheduler: SchedulerLike | undefined, execute: () => void, subscription: Subscription) {\n  if (scheduler) {\n    executeSchedule(subscription, scheduler, execute);\n  } else {\n    execute();\n  }\n}\n","export function createObject(keys: string[], values: any[]) {\n  return keys.reduce((result, key, i) => ((result[key] = values[i]), result), {} as any);\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface EmptyError extends Error {}\n\nexport interface EmptyErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): EmptyError;\n}\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n * @see {@link firstValueFrom}\n * @see {@link lastValueFrom}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = createErrorClass((_super) => function EmptyErrorImpl(this: any) {\n  _super(this);\n  this.name = 'EmptyError';\n  this.message = 'no elements in sequence';\n});\n","import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(\n  ...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]\n): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n * ### Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n * ```ts\n * import { concat, interval, range } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * ### Concatenate 3 Observables\n * ```ts\n * import { concat, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * ### Concatenate the same Observable to repeat it\n * ```ts\n * import { concat, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param input1 An input Observable to concatenate with others.\n * @param input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param scheduler An optional {@link SchedulerLike} to schedule each\n * Observable subscription on.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(from(args, popScheduler(args)));\n}\n","import { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.svg)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, take, concatAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev => interval(1000).pipe(take(4))),\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaustAll}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable emitting values from all the\n * inner Observables concatenated.\n */\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeAll(1);\n}\n","import { Observable } from '../Observable';\nimport { ObservedValueOf, ObservableInput } from '../types';\nimport { innerFrom } from './innerFrom';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * ![](defer.png)\n *\n * `defer` allows you to create an Observable only when the Observer\n * subscribes. It waits until an Observer subscribes to it, calls the given\n * factory function to get an Observable -- where a factory function typically\n * generates a new Observable -- and subscribes the Observer to this Observable.\n * In case the factory function returns a falsy value, then EMPTY is used as\n * Observable instead. Last but not least, an exception during the factory\n * function call is transferred to the Observer by calling `error`.\n *\n * ## Example\n * ### Subscribe to either an Observable of clicks or an Observable of interval, at random\n * ```ts\n * import { defer, fromEvent, interval } from 'rxjs';\n *\n * const clicksOrInterval = defer(function () {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link Observable}\n *\n * @param {function(): ObservableInput} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n */\nexport function defer<R extends ObservableInput<any>>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\n  return new Observable<ObservedValueOf<R>>((subscriber) => {\n    innerFrom(observableFactory()).subscribe(subscriber);\n  });\n}\n","import { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the `multicast(() => new Subject())` operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { tap, publish, refCount } from 'rxjs/operators';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap((num) => console.log(`refCount ${num}`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap((num) => console.log(`publish ${num}`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the publish operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @return A function that returns an Observable that automates the connection\n * to ConnectableObservable.\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n * @deprecated Replaced with the {@link share} operator. How `share` is used\n * will depend on the connectable observable you created just prior to the\n * `refCount` operator.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let connection: Subscription | null = null;\n\n    (source as any)._refCount++;\n\n    const refCounter = new OperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\n      if (!source || (source as any)._refCount <= 0 || 0 < --(source as any)._refCount) {\n        connection = null;\n        return;\n      }\n\n      ///\n      // Compare the local RefCountSubscriber's connection Subscription to the\n      // connection Subscription on the shared ConnectableObservable. In cases\n      // where the ConnectableObservable source synchronously emits values, and\n      // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n      // execution continues to here before the RefCountOperator has a chance to\n      // supply the RefCountSubscriber with the shared connection Subscription.\n      // For example:\n      // ```\n      // range(0, 10).pipe(\n      //   publish(),\n      //   refCount(),\n      //   take(5),\n      // )\n      // .subscribe();\n      // ```\n      // In order to account for this case, RefCountSubscriber should only dispose\n      // the ConnectableObservable's shared connection Subscription if the\n      // connection Subscription exists, *and* either:\n      //   a. RefCountSubscriber doesn't have a reference to the shared connection\n      //      Subscription yet, or,\n      //   b. RefCountSubscriber's connection Subscription reference is identical\n      //      to the shared connection Subscription\n      ///\n\n      const sharedConnection = (source as any)._connection;\n      const conn = connection;\n      connection = null;\n\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\n        sharedConnection.unsubscribe();\n      }\n\n      subscriber.unsubscribe();\n    });\n\n    source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      connection = (source as ConnectableObservable<T>).connect();\n    }\n  });\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          new OperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n * Generate new Observable according to source Observable values\n * ```typescript\n * import { of } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const switched = of(1, 2, 3).pipe(switchMap((x: number) => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // ... and so on\n * ```\n *\n * Restart an interval Observable on every click event\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap((ev) => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * only the values from the most recently projected inner Observable.\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return operate((source, subscriber) => {\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\n    let index = 0;\n    // Whether or not the source subscription has completed\n    let isComplete = false;\n\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\n    // This is called both when the source completes and when the inners complete.\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Cancel the previous inner subscription if there was one\n          innerSubscriber?.unsubscribe();\n          let innerIndex = 0;\n          const outerIndex = index++;\n          // Start the next inner subscription\n          innerFrom(project(value, outerIndex)).subscribe(\n            (innerSubscriber = new OperatorSubscriber(\n              subscriber,\n              // When we get a new inner value, next it through. Note that this is\n              // handling the deprecate result selector here. This is because with this architecture\n              // it ends up being smaller than using the map operator.\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\n              () => {\n                // The inner has completed. Null out the inner subcriber to\n                // free up memory and to signal that we have no inner subscription\n                // currently.\n                innerSubscriber = null!;\n                checkComplete();\n              }\n            ))\n          );\n        },\n        () => {\n          isComplete = true;\n          checkComplete();\n        }\n      )\n    );\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A basic scan operation. This is used for `scan` and `reduce`.\n * @param accumulator The accumulator to use\n * @param seed The seed value for the state to accumulate\n * @param hasSeed Whether or not a seed was provided\n * @param emitOnNext Whether or not to emit the state on next\n * @param emitBeforeComplete Whether or not to emit the before completion\n */\n\nexport function scanInternals<V, A, S>(\n  accumulator: (acc: V | A | S, value: V, index: number) => A,\n  seed: S,\n  hasSeed: boolean,\n  emitOnNext: boolean,\n  emitBeforeComplete?: undefined | true\n) {\n  return (source: Observable<V>, subscriber: Subscriber<any>) => {\n    // Whether or not we have state yet. This will only be\n    // false before the first value arrives if we didn't get\n    // a seed value.\n    let hasState = hasSeed;\n    // The state that we're tracking, starting with the seed,\n    // if there is one, and then updated by the return value\n    // from the accumulator on each emission.\n    let state: any = seed;\n    // An index to pass to the accumulator function.\n    let index = 0;\n\n    // Subscribe to our source. All errors and completions are passed through.\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Always increment the index.\n          const i = index++;\n          // Set the state\n          state = hasState\n            ? // We already have state, so we can get the new state from the accumulator\n              accumulator(state, value, i)\n            : // We didn't have state yet, a seed value was not provided, so\n\n              // we set the state to the first value, and mark that we have state now\n              ((hasState = true), value);\n\n          // Maybe send it to the consumer.\n          emitOnNext && subscriber.next(state);\n        },\n        // If an onComplete was given, call it, otherwise\n        // just pass through the complete notification to the consumer.\n        emitBeforeComplete &&\n          (() => {\n            hasState && subscriber.next(state);\n            subscriber.complete();\n          })\n      )\n    );\n  };\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { scanInternals } from './scanInternals';\n\nexport function scan<V, A = V>(accumulator: (acc: A | V, value: V, index: number) => A): OperatorFunction<V, V | A>;\nexport function scan<V, A>(accumulator: (acc: A, value: V, index: number) => A, seed: A): OperatorFunction<V, A>;\nexport function scan<V, A, S>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): OperatorFunction<V, A>;\n\n// TODO: link to a \"redux pattern\" section in the guide (location TBD)\n\n/**\n * Useful for encapsulating and managing state. Applies an accumulator (or \"reducer function\")\n * to each value from the source after an initial state is established -- either via\n * a `seed` value (second argument), or from the first value from the source.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation state after each update</span>\n *\n * ![](scan.png)\n *\n * This operator maintains an internal state and emits it after processing each value as follows:\n *\n * 1. First value arrives\n *   - If a `seed` value was supplied (as the second argument to `scan`), let `state = seed` and `value = firstValue`.\n *   - If NO `seed` value was supplied (no second argument), let `state = firstValue` and go to 3.\n * 2. Let `state = accumulator(state, value)`.\n *   - If an error is thrown by `accumulator`, notify the consumer of an error. The process ends.\n * 3. Emit `state`.\n * 4. Next value arrives, let `value = nextValue`, go to 2.\n *\n * ## Example\n *\n * An average of previous numbers. This example shows how\n * not providing a `seed` can prime the stream with the\n * first value from the source.\n *\n * ```ts\n * import { interval, of } from 'rxjs';\n * import { scan, map } from 'rxjs/operators';\n *\n * const numbers$ = of(1, 2, 3);\n *\n * numbers$\n *   .pipe(\n *     // Get the sum of the numbers coming in.\n *     scan((total, n) => total + n),\n *     // Get the average by dividing the sum by the total number\n *     // received so var (which is 1 more than the zero-based index).\n *     map((sum, index) => sum / (index + 1))\n *   )\n *   .subscribe(console.log);\n * ```\n *\n * ## Example\n *\n * The Fibonacci sequence. This example shows how you can use\n * a seed to prime accumulation process. Also... you know... Fibinacci.\n * So important to like, computers and stuff that its whiteboarded\n * in job interviews. Now you can show them the Rx version! (Please don't, haha)\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { scan, map, startWith } from 'rxjs/operators';\n *\n * const firstTwoFibs = [0, 1];\n * // An endless stream of Fibonnaci numbers.\n * const fibonnaci$ = interval(1000).pipe(\n *   // Scan to get the fibonnaci numbers (after 0, 1)\n *   scan(([a, b]) => [b, a + b], firstTwoFibs),\n *   // Get the second number in the tuple, it's the one you calculated\n *   map(([, n]) => n),\n *   // Start with our first two digits :)\n *   startWith(...firstTwoFibs)\n * );\n *\n * fibonnaci$.subscribe(console.log);\n * ```\n *\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n * @see {@link switchScan}\n *\n * @param accumulator A \"reducer function\". This will be called for each value after an initial state is\n * acquired.\n * @param seed The initial state. If this is not provided, the first value from the source will\n * be used as the initial state, and emitted without going through the accumulator. All subsequent values\n * will be processed by the accumulator function. If this is provided, all values will go through\n * the accumulator function.\n * @return A function that returns an Observable of the accumulated values.\n */\nexport function scan<V, A, S>(accumulator: (acc: V | A | S, value: V, index: number) => A, seed?: S): OperatorFunction<V, V | A> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  return operate(scanInternals(accumulator, seed as S, arguments.length >= 2, true));\n}\n","import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { filter } from 'rxjs/operators';\n *\n * const div = document.createElement('div');\n * div.style.cssText = `width: 200px;height: 200px;background: #09c;`;\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      new OperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n","import { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { Subscription } from '../Subscription';\nimport { innerFrom } from '../observable/innerFrom';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <span class=\"informal\">\n * It only listens to the error channel and ignores notifications.\n * Handles errors from the source observable, and maps them to a new observable.\n * The error may also be rethrown, or a new error can be thrown to emit an error from the result.\n * </span>\n *\n * ![](catch.png)\n *\n * This operator handles errors, but forwards along all other events to the resulting observable.\n * If the source observable terminates with an error, it will map that error to a new observable,\n * subscribe to it, and forward all of its events to the resulting observable.\n *\n * ## Examples\n * Continues with a different Observable when there's an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n * \t       throw 'four!';\n *       }\n *\t     return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V')),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retries the caught source Observable again in case of error, similar to retry() operator\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError, take } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n *   \t     throw 'four!';\n *       }\n * \t     return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throws a new error when the source Observable throws an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     }),\n *   )\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n * @see {@link onErrorResumeNext}\n * @see {@link repeat}\n * @see {@link repeatWhen}\n * @see {@link retry }\n * @see {@link retryWhen}\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n * is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n * is returned by the `selector` will be used to continue the observable chain.\n * @return A function that returns an Observable that originates from either\n * the source or the Observable returned by the `selector` function.\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let innerSub: Subscription | null = null;\n    let syncUnsub = false;\n    let handledResult: Observable<ObservedValueOf<O>>;\n\n    innerSub = source.subscribe(\n      new OperatorSubscriber(subscriber, undefined, undefined, (err) => {\n        handledResult = innerFrom(selector(err, catchError(selector)(source)));\n        if (innerSub) {\n          innerSub.unsubscribe();\n          innerSub = null;\n          handledResult.subscribe(subscriber);\n        } else {\n          // We don't have an innerSub yet, that means the error was synchronous\n          // because the subscribe call hasn't returned yet.\n          syncUnsub = true;\n        }\n      })\n    );\n\n    if (syncUnsub) {\n      // We have a synchronous error, we need to make sure to\n      // teardown right away. This ensures that `finalize` is called\n      // at the right time, and that teardown occurs at the expected\n      // time between the source error and the subscription to the\n      // next observable.\n      innerSub.unsubscribe();\n      innerSub = null;\n      handledResult!.subscribe(subscriber);\n    }\n  });\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { concatMap, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * values from each projected inner Observable sequentially.\n */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n","import { EMPTY } from '../observable/empty';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Waits for the source to complete, then emits the last N values from the source,\n * as specified by the `count` argument.\n *\n * ![](takeLast.png)\n *\n * `takeLast` results in an observable that will hold values up to `count` values in memory,\n * until the source completes. It then pushes all values in memory to the consumer, in the\n * order they were received from the source, then notifies the consumer that it is\n * complete.\n *\n * If for some reason the source completes before the `count` supplied to `takeLast` is reached,\n * all values received until that point are emitted, and then completion is notified.\n *\n * **Warning**: Using `takeLast` with an observable that never completes will result\n * in an observable that never emits a value.\n *\n * ## Example\n *\n * Take the last 3 values of an Observable with many values\n *\n * ```ts\n * import { range } from 'rxjs';\n * import { takeLast } from 'rxjs/operators';\n *\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return A function that returns an Observable that emits at most the last\n * `count` values emitted by the source Observable.\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? () => EMPTY\n    : operate((source, subscriber) => {\n        // This buffer will hold the values we are going to emit\n        // when the source completes. Since we only want to take the\n        // last N values, we can't emit until we're sure we're not getting\n        // any more values.\n        let buffer: T[] = [];\n        source.subscribe(\n          new OperatorSubscriber(\n            subscriber,\n            (value) => {\n              // Add the most recent value onto the end of our buffer.\n              buffer.push(value);\n              // If our buffer is now larger than the number of values we\n              // want to take, we remove the oldest value from the buffer.\n              count < buffer.length && buffer.shift();\n            },\n            () => {\n              // The source completed, we now know what are last values\n              // are, emit them in the order they were received.\n              for (const value of buffer) {\n                subscriber.next(value);\n              }\n              subscriber.complete();\n            },\n            // Errors are passed through to the consumer\n            undefined,\n            () => {\n              // During teardown release the values in our buffer.\n              buffer = null!;\n            }\n          )\n        );\n      });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n * ```ts\n * import { fromEvent, timer } from 'rxjs';\n * import { throwIfEmpty, takeUntil } from 'rxjs/operators';\n *\n * const click$ = fromEvent(document, 'click');\n *\n * click$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the document was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); }\n * });\n * ```\n *\n * @param errorFactory A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n * @return A function that returns an Observable that throws an error if the\n * source Observable completed without emitting.\n */\nexport function throwIfEmpty<T>(errorFactory: () => any = defaultErrorFactory): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\n      )\n    );\n  });\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * ![](defaultIfEmpty.png)\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * ## Example\n * If no clicks happen in 5 seconds, then emit \"no clicks\"\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { defaultIfEmpty, takeUntil } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param defaultValue The default value used if the source\n * Observable is empty.\n * @return A function that returns an Observable that emits either the\n * specified `defaultValue` if the source Observable emits no items, or the\n * values emitted by the source Observable.\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R): OperatorFunction<T, T | R> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => {\n          if (!hasValue) {\n            subscriber.next(defaultValue!);\n          }\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\n\nexport function first<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport function first<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function first<T, D>(predicate: BooleanConstructor, defaultValue: D): OperatorFunction<T, TruthyTypesOf<T> | D>;\nexport function first<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function first<T, S extends T, D>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue: D\n): OperatorFunction<T, S | D>;\nexport function first<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * ![](first.png)\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. Throws an error if\n * `defaultValue` was not provided and a matching element is not found.\n *\n * ## Examples\n * Emit only the first click that happens on the DOM\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { first } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Emits the first click that happens on a DIV\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { first } from 'rxjs/operators';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first(ev => ev.target.tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * This is how `first()` is different from {@link take}(1) which completes instead.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return A function that returns an Observable that emits the first item that\n * matches the condition.\n */\nexport function first<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) =>\n    source.pipe(\n      predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n      take(1),\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\n    );\n}\n","import { MonoTypeOperatorFunction, Observer } from '../types';\nimport { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\n\nexport interface TapObserver<T> extends Observer<T> {\n  subscribe: () => void;\n  unsubscribe: () => void;\n  finalize: () => void;\n}\n\nexport function tap<T>(observer?: Partial<TapObserver<T>>): MonoTypeOperatorFunction<T>;\nexport function tap<T>(next: (value: T) => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\nexport function tap<T>(\n  next?: ((value: T) => void) | null,\n  error?: ((error: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Used to perform side-effects for notifications from the source observable\n *\n * <span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span>\n *\n * ![](tap.png)\n *\n * Tap is designed to allow the developer a designated place to perform side effects. While you _could_ perform side-effects\n * inside of a `map` or a `mergeMap`, that would make their mapping functions impure, which isn't always a big deal, but will\n * make it so you can't do things like memoize those functions. The `tap` operator is designed solely for such side-effects to\n * help you remove side-effects from other operations.\n *\n * For any notification, next, error, or complete, `tap` will call the appropriate callback you have provided to it, via a function\n * reference, or a partial observer, then pass that notification down the stream.\n *\n * The observable returned by `tap` is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\n * provided to `tap` will be emitted as an error from the returned observable.\n *\n * > Be careful! You can mutate objects as they pass through the `tap` operator's handlers.\n *\n * The most common use of `tap` is actually for debugging. You can place a `tap(console.log)` anywhere\n * in your observable `pipe`, log out the notifications as they are emitted by the source returned by the previous\n * operation.\n *\n * ## Example\n * Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\n * and emit \"big\" or \"small\" depending on the size of that number. But we wanted to log what the original number\n * was, so we have added a `tap(console.log)`.\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { tap, map } from 'rxjs/operators';\n *\n * of(Math.random()).pipe(\n *   tap(console.log),\n *   map(n => n > 0.5 ? 'big' : 'small')\n * ).subscribe(console.log);\n * ```\n *\n * ## Example\n * Using `tap` to analyze a value and force an error. Below is an observable where in our system we only\n * want to emit numbers 3 or less we get from another source. We can force our observable to error\n * using `tap`.\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { tap } from 'rxjs/operators';\n *\n * const source = of(1, 2, 3, 4, 5)\n *\n * source.pipe(\n *  tap(n => {\n *    if (n > 3) {\n *      throw new TypeError(`Value ${n} is greater than 3`)\n *    }\n *  })\n * )\n * .subscribe(console.log);\n * ```\n *\n * ## Example\n * We want to know when an observable completes before moving on to the next observable. The system\n * below will emit a random series of `\"X\"` characters from 3 different observables in sequence. The\n * only way we know when one observable completes and moves to the next one, in this case, is because\n * we have added a `tap` with the side-effect of logging to console.\n *\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { tap, map, concatMap, take } from 'rxjs/operators';\n *\n *\n * of(1, 2, 3).pipe(\n *  concatMap(n => interval(1000).pipe(\n *    take(Math.round(Math.random() * 10)),\n *    map(() => 'X'),\n *    tap({\n *      complete: () => console.log(`Done with ${n}`)\n *    })\n *  ))\n * )\n * .subscribe(console.log);\n * ```\n *\n * @see {@link finalize}\n * @see {@link Observable#subscribe}\n *\n * @param observerOrNext A next handler or partial observer\n * @param error An error handler\n * @param complete A completion handler\n * @return A function that returns an Observable identical to the source, but\n * runs the specified Observer or callback(s) for each item.\n */\nexport function tap<T>(\n  observerOrNext?: Partial<TapObserver<T>> | ((value: T) => void) | null,\n  error?: ((e: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T> {\n  // We have to check to see not only if next is a function,\n  // but if error or complete were passed. This is because someone\n  // could technically call tap like `tap(null, fn)` or `tap(null, null, fn)`.\n  const tapObserver =\n    isFunction(observerOrNext) || error || complete\n      ? // tslint:disable-next-line: no-object-literal-type-assertion\n        ({ next: observerOrNext as Exclude<typeof observerOrNext, Partial<TapObserver<T>>>, error, complete } as Partial<TapObserver<T>>)\n      : observerOrNext;\n\n  return tapObserver\n    ? operate((source, subscriber) => {\n        tapObserver.subscribe?.();\n        let isUnsub = true;\n        source.subscribe(\n          new OperatorSubscriber(\n            subscriber,\n            (value) => {\n              tapObserver.next?.(value);\n              subscriber.next(value);\n            },\n            () => {\n              isUnsub = false;\n              tapObserver.complete?.();\n              subscriber.complete();\n            },\n            (err) => {\n              isUnsub = false;\n              tapObserver.error?.(err);\n              subscriber.error(err);\n            },\n            () => {\n              if (isUnsub) {\n                tapObserver.unsubscribe?.();\n              }\n              tapObserver.finalize?.();\n            }\n          )\n        );\n      })\n    : // Tap was called with no valid tap observer or handler\n      // (e.g. `tap(null, null, null)` or `tap(null)` or `tap()`)\n      // so we're going to just mirror the source.\n      identity;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\n\n/**\n * Identifies the call or event that triggered a navigation.\n *\n * * 'imperative': Triggered by `router.navigateByUrl()` or `router.navigate()`.\n * * 'popstate' : Triggered by a `popstate` event.\n * * 'hashchange'-: Triggered by a `hashchange` event.\n *\n * @publicApi\n */\nexport type NavigationTrigger = 'imperative'|'popstate'|'hashchange';\n\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * The following code shows how a class subscribes to router events.\n *\n * ```ts\n * import {Event, RouterEvent, Router} from '@angular/router';\n *\n * class MyService {\n *   constructor(public router: Router) {\n *     router.events.pipe(\n *        filter((e: Event): e is RouterEvent => e instanceof RouterEvent)\n *     ).subscribe((e: RouterEvent) => {\n *       // Do something\n *     });\n *   }\n * }\n * ```\n *\n * @see `Event`\n * @see [Router events summary](guide/router-reference#router-events)\n * @publicApi\n */\nexport class RouterEvent {\n  constructor(\n      /** A unique ID that the router assigns to every router navigation. */\n      public id: number,\n      /** The URL that is the destination for this navigation. */\n      public url: string) {}\n}\n\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nexport class NavigationStart extends RouterEvent {\n  /**\n   * Identifies the call or event that triggered the navigation.\n   * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n   *\n   * @see `NavigationEnd`\n   * @see `NavigationCancel`\n   * @see `NavigationError`\n   */\n  navigationTrigger?: 'imperative'|'popstate'|'hashchange';\n\n  /**\n   * The navigation state that was previously supplied to the `pushState` call,\n   * when the navigation is triggered by a `popstate` event. Otherwise null.\n   *\n   * The state object is defined by `NavigationExtras`, and contains any\n   * developer-defined state value, as well as a unique ID that\n   * the router assigns to every router transition/navigation.\n   *\n   * From the perspective of the router, the router never \"goes back\".\n   * When the user clicks on the back button in the browser,\n   * a new navigation ID is created.\n   *\n   * Use the ID in this previous-state object to differentiate between a newly created\n   * state and one returned to by a `popstate` event, so that you can restore some\n   * remembered state, such as scroll position.\n   *\n   */\n  restoredState?: {[k: string]: any, navigationId: number}|null;\n\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      navigationTrigger: 'imperative'|'popstate'|'hashchange' = 'imperative',\n      /** @docsNotRequired */\n      restoredState: {[k: string]: any, navigationId: number}|null = null) {\n    super(id, url);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @see `NavigationStart`\n * @see `NavigationCancel`\n * @see `NavigationError`\n *\n * @publicApi\n */\nexport class NavigationEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n * This can happen for several reasons including when a route guard\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @see `NavigationStart`\n * @see `NavigationEnd`\n * @see `NavigationError`\n *\n * @publicApi\n */\nexport class NavigationCancel extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public reason: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @see `NavigationStart`\n * @see `NavigationEnd`\n * @see `NavigationCancel`\n *\n * @publicApi\n */\nexport class NavigationError extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public error: any) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\n/**\n * An event triggered when routes are recognized.\n *\n * @publicApi\n */\nexport class RoutesRecognized extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  override toString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @see `GuardsCheckEnd`\n *\n * @publicApi\n */\nexport class GuardsCheckStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @see `GuardsCheckStart`\n *\n * @publicApi\n */\nexport class GuardsCheckEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot,\n      /** @docsNotRequired */\n      public shouldActivate: boolean) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n\n/**\n * An event triggered at the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @see `ResolveEnd`\n *\n * @publicApi\n */\nexport class ResolveStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see `ResolveStart`.\n *\n * @publicApi\n */\nexport class ResolveEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  override toString(): string {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @see `RouteConfigLoadEnd`\n *\n * @publicApi\n */\nexport class RouteConfigLoadStart {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string {\n    return `RouteConfigLoadStart(path: ${this.route.path})`;\n  }\n}\n\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @see `RouteConfigLoadStart`\n *\n * @publicApi\n */\nexport class RouteConfigLoadEnd {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string {\n    return `RouteConfigLoadEnd(path: ${this.route.path})`;\n  }\n}\n\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see  `ChildActivationEnd`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nexport class ChildActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see `ChildActivationStart`\n * @see `ResolveStart`\n * @publicApi\n */\nexport class ChildActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see `ActivationEnd`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nexport class ActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see `ActivationStart`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nexport class ActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nexport class Scroll {\n  constructor(\n      /** @docsNotRequired */\n      readonly routerEvent: NavigationEnd,\n\n      /** @docsNotRequired */\n      readonly position: [number, number]|null,\n\n      /** @docsNotRequired */\n      readonly anchor: string|null) {}\n\n  toString(): string {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\n\n/**\n * Router events that allow you to track the lifecycle of the router.\n *\n * The events occur in the following sequence:\n *\n * * [NavigationStart](api/router/NavigationStart): Navigation starts.\n * * [RouteConfigLoadStart](api/router/RouteConfigLoadStart): Before\n * the router [lazy loads](/guide/router#lazy-loading) a route configuration.\n * * [RouteConfigLoadEnd](api/router/RouteConfigLoadEnd): After a route has been lazy loaded.\n * * [RoutesRecognized](api/router/RoutesRecognized): When the router parses the URL\n * and the routes are recognized.\n * * [GuardsCheckStart](api/router/GuardsCheckStart): When the router begins the *guards*\n * phase of routing.\n * * [ChildActivationStart](api/router/ChildActivationStart): When the router\n * begins activating a route's children.\n * * [ActivationStart](api/router/ActivationStart): When the router begins activating a route.\n * * [GuardsCheckEnd](api/router/GuardsCheckEnd): When the router finishes the *guards*\n * phase of routing successfully.\n * * [ResolveStart](api/router/ResolveStart): When the router begins the *resolve*\n * phase of routing.\n * * [ResolveEnd](api/router/ResolveEnd): When the router finishes the *resolve*\n * phase of routing successfully.\n * * [ChildActivationEnd](api/router/ChildActivationEnd): When the router finishes\n * activating a route's children.\n * * [ActivationEnd](api/router/ActivationEnd): When the router finishes activating a route.\n * * [NavigationEnd](api/router/NavigationEnd): When navigation ends successfully.\n * * [NavigationCancel](api/router/NavigationCancel): When navigation is canceled.\n * * [NavigationError](api/router/NavigationError): When navigation fails\n * due to an unexpected error.\n * * [Scroll](api/router/Scroll): When the user scrolls.\n *\n * @publicApi\n */\nexport type Event = RouterEvent|RouteConfigLoadStart|RouteConfigLoadEnd|ChildActivationStart|\n    ChildActivationEnd|ActivationStart|ActivationEnd|Scroll;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route, UrlMatchResult} from './config';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * The primary routing outlet.\n *\n * @publicApi\n */\nexport const PRIMARY_OUTLET = 'primary';\n\n/**\n * A collection of matrix and query URL parameters.\n * @see `convertToParamMap()`\n * @see `ParamMap`\n *\n * @publicApi\n */\nexport type Params = {\n  [key: string]: any;\n};\n\n/**\n * A map that provides access to the required and optional parameters\n * specific to a route.\n * The map supports retrieving a single value with `get()`\n * or multiple values with `getAll()`.\n *\n * @see [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n *\n * @publicApi\n */\nexport interface ParamMap {\n  /**\n   * Reports whether the map contains a given parameter.\n   * @param name The parameter name.\n   * @returns True if the map contains the given parameter, false otherwise.\n   */\n  has(name: string): boolean;\n  /**\n   * Retrieves a single value for a parameter.\n   * @param name The parameter name.\n   * @return The parameter's single value,\n   * or the first value if the parameter has multiple values,\n   * or `null` when there is no such parameter.\n   */\n  get(name: string): string|null;\n  /**\n   * Retrieves multiple values for a parameter.\n   * @param name The parameter name.\n   * @return An array containing one or more values,\n   * or an empty array if there is no such parameter.\n   *\n   */\n  getAll(name: string): string[];\n\n  /** Names of the parameters in the map. */\n  readonly keys: string[];\n}\n\nclass ParamsAsMap implements ParamMap {\n  private params: Params;\n\n  constructor(params: Params) {\n    this.params = params || {};\n  }\n\n  has(name: string): boolean {\n    return Object.prototype.hasOwnProperty.call(this.params, name);\n  }\n\n  get(name: string): string|null {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v[0] : v;\n    }\n\n    return null;\n  }\n\n  getAll(name: string): string[] {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v : [v];\n    }\n\n    return [];\n  }\n\n  get keys(): string[] {\n    return Object.keys(this.params);\n  }\n}\n\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * @param params The instance to convert.\n * @returns The new map instance.\n *\n * @publicApi\n */\nexport function convertToParamMap(params: Params): ParamMap {\n  return new ParamsAsMap(params);\n}\n\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n\nexport function navigationCancelingError(message: string) {\n  const error = Error('NavigationCancelingError: ' + message);\n  (error as any)[NAVIGATION_CANCELING_ERROR] = true;\n  return error;\n}\n\nexport function isNavigationCancelingError(error: Error) {\n  return error && (error as any)[NAVIGATION_CANCELING_ERROR];\n}\n\n// Matches the route configuration (`route`) against the actual URL (`segments`).\nexport function defaultUrlMatcher(\n    segments: UrlSegment[], segmentGroup: UrlSegmentGroup, route: Route): UrlMatchResult|null {\n  const parts = route.path!.split('/');\n\n  if (parts.length > segments.length) {\n    // The actual URL is shorter than the config, no match\n    return null;\n  }\n\n  if (route.pathMatch === 'full' &&\n      (segmentGroup.hasChildren() || parts.length < segments.length)) {\n    // The config is longer than the actual URL but we are looking for a full match, return null\n    return null;\n  }\n\n  const posParams: {[key: string]: UrlSegment} = {};\n\n  // Check each config part against the actual URL\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const segment = segments[index];\n    const isParameter = part.startsWith(':');\n    if (isParameter) {\n      posParams[part.substring(1)] = segment;\n    } else if (part !== segment.path) {\n      // The actual URL part does not match the config, no match\n      return null;\n    }\n  }\n\n  return {consumed: segments.slice(0, parts.length), posParams};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵisObservable as isObservable, ɵisPromise as isPromise} from '@angular/core';\nimport {from, Observable, of} from 'rxjs';\n\nimport {Params} from '../shared';\n\nexport function shallowEqualArrays(a: any[], b: any[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\n\nexport function shallowEqual(a: Params, b: Params): boolean {\n  // While `undefined` should never be possible, it would sometimes be the case in IE 11\n  // and pre-chromium Edge. The check below accounts for this edge case.\n  const k1 = a ? Object.keys(a) : undefined;\n  const k2 = b ? Object.keys(b) : undefined;\n  if (!k1 || !k2 || k1.length != k2.length) {\n    return false;\n  }\n  let key: string;\n  for (let i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (!equalArraysOrString(a[key], b[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Test equality for arrays of strings or a string.\n */\nexport function equalArraysOrString(a: string|string[], b: string|string[]) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    const aSorted = [...a].sort();\n    const bSorted = [...b].sort();\n    return aSorted.every((val, index) => bSorted[index] === val);\n  } else {\n    return a === b;\n  }\n}\n\n/**\n * Flattens single-level nested arrays.\n */\nexport function flatten<T>(arr: T[][]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\n/**\n * Return the last element of an array.\n */\nexport function last<T>(a: T[]): T|null {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\n\n/**\n * Verifys all booleans in an array are `true`.\n */\nexport function and(bools: boolean[]): boolean {\n  return !bools.some(v => !v);\n}\n\nexport function forEach<K, V>(map: {[key: string]: V}, callback: (v: V, k: string) => void): void {\n  for (const prop in map) {\n    if (map.hasOwnProperty(prop)) {\n      callback(map[prop], prop);\n    }\n  }\n}\n\nexport function wrapIntoObservable<T>(value: T|Promise<T>|Observable<T>): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n    // change detection.\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {convertToParamMap, ParamMap, Params, PRIMARY_OUTLET} from './shared';\nimport {equalArraysOrString, forEach, shallowEqual} from './utils/collection';\n\nexport function createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n\n/**\n * A set of options which specify how to determine if a `UrlTree` is active, given the `UrlTree`\n * for the current router state.\n *\n * @publicApi\n * @see Router.isActive\n */\nexport interface IsActiveMatchOptions {\n  /**\n   * Defines the strategy for comparing the matrix parameters of two `UrlTree`s.\n   *\n   * The matrix parameter matching is dependent on the strategy for matching the\n   * segments. That is, if the `paths` option is set to `'subset'`, only\n   * the matrix parameters of the matching segments will be compared.\n   *\n   * - `'exact'`: Requires that matching segments also have exact matrix parameter\n   * matches.\n   * - `'subset'`: The matching segments in the router's active `UrlTree` may contain\n   * extra matrix parameters, but those that exist in the `UrlTree` in question must match.\n   * - `'ignored'`: When comparing `UrlTree`s, matrix params will be ignored.\n   */\n  matrixParams: 'exact'|'subset'|'ignored';\n  /**\n   * Defines the strategy for comparing the query parameters of two `UrlTree`s.\n   *\n   * - `'exact'`: the query parameters must match exactly.\n   * - `'subset'`: the active `UrlTree` may contain extra parameters,\n   * but must match the key and value of any that exist in the `UrlTree` in question.\n   * - `'ignored'`: When comparing `UrlTree`s, query params will be ignored.\n   */\n  queryParams: 'exact'|'subset'|'ignored';\n  /**\n   * Defines the strategy for comparing the `UrlSegment`s of the `UrlTree`s.\n   *\n   * - `'exact'`: all segments in each `UrlTree` must match.\n   * - `'subset'`: a `UrlTree` will be determined to be active if it\n   * is a subtree of the active route. That is, the active route may contain extra\n   * segments, but must at least have all the segements of the `UrlTree` in question.\n   */\n  paths: 'exact'|'subset';\n  /**\n   * - `'exact'`: indicates that the `UrlTree` fragments must be equal.\n   * - `'ignored'`: the fragments will not be compared when determining if a\n   * `UrlTree` is active.\n   */\n  fragment: 'exact'|'ignored';\n}\n\ntype ParamMatchOptions = 'exact'|'subset'|'ignored';\n\ntype PathCompareFn =\n    (container: UrlSegmentGroup, containee: UrlSegmentGroup, matrixParams: ParamMatchOptions) =>\n        boolean;\ntype ParamCompareFn = (container: Params, containee: Params) => boolean;\n\nconst pathCompareMap: Record<IsActiveMatchOptions['paths'], PathCompareFn> = {\n  'exact': equalSegmentGroups,\n  'subset': containsSegmentGroup,\n};\nconst paramCompareMap: Record<ParamMatchOptions, ParamCompareFn> = {\n  'exact': equalParams,\n  'subset': containsParams,\n  'ignored': () => true,\n};\n\nexport function containsTree(\n    container: UrlTree, containee: UrlTree, options: IsActiveMatchOptions): boolean {\n  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) &&\n      paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) &&\n      !(options.fragment === 'exact' && container.fragment !== containee.fragment);\n}\n\nfunction equalParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return shallowEqual(container, containee);\n}\n\nfunction equalSegmentGroups(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup,\n    matrixParams: ParamMatchOptions): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {\n    return false;\n  }\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams))\n      return false;\n  }\n  return true;\n}\n\nfunction containsParams(container: Params, containee: Params): boolean {\n  return Object.keys(containee).length <= Object.keys(container).length &&\n      Object.keys(containee).every(key => equalArraysOrString(container[key], containee[key]));\n}\n\nfunction containsSegmentGroup(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup,\n    matrixParams: ParamMatchOptions): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);\n}\n\nfunction containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[],\n    matrixParams: ParamMatchOptions): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;\n    return true;\n\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;\n    for (const c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {\n        return false;\n      }\n    }\n    return true;\n\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!matrixParamsMatch(container.segments, current, matrixParams)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(\n        container.children[PRIMARY_OUTLET], containee, next, matrixParams);\n  }\n}\n\nfunction matrixParamsMatch(\n    containerPaths: UrlSegment[], containeePaths: UrlSegment[], options: ParamMatchOptions) {\n  return containeePaths.every((containeeSegment, i) => {\n    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);\n  });\n}\n\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class UrlTree {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap!: ParamMap;\n\n  /** @internal */\n  constructor(\n      /** The root segment group of the URL tree */\n      public root: UrlSegmentGroup,\n      /** The query params of the URL */\n      public queryParams: Params,\n      /** The fragment of the URL */\n      public fragment: string|null) {}\n\n  get queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return DEFAULT_SERIALIZER.serialize(this);\n  }\n}\n\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nexport class UrlSegmentGroup {\n  /** @internal */\n  _sourceSegment?: UrlSegmentGroup;\n  /** @internal */\n  _segmentIndexShift?: number;\n  /** The parent node in the url tree */\n  parent: UrlSegmentGroup|null = null;\n\n  constructor(\n      /** The URL segments of this group. See `UrlSegment` for more information */\n      public segments: UrlSegment[],\n      /** The list of children of this group */\n      public children: {[key: string]: UrlSegmentGroup}) {\n    forEach(children, (v: any, k: any) => v.parent = this);\n  }\n\n  /** Whether the segment has child segments */\n  hasChildren(): boolean {\n    return this.numberOfChildren > 0;\n  }\n\n  /** Number of child segments */\n  get numberOfChildren(): number {\n    return Object.keys(this.children).length;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return serializePaths(this);\n  }\n}\n\n\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class UrlSegment {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _parameterMap!: ParamMap;\n\n  constructor(\n      /** The path part of a URL segment */\n      public path: string,\n\n      /** The matrix parameters associated with a segment */\n      public parameters: {[name: string]: string}) {}\n\n  get parameterMap(): ParamMap {\n    if (!this._parameterMap) {\n      this._parameterMap = convertToParamMap(this.parameters);\n    }\n    return this._parameterMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return serializePath(this);\n  }\n}\n\nexport function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\n\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n  let res: T[] = [];\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n\n\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\nexport abstract class UrlSerializer {\n  /** Parse a url into a `UrlTree` */\n  abstract parse(url: string): UrlTree;\n\n  /** Converts a `UrlTree` into a url */\n  abstract serialize(tree: UrlTree): string;\n}\n\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n  /** Parses a url into a `UrlTree` */\n  parse(url: string): UrlTree {\n    const p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n\n  /** Converts a `UrlTree` into a url */\n  serialize(tree: UrlTree): string {\n    const segment = `/${serializeSegment(tree.root, true)}`;\n    const query = serializeQueryParams(tree.queryParams);\n    const fragment =\n        typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment)}` : '';\n\n    return `${segment}${query}${fragment}`;\n  }\n}\n\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\n\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n\n  if (root) {\n    const primary = segment.children[PRIMARY_OUTLET] ?\n        serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n        '';\n    const children: string[] = [];\n\n    forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n\n  } else {\n    const children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n\n      return [`${k}:${serializeSegment(v, false)}`];\n    });\n\n    // use no parenthesis if the only child is a primary outlet route\n    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {\n      return `${serializePaths(segment)}/${children[0]}`;\n    }\n\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s: string): string {\n  return encodeURIComponent(s)\n      .replace(/%40/g, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/g, '$')\n      .replace(/%2C/gi, ',');\n}\n\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriQuery(s: string): string {\n  return encodeUriString(s).replace(/%3B/gi, ';');\n}\n\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriFragment(s: string): string {\n  return encodeURI(s);\n}\n\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriSegment(s: string): string {\n  return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nexport function decodeQuery(s: string): string {\n  return decode(s.replace(/\\+/g, '%20'));\n}\n\nexport function serializePath(path: UrlSegment): string {\n  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\n\nfunction serializeMatrixParams(params: {[key: string]: string}): string {\n  return Object.keys(params)\n      .map(key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`)\n      .join('');\n}\n\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const strParams: string[] =\n      Object.keys(params)\n          .map((name) => {\n            const value = params[name];\n            return Array.isArray(value) ?\n                value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') :\n                `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n          })\n          .filter(s => !!s);\n\n  return strParams.length ? `?${strParams.join('&')}` : '';\n}\n\nconst SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchSegments(str: string): string {\n  const match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str: string): string {\n  const match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_VALUE_RE = /^[^&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str: string): string {\n  const match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\n\nclass UrlParser {\n  private remaining: string;\n\n  constructor(private url: string) {\n    this.remaining = url;\n  }\n\n  parseRootSegment(): UrlSegmentGroup {\n    this.consumeOptional('/');\n\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n\n  parseQueryParams(): Params {\n    const params: Params = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n\n  parseFragment(): string|null {\n    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n  }\n\n  private parseChildren(): {[outlet: string]: UrlSegmentGroup} {\n    if (this.remaining === '') {\n      return {};\n    }\n\n    this.consumeOptional('/');\n\n    const segments: UrlSegment[] = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n\n    let children: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let res: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n\n    return res;\n  }\n\n  // parse a segment with its matrix parameters\n  // ie `name;k1=v1;k2`\n  private parseSegment(): UrlSegment {\n    const path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n\n  private parseMatrixParams(): {[key: string]: string} {\n    const params: {[key: string]: string} = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n\n  private parseParam(params: {[key: string]: string}): void {\n    const key = matchSegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n\n  // Parse a single query parameter `name[=value]`\n  private parseQueryParam(params: Params): void {\n    const key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const decodedKey = decodeQuery(key);\n    const decodedVal = decodeQuery(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n\n  // parse `(a/b//outlet_name:c/d)`\n  private parseParens(allowPrimary: boolean): {[outlet: string]: UrlSegmentGroup} {\n    const segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const path = matchSegments(this.remaining);\n\n      const next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n\n      let outletName: string = undefined!;\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                                                                  new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n\n    return segments;\n  }\n\n  private peekStartsWith(str: string): boolean {\n    return this.remaining.startsWith(str);\n  }\n\n  // Consumes the prefix when it is present and returns whether it has been consumed\n  private consumeOptional(str: string): boolean {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n\n  private capture(str: string): void {\n    if (!this.consumeOptional(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport class Tree<T> {\n  /** @internal */\n  _root: TreeNode<T>;\n\n  constructor(root: TreeNode<T>) {\n    this._root = root;\n  }\n\n  get root(): T {\n    return this._root.value;\n  }\n\n  /**\n   * @internal\n   */\n  parent(t: T): T|null {\n    const p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n\n  /**\n   * @internal\n   */\n  children(t: T): T[] {\n    const n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n\n  /**\n   * @internal\n   */\n  firstChild(t: T): T|null {\n    const n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n\n  /**\n   * @internal\n   */\n  siblings(t: T): T[] {\n    const p = findPath(t, this._root);\n    if (p.length < 2) return [];\n\n    const c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n\n  /**\n   * @internal\n   */\n  pathFromRoot(t: T): T[] {\n    return findPath(t, this._root).map(s => s.value);\n  }\n}\n\n\n// DFS for the node matching the value\nfunction findNode<T>(value: T, node: TreeNode<T>): TreeNode<T>|null {\n  if (value === node.value) return node;\n\n  for (const child of node.children) {\n    const node = findNode(value, child);\n    if (node) return node;\n  }\n\n  return null;\n}\n\n// Return the path to the node with the given value using DFS\nfunction findPath<T>(value: T, node: TreeNode<T>): TreeNode<T>[] {\n  if (value === node.value) return [node];\n\n  for (const child of node.children) {\n    const path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n\n  return [];\n}\n\nexport class TreeNode<T> {\n  constructor(public value: T, public children: TreeNode<T>[]) {}\n\n  toString(): string {\n    return `TreeNode(${this.value})`;\n  }\n}\n\n// Return the list of T indexed by outlet name\nexport function nodeChildrenAsMap<T extends {outlet: string}>(node: TreeNode<T>|null) {\n  const map: {[outlet: string]: TreeNode<T>} = {};\n\n  if (node) {\n    node.children.forEach(child => map[child.value.outlet] = child);\n  }\n\n  return map;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Data, ResolveData, Route} from './config';\nimport {convertToParamMap, ParamMap, Params, PRIMARY_OUTLET} from './shared';\nimport {equalSegments, UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n\n\n\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * @usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * The following fragment shows how a component gets the root node\n * of the current state to establish its own route tree:\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see `ActivatedRoute`\n * @see [Getting route information](guide/router#getting-route-information)\n *\n * @publicApi\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n  /** @internal */\n  constructor(\n      root: TreeNode<ActivatedRoute>,\n      /** The current snapshot of the router state */\n      public snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterState(<RouterState>this, root);\n  }\n\n  override toString(): string {\n    return this.snapshot.toString();\n  }\n}\n\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>|null): RouterState {\n  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>|null): RouterStateSnapshot {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * The following example shows how to construct a component using information from a\n * currently activated route.\n *\n * Note: the observables in this class only emit when the current and previous values differ based\n * on shallow equality. For example, changing deeply nested properties in resolved `data` will not\n * cause the `ActivatedRoute.data` `Observable` to emit a new value.\n *\n * {@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * @see [Getting route information](guide/router#getting-route-information)\n *\n * @publicApi\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  snapshot!: ActivatedRouteSnapshot;\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  _routerState!: RouterState;\n  /** @internal */\n  _paramMap!: Observable<ParamMap>;\n  /** @internal */\n  _queryParamMap!: Observable<ParamMap>;\n\n  /** @internal */\n  constructor(\n      /** An observable of the URL segments matched by this route. */\n      public url: Observable<UrlSegment[]>,\n      /** An observable of the matrix parameters scoped to this route. */\n      public params: Observable<Params>,\n      /** An observable of the query parameters shared by all the routes. */\n      public queryParams: Observable<Params>,\n      /** An observable of the URL fragment shared by all the routes. */\n      public fragment: Observable<string|null>,\n      /** An observable of the static and resolved data of this route. */\n      public data: Observable<Data>,\n      /** The outlet name of the route, a constant. */\n      public outlet: string,\n      /** The component of the route, a constant. */\n      // TODO(vsavkin): remove |string\n      public component: Type<any>|string|null, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n\n  /** The configuration used to match this route. */\n  get routeConfig(): Route|null {\n    return this._futureSnapshot.routeConfig;\n  }\n\n  /** The root of the router state. */\n  get root(): ActivatedRoute {\n    return this._routerState.root;\n  }\n\n  /** The parent of this route in the router state tree. */\n  get parent(): ActivatedRoute|null {\n    return this._routerState.parent(this);\n  }\n\n  /** The first child of this route in the router state tree. */\n  get firstChild(): ActivatedRoute|null {\n    return this._routerState.firstChild(this);\n  }\n\n  /** The children of this route in the router state tree. */\n  get children(): ActivatedRoute[] {\n    return this._routerState.children(this);\n  }\n\n  /** The path from the root of the router state tree to this route. */\n  get pathFromRoot(): ActivatedRoute[] {\n    return this._routerState.pathFromRoot(this);\n  }\n\n  /**\n   * An Observable that contains a map of the required and optional parameters\n   * specific to the route.\n   * The map supports retrieving single and multiple values from the same parameter.\n   */\n  get paramMap(): Observable<ParamMap> {\n    if (!this._paramMap) {\n      this._paramMap = this.params.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._paramMap;\n  }\n\n  /**\n   * An Observable that contains a map of the query parameters available to all routes.\n   * The map supports retrieving single and multiple values from the query parameter.\n   */\n  get queryParamMap(): Observable<ParamMap> {\n    if (!this._queryParamMap) {\n      this._queryParamMap =\n          this.queryParams.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nexport type ParamsInheritanceStrategy = 'emptyOnly'|'always';\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * @internal\n */\nexport function inheritedParamsDataResolve(\n    route: ActivatedRouteSnapshot,\n    paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly'): Inherited {\n  const pathFromRoot = route.pathFromRoot;\n\n  let inheritingStartingFrom = 0;\n  if (paramsInheritanceStrategy !== 'always') {\n    inheritingStartingFrom = pathFromRoot.length - 1;\n\n    while (inheritingStartingFrom >= 1) {\n      const current = pathFromRoot[inheritingStartingFrom];\n      const parent = pathFromRoot[inheritingStartingFrom - 1];\n      // current route is an empty path => inherits its parent's params and data\n      if (current.routeConfig && current.routeConfig.path === '') {\n        inheritingStartingFrom--;\n\n        // parent is componentless => current route should inherit its params and data\n      } else if (!parent.component) {\n        inheritingStartingFrom--;\n\n      } else {\n        break;\n      }\n    }\n  }\n\n  return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n\n/** @internal */\nfunction flattenInherited(pathFromRoot: ActivatedRouteSnapshot[]): Inherited {\n  return pathFromRoot.reduce((res, curr) => {\n    const params = {...res.params, ...curr.params};\n    const data = {...res.data, ...curr.data};\n    const resolve = {...res.resolve, ...curr._resolvedData};\n    return {params, data, resolve};\n  }, <any>{params: {}, data: {}, resolve: {}});\n}\n\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * The following example initializes a component with route information extracted\n * from the snapshot of the root node at the time of creation.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class ActivatedRouteSnapshot {\n  /** The configuration used to match this route **/\n  public readonly routeConfig: Route|null;\n  /** @internal **/\n  _urlSegment: UrlSegmentGroup;\n  /** @internal */\n  _lastPathIndex: number;\n  /** @internal */\n  _resolve: ResolveData;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _resolvedData!: Data;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _routerState!: RouterStateSnapshot;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _paramMap!: ParamMap;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap!: ParamMap;\n\n  /** @internal */\n  constructor(\n      /** The URL segments matched by this route */\n      public url: UrlSegment[],\n      /**\n       *  The matrix parameters scoped to this route.\n       *\n       *  You can compute all params (or data) in the router state or to get params outside\n       *  of an activated component by traversing the `RouterState` tree as in the following\n       *  example:\n       *  ```\n       *  collectRouteParams(router: Router) {\n       *    let params = {};\n       *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];\n       *    while (stack.length > 0) {\n       *      const route = stack.pop()!;\n       *      params = {...params, ...route.params};\n       *      stack.push(...route.children);\n       *    }\n       *    return params;\n       *  }\n       *  ```\n       */\n      public params: Params,\n      /** The query parameters shared by all the routes */\n      public queryParams: Params,\n      /** The URL fragment shared by all the routes */\n      public fragment: string|null,\n      /** The static and resolved data of this route */\n      public data: Data,\n      /** The outlet name of the route */\n      public outlet: string,\n      /** The component of the route */\n      public component: Type<any>|string|null, routeConfig: Route|null, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this.routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n\n  /** The root of the router state */\n  get root(): ActivatedRouteSnapshot {\n    return this._routerState.root;\n  }\n\n  /** The parent of this route in the router state tree */\n  get parent(): ActivatedRouteSnapshot|null {\n    return this._routerState.parent(this);\n  }\n\n  /** The first child of this route in the router state tree */\n  get firstChild(): ActivatedRouteSnapshot|null {\n    return this._routerState.firstChild(this);\n  }\n\n  /** The children of this route in the router state tree */\n  get children(): ActivatedRouteSnapshot[] {\n    return this._routerState.children(this);\n  }\n\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot(): ActivatedRouteSnapshot[] {\n    return this._routerState.pathFromRoot(this);\n  }\n\n  get paramMap(): ParamMap {\n    if (!this._paramMap) {\n      this._paramMap = convertToParamMap(this.params);\n    }\n    return this._paramMap;\n  }\n\n  get queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    const url = this.url.map(segment => segment.toString()).join('/');\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * The following example shows how a component is initialized with information\n * from the snapshot of the root node's state at the time of creation.\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  /** @internal */\n  constructor(\n      /** The url from which this snapshot was created */\n      public url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterState(<RouterStateSnapshot>this, root);\n  }\n\n  override toString(): string {\n    return serializeNode(this._root);\n  }\n}\n\nfunction setRouterState<U, T extends {_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\n\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const currentSnapshot = route.snapshot;\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      (<any>route.queryParams).next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      (<any>route.fragment).next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      (<any>route.params).next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      (<any>route.url).next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      (<any>route.data).next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    (<any>route.data).next(route._futureSnapshot.data);\n  }\n}\n\n\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent!));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BehaviorSubject} from 'rxjs';\n\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\nexport function createRouterState(\n    routeReuseStrategy: RouteReuseStrategy, curr: RouterStateSnapshot,\n    prevState: RouterState): RouterState {\n  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n\nfunction createNode(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState?: TreeNode<ActivatedRoute>): TreeNode<ActivatedRoute> {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode<ActivatedRoute>(value, children);\n  } else {\n    if (routeReuseStrategy.shouldAttach(curr.value)) {\n      // retrieve an activated route that is used to be displayed, but is not currently displayed\n      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);\n      if (detachedRouteHandle !== null) {\n        const tree = (detachedRouteHandle as DetachedRouteHandleInternal).route;\n        tree.value._futureSnapshot = curr.value;\n        tree.children = curr.children.map(c => createNode(routeReuseStrategy, c));\n        return tree;\n      }\n    }\n\n    const value = createActivatedRoute(curr.value);\n    const children = curr.children.map(c => createNode(routeReuseStrategy, c));\n    return new TreeNode<ActivatedRoute>(value, children);\n  }\n}\n\nfunction createOrReuseChildren(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState: TreeNode<ActivatedRoute>) {\n  return curr.children.map(child => {\n    for (const p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\n\nfunction createActivatedRoute(c: ActivatedRouteSnapshot) {\n  return new ActivatedRoute(\n      new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams),\n      new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActivatedRoute} from './router_state';\nimport {Params, PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {forEach, last, shallowEqual} from './utils/collection';\n\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params|null,\n    fragment: string|null): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n\n  const startingPosition = findStartingPosition(nav, urlTree, route);\n\n  const segmentGroup = startingPosition.processChildren ?\n      updateSegmentGroupChildren(\n          startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n      updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n\n/**\n * Determines if a given command has an `outlets` map. When we encounter a command\n * with an outlets k/v map, we need to apply each outlet individually to the existing segment.\n */\nfunction isCommandWithOutlets(command: any): command is {outlets: {[key: string]: any}} {\n  return typeof command === 'object' && command != null && command.outlets;\n}\n\nfunction tree(\n    oldSegmentGroup: UrlSegmentGroup, newSegmentGroup: UrlSegmentGroup, urlTree: UrlTree,\n    queryParams: Params|null, fragment: string|null): UrlTree {\n  let qp: any = {};\n  if (queryParams) {\n    forEach(queryParams, (value: any, name: any) => {\n      qp[name] = Array.isArray(value) ? value.map((v: any) => `${v}`) : `${value}`;\n    });\n  }\n\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, qp, fragment);\n  }\n\n  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n\nfunction replaceSegment(\n    current: UrlSegmentGroup, oldSegment: UrlSegmentGroup,\n    newSegment: UrlSegmentGroup): UrlSegmentGroup {\n  const children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(current.children, (c: UrlSegmentGroup, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\n\nclass Navigation {\n  constructor(\n      public isAbsolute: boolean, public numberOfDoubleDots: number, public commands: any[]) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n\n    const cmdWithOutlet = commands.find(isCommandWithOutlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n\n  public toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands: any[]): Navigation {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n\n  const res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const outlets: {[k: string]: any} = {};\n        forEach(cmd.outlets, (commands: any, name: string) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {  //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\n\nclass Position {\n  constructor(\n      public segmentGroup: UrlSegmentGroup, public processChildren: boolean, public index: number) {\n  }\n}\n\nfunction findStartingPosition(nav: Navigation, tree: UrlTree, route: ActivatedRoute): Position {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    const segmentGroup = route.snapshot._urlSegment;\n    // Pathless ActivatedRoute has _lastPathIndex === -1 but should not process children\n    // see issue #26224, #13011, #35687\n    // However, if the ActivatedRoute is the root we should process children like above.\n    const processChildren = segmentGroup === tree.root;\n    return new Position(segmentGroup, processChildren, 0);\n  }\n\n  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(\n      route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n\nfunction createPositionApplyingDoubleDots(\n    group: UrlSegmentGroup, index: number, numberOfDoubleDots: number): Position {\n  let g = group;\n  let ci = index;\n  let dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent!;\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n\nfunction getOutlets(commands: unknown[]): {[k: string]: unknown[]|string} {\n  if (isCommandWithOutlets(commands[0])) {\n    return commands[0].outlets;\n  }\n\n  return {[PRIMARY_OUTLET]: commands};\n}\n\nfunction updateSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const m = prefixedWith(segmentGroup, startIndex, commands);\n  const slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] =\n        new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n\nfunction updateSegmentGroupChildren(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const outlets = getOutlets(commands);\n    const children: {[key: string]: UrlSegmentGroup} = {};\n\n    forEach(outlets, (commands, outlet) => {\n      if (typeof commands === 'string') {\n        commands = [commands];\n      }\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    forEach(segmentGroup.children, (child: UrlSegmentGroup, childOutlet: string) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let currentCommandIndex = 0;\n  let currentPathIndex = startIndex;\n\n  const noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const path = segmentGroup.segments[currentPathIndex];\n    const command = commands[currentCommandIndex];\n    // Do not try to consume command as part of the prefixing if it has outlets because it can\n    // contain outlets other than the one being processed. Consuming the outlets command would\n    // result in other outlets being ignored.\n    if (isCommandWithOutlets(command)) {\n      break;\n    }\n    const curr = `${command}`;\n    const next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n\nfunction createNewSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  const paths = segmentGroup.segments.slice(0, startIndex);\n\n  let i = 0;\n  while (i < commands.length) {\n    const command = commands[i];\n    if (isCommandWithOutlets(command)) {\n      const children = createNewSegmentChildren(command.outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, stringify(commands[0])));\n      i++;\n      continue;\n    }\n\n    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;\n    const next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n\nfunction createNewSegmentChildren(outlets: {[name: string]: unknown[]|string}):\n    {[outlet: string]: UrlSegmentGroup} {\n  const children: {[outlet: string]: UrlSegmentGroup} = {};\n  forEach(outlets, (commands, outlet) => {\n    if (typeof commands === 'string') {\n      commands = [commands];\n    }\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {LoadedRouterConfig} from '../config';\nimport {ActivationEnd, ChildActivationEnd, Event} from '../events';\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from '../route_reuse_strategy';\nimport {NavigationTransition} from '../router';\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot, advanceActivatedRoute, RouterState} from '../router_state';\nimport {forEach} from '../utils/collection';\nimport {nodeChildrenAsMap, TreeNode} from '../utils/tree';\n\nexport const activateRoutes =\n    (rootContexts: ChildrenOutletContexts, routeReuseStrategy: RouteReuseStrategy,\n     forwardEvent: (evt: Event) => void): MonoTypeOperatorFunction<NavigationTransition> =>\n        map(t => {\n          new ActivateRoutes(\n              routeReuseStrategy, t.targetRouterState!, t.currentRouterState, forwardEvent)\n              .activate(rootContexts);\n          return t;\n        });\n\nexport class ActivateRoutes {\n  constructor(\n      private routeReuseStrategy: RouteReuseStrategy, private futureState: RouterState,\n      private currState: RouterState, private forwardEvent: (evt: Event) => void) {}\n\n  activate(parentContexts: ChildrenOutletContexts): void {\n    const futureRoot = this.futureState._root;\n    const currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n\n  // De-activate the child route that are not re-used for the future state\n  private deactivateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach(futureChild => {\n      const childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n\n    // De-activate the routes that will not be re-used\n    forEach(children, (v: TreeNode<ActivatedRoute>, childName: string) => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n\n  private deactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContext: ChildrenOutletContexts): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n\n  private deactivateRouteAndItsChildren(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    // If there is no component, the Route is never attached to an outlet (because there is no\n    // component to attach).\n    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n\n  private detachAndStoreRouteSubtree(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const context = parentContexts.getContext(route.value.outlet);\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(route);\n\n    for (const childOutlet of Object.keys(children)) {\n      this.deactivateRouteAndItsChildren(children[childOutlet], contexts);\n    }\n\n    if (context && context.outlet) {\n      const componentRef = context.outlet.detach();\n      const contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route, contexts});\n    }\n  }\n\n  private deactivateRouteAndOutlet(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const context = parentContexts.getContext(route.value.outlet);\n    // The context could be `null` if we are on a componentless route but there may still be\n    // children that need deactivating.\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(route);\n\n    for (const childOutlet of Object.keys(children)) {\n      this.deactivateRouteAndItsChildren(children[childOutlet], contexts);\n    }\n\n    if (context && context.outlet) {\n      // Destroy the component\n      context.outlet.deactivate();\n      // Destroy the contexts for all the outlets that were in the component\n      context.children.onOutletDeactivated();\n      // Clear the information about the attached component on the context but keep the reference to\n      // the outlet.\n      context.attachRef = null;\n      context.resolver = null;\n      context.route = null;\n    }\n  }\n\n  private activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const children: {[outlet: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.activateRoutes(c, children[c.value.outlet], contexts);\n      this.forwardEvent(new ActivationEnd(c.value.snapshot));\n    });\n    if (futureNode.children.length) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n    }\n  }\n\n  private activateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContexts: ChildrenOutletContexts): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    advanceActivatedRoute(future);\n\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const stored =\n              (<DetachedRouteHandleInternal>this.routeReuseStrategy.retrieve(future.snapshot));\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n\n          advanceActivatedRoute(stored.route.value);\n          this.activateChildRoutes(futureNode, null, context.children);\n        } else {\n          const config = parentLoadedConfig(future.snapshot);\n          const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n\n          context.attachRef = null;\n          context.route = future;\n          context.resolver = cmpFactoryResolver;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, cmpFactoryResolver);\n          }\n\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n  }\n}\n\nfunction parentLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n    if (route && route.component) return null;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory, NgModuleRef, Type} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {ActivatedRouteSnapshot} from './router_state';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * Represents a route configuration for the Router service.\n * An array of `Route` objects, used in `Router.config` and for nested route configurations\n * in `Route.children`.\n *\n * @see `Route`\n * @see `Router`\n * @see [Router configuration guide](guide/router-reference#configuration)\n * @publicApi\n */\nexport type Routes = Route[];\n\n/**\n * Represents the result of matching URLs with a custom matching function.\n *\n * * `consumed` is an array of the consumed URL segments.\n * * `posParams` is a map of positional parameters.\n *\n * @see `UrlMatcher()`\n * @publicApi\n */\nexport type UrlMatchResult = {\n  consumed: UrlSegment[];\n  posParams?: {[name: string]: UrlSegment};\n};\n\n/**\n * A function for matching a route against URLs. Implement a custom URL matcher\n * for `Route.matcher` when a combination of `path` and `pathMatch`\n * is not expressive enough. Cannot be used together with `path` and `pathMatch`.\n *\n * The function takes the following arguments and returns a `UrlMatchResult` object.\n * * *segments* : An array of URL segments.\n * * *group* : A segment group.\n * * *route* : The route to match against.\n *\n * The following example implementation matches HTML files.\n *\n * ```\n * export function htmlFiles(url: UrlSegment[]) {\n *   return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n * }\n *\n * export const routes = [{ matcher: htmlFiles, component: AnyComponent }];\n * ```\n *\n * @publicApi\n */\nexport type UrlMatcher = (segments: UrlSegment[], group: UrlSegmentGroup, route: Route) =>\n    UrlMatchResult|null;\n\n/**\n *\n * Represents static data associated with a particular route.\n *\n * @see `Route#data`\n *\n * @publicApi\n */\nexport type Data = {\n  [name: string]: any\n};\n\n/**\n *\n * Represents the resolved data associated with a particular route.\n *\n * @see `Route#resolve`.\n *\n * @publicApi\n */\nexport type ResolveData = {\n  [name: string]: any\n};\n\n/**\n *\n * A function that is called to resolve a collection of lazy-loaded routes.\n * Must be an arrow function of the following form:\n * `() => import('...').then(mod => mod.MODULE)`\n *\n * For example:\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n *\n * @see [Route.loadChildren](api/router/Route#loadChildren)\n * @publicApi\n */\nexport type LoadChildrenCallback = () => Type<any>|NgModuleFactory<any>|Observable<Type<any>>|\n    Promise<NgModuleFactory<any>|Type<any>|any>;\n\n/**\n *\n * A function that returns a set of routes to load.\n *\n * @see `LoadChildrenCallback`\n * @publicApi\n */\nexport type LoadChildren = LoadChildrenCallback;\n\n/**\n *\n * How to handle query parameters in a router link.\n * One of:\n * - `merge` : Merge new with current parameters.\n * - `preserve` : Preserve current parameters.\n *\n * @see `UrlCreationOptions#queryParamsHandling`\n * @see `RouterLink`\n * @publicApi\n */\nexport type QueryParamsHandling = 'merge'|'preserve'|'';\n\n/**\n *\n * A policy for when to run guards and resolvers on a route.\n *\n * @see [Route.runGuardsAndResolvers](api/router/Route#runGuardsAndResolvers)\n * @publicApi\n */\nexport type RunGuardsAndResolvers =\n    'pathParamsChange'|'pathParamsOrQueryParamsChange'|'paramsChange'|'paramsOrQueryParamsChange'|\n    'always'|((from: ActivatedRouteSnapshot, to: ActivatedRouteSnapshot) => boolean);\n\n/**\n * A configuration object that defines a single route.\n * A set of routes are collected in a `Routes` array to define a `Router` configuration.\n * The router attempts to match segments of a given URL against each route,\n * using the configuration options defined in this object.\n *\n * Supports static, parameterized, redirect, and wildcard routes, as well as\n * custom route data and resolve methods.\n *\n * For detailed usage information, see the [Routing Guide](guide/router).\n *\n * @usageNotes\n *\n * ### Simple Configuration\n *\n * The following route specifies that when navigating to, for example,\n * `/team/11/user/bob`, the router creates the 'Team' component\n * with the 'User' child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n  *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * ### Multiple Outlets\n *\n * The following route creates sibling components with multiple outlets.\n * When navigating to `/team/11(aux:chat/jim)`, the router creates the 'Team' component next to\n * the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * ### Wild Cards\n *\n * The following route uses wild-card notation to specify a component\n * that is always instantiated regardless of where you navigate to.\n *\n * ```\n * [{\n *   path: '**',\n *   component: WildcardComponent\n * }]\n * ```\n *\n * ### Redirects\n *\n * The following route uses the `redirectTo` property to ignore a segment of\n * a given URL when looking for a child path.\n *\n * When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n * '/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\n * the Team component with the User child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * The redirect path can be relative, as shown in this example, or absolute.\n * If we change the `redirectTo` value in the example to the absolute URL segment '/user/:name',\n * the result URL is also absolute, '/user/jim'.\n\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any URL segments.\n *\n * In the following configuration, when navigating to\n * `/team/11`, the router instantiates the 'AllUsers' component.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * Empty-path routes can have children. In the following example, when navigating\n * to `/team/11/user/jim`, the router instantiates the wrapper component with\n * the user component in it.\n *\n * Note that an empty path route inherits its parent's parameters and data.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * ### Matching Strategy\n *\n * The default path-match strategy is 'prefix', which means that the router\n * checks URL elements from the left to see if the URL matches a specified path.\n * For example, '/team/11/user' matches 'team/:id'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * You can specify the path-match strategy 'full' to make sure that the path\n * covers the whole unconsumed URL. It is important to do this when redirecting\n * empty-path routes. Otherwise, because an empty path is a prefix of any URL,\n * the router would apply the redirect even when navigating to the redirect destination,\n * creating an endless loop.\n *\n * In the following example, supplying the 'full' `pathMatch` strategy ensures\n * that the router applies the redirect if and only if navigating to '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * You can share parameters between sibling components.\n * For example, suppose that two sibling components should go next to each other,\n * and both of them require an ID parameter. You can accomplish this using a route\n * that does not specify a component at the top level.\n *\n * In the following example, 'MainChild' and 'AuxChild' are siblings.\n * When navigating to 'parent/10/(a//aux:b)', the route instantiates\n * the main child and aux child components next to each other.\n * For this to work, the application component must have the primary and aux outlets defined.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * The router merges the parameters, data, and resolve of the componentless\n * parent into the parameters, data, and resolve of the children.\n *\n * This is especially useful when child components are defined\n * with an empty path string, as in the following example.\n * With this configuration, navigating to '/parent/10' creates\n * the main child and aux components.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up application load time by splitting the application\n * into multiple bundles and loading them on demand.\n * To use lazy loading, provide the `loadChildren` property in the `Route` object,\n * instead of the `children` property.\n *\n * Given the following example route, the router will lazy load\n * the associated module on demand using the browser native import system.\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n *\n * @publicApi\n */\nexport interface Route {\n  /**\n   * The path to match against. Cannot be used together with a custom `matcher` function.\n   * A URL string that uses router matching notation.\n   * Can be a wild card (`**`) that matches any URL (see Usage Notes below).\n   * Default is \"/\" (the root path).\n   *\n   */\n  path?: string;\n  /**\n   * The path-matching strategy, one of 'prefix' or 'full'.\n   * Default is 'prefix'.\n   *\n   * By default, the router checks URL elements from the left to see if the URL\n   * matches a given path and stops when there is a config match. Importantly there must still be a\n   * config match for each segment of the URL. For example, '/team/11/user' matches the prefix\n   * 'team/:id' if one of the route's children matches the segment 'user'. That is, the URL\n   * '/team/11/user` matches the config\n   * `{path: 'team/:id', children: [{path: ':user', component: User}]}`\n   * but does not match when there are no children as in `{path: 'team/:id', component: Team}`.\n   *\n   * The path-match strategy 'full' matches against the entire URL.\n   * It is important to do this when redirecting empty-path routes.\n   * Otherwise, because an empty path is a prefix of any URL,\n   * the router would apply the redirect even when navigating\n   * to the redirect destination, creating an endless loop.\n   *\n   */\n  pathMatch?: string;\n  /**\n   * A custom URL-matching function. Cannot be used together with `path`.\n   */\n  matcher?: UrlMatcher;\n  /**\n   * The component to instantiate when the path matches.\n   * Can be empty if child routes specify components.\n   */\n  component?: Type<any>;\n  /**\n   * A URL to redirect to when the path matches.\n   *\n   * Absolute if the URL begins with a slash (/), otherwise relative to the path URL.\n   * Note that no further redirects are evaluated after an absolute redirect.\n   *\n   * When not present, router does not redirect.\n   */\n  redirectTo?: string;\n  /**\n   * Name of a `RouterOutlet` object where the component can be placed\n   * when the path matches.\n   */\n  outlet?: string;\n  /**\n   * An array of dependency-injection tokens used to look up `CanActivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * activate the component. By default, any user can activate.\n   */\n  canActivate?: any[];\n  /**\n   * An array of DI tokens used to look up `CanActivateChild()` handlers,\n   * in order to determine if the current user is allowed to activate\n   * a child of the component. By default, any user can activate a child.\n   */\n  canActivateChild?: any[];\n  /**\n   * An array of DI tokens used to look up `CanDeactivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * deactivate the component. By default, any user can deactivate.\n   *\n   */\n  canDeactivate?: any[];\n  /**\n   * An array of DI tokens used to look up `CanLoad()`\n   * handlers, in order to determine if the current user is allowed to\n   * load the component. By default, any user can load.\n   */\n  canLoad?: any[];\n  /**\n   * Additional developer-defined data provided to the component via\n   * `ActivatedRoute`. By default, no additional data is passed.\n   */\n  data?: Data;\n  /**\n   * A map of DI tokens used to look up data resolvers. See `Resolve`.\n   */\n  resolve?: ResolveData;\n  /**\n   * An array of child `Route` objects that specifies a nested route\n   * configuration.\n   */\n  children?: Routes;\n  /**\n   * An object specifying lazy-loaded child routes.\n   */\n  loadChildren?: LoadChildren;\n  /**\n   * Defines when guards and resolvers will be run. One of\n   * - `paramsOrQueryParamsChange` : Run when query parameters change.\n   * - `always` : Run on every execution.\n   * By default, guards and resolvers run only when the matrix\n   * parameters of the route change.\n   */\n  runGuardsAndResolvers?: RunGuardsAndResolvers;\n  /**\n   * Filled for routes with `loadChildren` once the module has been loaded\n   * @internal\n   */\n  _loadedConfig?: LoadedRouterConfig;\n  /**\n   * Filled for routes with `loadChildren` during load\n   * @internal\n   */\n  _loader$?: Observable<LoadedRouterConfig>;\n}\n\nexport class LoadedRouterConfig {\n  constructor(public routes: Route[], public module: NgModuleRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CanActivate, CanActivateChild, CanDeactivate, CanLoad} from '../interfaces';\nimport {UrlTree} from '../url_tree';\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nexport function isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n\nexport function isBoolean(v: any): v is boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isUrlTree(v: any): v is UrlTree {\n  return v instanceof UrlTree;\n}\n\nexport function isCanLoad(guard: any): guard is CanLoad {\n  return guard && isFunction<CanLoad>(guard.canLoad);\n}\n\nexport function isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nexport function isCanActivateChild(guard: any): guard is CanActivateChild {\n  return guard && isFunction<CanActivateChild>(guard.canActivateChild);\n}\n\nexport function isCanDeactivate<T>(guard: any): guard is CanDeactivate<T> {\n  return guard && isFunction<CanDeactivate<T>>(guard.canDeactivate);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {combineLatest, Observable, OperatorFunction} from 'rxjs';\nimport {filter, map, scan, startWith, switchMap, take} from 'rxjs/operators';\n\nimport {UrlTree} from '../url_tree';\nimport {isUrlTree} from '../utils/type_guards';\n\nconst INITIAL_VALUE = Symbol('INITIAL_VALUE');\ndeclare type INTERIM_VALUES = typeof INITIAL_VALUE | boolean | UrlTree;\n\nexport function prioritizedGuardValue():\n    OperatorFunction<Observable<boolean|UrlTree>[], boolean|UrlTree> {\n  return switchMap(obs => {\n    return combineLatest(obs.map(o => o.pipe(take(1), startWith(INITIAL_VALUE as INTERIM_VALUES))))\n               .pipe(\n                   scan(\n                       (acc: INTERIM_VALUES, list: INTERIM_VALUES[]) => {\n                         let isPending = false;\n                         return list.reduce((innerAcc, val, i: number) => {\n                           if (innerAcc !== INITIAL_VALUE) return innerAcc;\n\n                           // Toggle pending flag if any values haven't been set yet\n                           if (val === INITIAL_VALUE) isPending = true;\n\n                           // Any other return values are only valid if we haven't yet hit a pending\n                           // call. This guarantees that in the case of a guard at the bottom of the\n                           // tree that returns a redirect, we will wait for the higher priority\n                           // guard at the top to finish before performing the redirect.\n                           if (!isPending) {\n                             // Early return when we hit a `false` value as that should always\n                             // cancel navigation\n                             if (val === false) return val;\n\n                             if (i === list.length - 1 || isUrlTree(val)) {\n                               return val;\n                             }\n                           }\n\n                           return innerAcc;\n                         }, acc);\n                       },\n                       INITIAL_VALUE),\n                   filter(item => item !== INITIAL_VALUE),\n                   map(item => isUrlTree(item) ? item : item === true),  //\n                   take(1)) as Observable<boolean|UrlTree>;\n  });\n}\n","import { concat } from '../observable/concat';\nimport { OperatorFunction, SchedulerLike, ValueFromArray } from '../types';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function startWith<T>(value: null): OperatorFunction<T, T | null>;\nexport function startWith<T>(value: undefined): OperatorFunction<T, T | undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function startWith<T, A extends readonly unknown[] = T[]>(\n  ...valuesAndScheduler: [...A, SchedulerLike]\n): OperatorFunction<T, T | ValueFromArray<A>>;\nexport function startWith<T, A extends readonly unknown[] = T[]>(...values: A): OperatorFunction<T, T | ValueFromArray<A>>;\n\n/**\n * Returns an observable that, at the moment of subscription, will synchronously emit all\n * values provided to this operator, then subscribe to the source and mirror all of its emissions\n * to subscribers.\n *\n * This is a useful way to know when subscription has occurred on an existing observable.\n *\n * <span class=\"informal\">First emits its arguments in order, and then any\n * emissions from the source.</span>\n *\n * ![](startWith.png)\n *\n * ## Examples\n *\n * Emit a value when a timer starts.\n *\n * ```ts\n * import { timer } from 'rxjs';\n * import { startWith, map } from 'rxjs/operators';\n *\n * timer(1000)\n *   .pipe(\n *     map(() => 'timer emit'),\n *     startWith('timer start')\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // results:\n * // \"timer start\"\n * // \"timer emit\"\n * ```\n *\n * @param values Items you want the modified Observable to emit first.\n * @return A function that returns an Observable that synchronously emits\n * provided values before subscribing to the source Observable.\n *\n * @see {@link endWith}\n * @see {@link finalize}\n * @see {@link concat}\n */\nexport function startWith<T, D>(...values: D[]): OperatorFunction<T, T | D> {\n  const scheduler = popScheduler(values);\n  return operate((source, subscriber) => {\n    // Here we can't pass `undefined` as a scheduler, because if we did, the\n    // code inside of `concat` would be confused by the `undefined`, and treat it\n    // like an invalid observable. So we have to split it two different ways.\n    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, ComponentRef} from '@angular/core';\n\nimport {RouterOutletContract} from './directives/router_outlet';\nimport {ActivatedRoute} from './router_state';\n\n\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nexport class OutletContext {\n  outlet: RouterOutletContract|null = null;\n  route: ActivatedRoute|null = null;\n  resolver: ComponentFactoryResolver|null = null;\n  children = new ChildrenOutletContexts();\n  attachRef: ComponentRef<any>|null = null;\n}\n\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\nexport class ChildrenOutletContexts {\n  // contexts for child outlets, by name.\n  private contexts = new Map<string, OutletContext>();\n\n  /** Called when a `RouterOutlet` directive is instantiated */\n  onChildOutletCreated(childName: string, outlet: RouterOutletContract): void {\n    const context = this.getOrCreateContext(childName);\n    context.outlet = outlet;\n    this.contexts.set(childName, context);\n  }\n\n  /**\n   * Called when a `RouterOutlet` directive is destroyed.\n   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n   * re-created later.\n   */\n  onChildOutletDestroyed(childName: string): void {\n    const context = this.getContext(childName);\n    if (context) {\n      context.outlet = null;\n      context.attachRef = null;\n    }\n  }\n\n  /**\n   * Called when the corresponding route is deactivated during navigation.\n   * Because the component get destroyed, all children outlet are destroyed.\n   */\n  onOutletDeactivated(): Map<string, OutletContext> {\n    const contexts = this.contexts;\n    this.contexts = new Map();\n    return contexts;\n  }\n\n  onOutletReAttached(contexts: Map<string, OutletContext>) {\n    this.contexts = contexts;\n  }\n\n  getOrCreateContext(childName: string): OutletContext {\n    let context = this.getContext(childName);\n\n    if (!context) {\n      context = new OutletContext();\n      this.contexts.set(childName, context);\n    }\n\n    return context;\n  }\n\n  getContext(childName: string): OutletContext|null {\n    return this.contexts.get(childName) || null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, Injector, OnDestroy, OnInit, Output, ViewContainerRef,} from '@angular/core';\nimport {Data} from '../config';\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute} from '../router_state';\nimport {PRIMARY_OUTLET} from '../shared';\n\n/**\n * An interface that defines the contract for developing a component outlet for the `Router`.\n *\n * An outlet acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * A router outlet should register itself with the `Router` via\n * `ChildrenOutletContexts#onChildOutletCreated` and unregister with\n * `ChildrenOutletContexts#onChildOutletDestroyed`. When the `Router` identifies a matched `Route`,\n * it looks for a registered outlet in the `ChildrenOutletContexts` and activates it.\n *\n * @see `ChildrenOutletContexts`\n * @publicApi\n */\nexport interface RouterOutletContract {\n  /**\n   * Whether the given outlet is activated.\n   *\n   * An outlet is considered \"activated\" if it has an active component.\n   */\n  isActivated: boolean;\n\n  /** The instance of the activated component or `null` if the outlet is not activated. */\n  component: Object|null;\n\n  /**\n   * The `Data` of the `ActivatedRoute` snapshot.\n   */\n  activatedRouteData: Data;\n\n  /**\n   * The `ActivatedRoute` for the outlet or `null` if the outlet is not activated.\n   */\n  activatedRoute: ActivatedRoute|null;\n\n  /**\n   * Called by the `Router` when the outlet should activate (create a component).\n   */\n  activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver|null): void;\n\n  /**\n   * A request to destroy the currently activated component.\n   *\n   * When a `RouteReuseStrategy` indicates that an `ActivatedRoute` should be removed but stored for\n   * later re-use rather than destroyed, the `Router` will call `detach` instead.\n   */\n  deactivate(): void;\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree.\n   *\n   * This is similar to `deactivate`, but the activated component should _not_ be destroyed.\n   * Instead, it is returned so that it can be reattached later via the `attach` method.\n   */\n  detach(): ComponentRef<unknown>;\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree.\n   */\n  attach(ref: ComponentRef<unknown>, activatedRoute: ActivatedRoute): void;\n\n  /**\n   * Emits an activate event when a new component is instantiated\n   **/\n  activateEvents?: EventEmitter<unknown>;\n\n  /**\n   * Emits a deactivate event when a component is destroyed.\n   */\n  deactivateEvents?: EventEmitter<unknown>;\n\n  /**\n   * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a\n   * previously detached subtree.\n   **/\n  attachEvents?: EventEmitter<unknown>;\n\n  /**\n   * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the\n   * subtree.\n   */\n  detachEvents?: EventEmitter<unknown>;\n}\n\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * Named outlets can be the targets of secondary routes.\n * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:\n *\n * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`\n *\n * Using named outlets and secondary routes, you can target multiple outlets in\n * the same `RouterLink` directive.\n *\n * The router keeps track of separate branches in a navigation tree for each named outlet and\n * generates a representation of that tree in the URL.\n * The URL for a secondary route uses the following syntax to specify both the primary and secondary\n * routes at the same time:\n *\n * `http://base-path/primary-route-path(outlet-name:route-path)`\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * deactivate event when a component is destroyed.\n * An attached event emits when the `RouteReuseStrategy` instructs the outlet to reattach the\n * subtree, and the detached event emits when the `RouteReuseStrategy` instructs the outlet to\n * detach the subtree.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'\n *   (attach)='onAttach($event)'\n *   (detach)='onDetach($event)'></router-outlet>\n * ```\n *\n * @see [Routing tutorial](guide/router-tutorial-toh#named-outlets \"Example of a named\n * outlet and secondary route configuration\").\n * @see `RouterLink`\n * @see `Route`\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({selector: 'router-outlet', exportAs: 'outlet'})\nexport class RouterOutlet implements OnDestroy, OnInit, RouterOutletContract {\n  private activated: ComponentRef<any>|null = null;\n  private _activatedRoute: ActivatedRoute|null = null;\n  private name: string;\n\n  @Output('activate') activateEvents = new EventEmitter<any>();\n  @Output('deactivate') deactivateEvents = new EventEmitter<any>();\n  /**\n   * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a\n   * previously detached subtree.\n   **/\n  @Output('attach') attachEvents = new EventEmitter<unknown>();\n  /**\n   * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the\n   * subtree.\n   */\n  @Output('detach') detachEvents = new EventEmitter<unknown>();\n\n  constructor(\n      private parentContexts: ChildrenOutletContexts, private location: ViewContainerRef,\n      private resolver: ComponentFactoryResolver, @Attribute('name') name: string,\n      private changeDetector: ChangeDetectorRef) {\n    this.name = name || PRIMARY_OUTLET;\n    parentContexts.onChildOutletCreated(this.name, this);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this.parentContexts.onChildOutletDestroyed(this.name);\n  }\n\n  /** @nodoc */\n  ngOnInit(): void {\n    if (!this.activated) {\n      // If the outlet was not instantiated at the time the route got activated we need to populate\n      // the outlet when it is initialized (ie inside a NgIf)\n      const context = this.parentContexts.getContext(this.name);\n      if (context && context.route) {\n        if (context.attachRef) {\n          // `attachRef` is populated when there is an existing component to mount\n          this.attach(context.attachRef, context.route);\n        } else {\n          // otherwise the component defined in the configuration is created\n          this.activateWith(context.route, context.resolver || null);\n        }\n      }\n    }\n  }\n\n  get isActivated(): boolean {\n    return !!this.activated;\n  }\n\n  /**\n   * @returns The currently activated component instance.\n   * @throws An error if the outlet is not activated.\n   */\n  get component(): Object {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this.activated.instance;\n  }\n\n  get activatedRoute(): ActivatedRoute {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this._activatedRoute as ActivatedRoute;\n  }\n\n  get activatedRouteData(): Data {\n    if (this._activatedRoute) {\n      return this._activatedRoute.snapshot.data;\n    }\n    return {};\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree\n   */\n  detach(): ComponentRef<any> {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    this.location.detach();\n    const cmp = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    this.detachEvents.emit(cmp.instance);\n    return cmp;\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n   */\n  attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute) {\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n    this.attachEvents.emit(ref.instance);\n  }\n\n  deactivate(): void {\n    if (this.activated) {\n      const c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n\n  activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver|null) {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n    this._activatedRoute = activatedRoute;\n    const snapshot = activatedRoute._futureSnapshot;\n    const component = <any>snapshot.routeConfig!.component;\n    resolver = resolver || this.resolver;\n    const factory = resolver.resolveComponentFactory(component);\n    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n    const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n    this.activated = this.location.createComponent(factory, this.location.length, injector);\n    // Calling `markForCheck` to make sure we will run the change detection when the\n    // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n    this.changeDetector.markForCheck();\n    this.activateEvents.emit(this.activated.instance);\n  }\n}\n\nclass OutletInjector implements Injector {\n  constructor(\n      private route: ActivatedRoute, private childContexts: ChildrenOutletContexts,\n      private parent: Injector) {}\n\n  get(token: any, notFoundValue?: any): any {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n\n    return this.parent.get(token, notFoundValue);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component} from '@angular/core';\n\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\n@Component({template: `<router-outlet></router-outlet>`})\nexport class ɵEmptyOutletComponent {\n}\n\nexport {ɵEmptyOutletComponent as EmptyOutletComponent};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmptyOutletComponent} from '../components/empty_outlet';\nimport {Route, Routes} from '../config';\nimport {PRIMARY_OUTLET} from '../shared';\n\nexport function validateConfig(config: Routes, parentPath: string = ''): void {\n  // forEach doesn't iterate undefined values\n  for (let i = 0; i < config.length; i++) {\n    const route: Route = config[i];\n    const fullPath: string = getFullPath(parentPath, route);\n    validateNode(route, fullPath);\n  }\n}\n\nfunction validateNode(route: Route, fullPath: string): void {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (!route) {\n      throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n    }\n    if (Array.isArray(route)) {\n      throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n    }\n    if (!route.component && !route.children && !route.loadChildren &&\n        (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n    }\n    if (route.redirectTo && route.children) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': redirectTo and children cannot be used together`);\n    }\n    if (route.redirectTo && route.loadChildren) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': redirectTo and loadChildren cannot be used together`);\n    }\n    if (route.children && route.loadChildren) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': children and loadChildren cannot be used together`);\n    }\n    if (route.redirectTo && route.component) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': redirectTo and component cannot be used together`);\n    }\n    if (route.redirectTo && route.canActivate) {\n      throw new Error(\n          `Invalid configuration of route '${\n              fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation ` +\n          `so canActivate will never be executed.`);\n    }\n    if (route.path && route.matcher) {\n      throw new Error(\n          `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': routes must have either a path or a matcher specified`);\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n      throw new Error(\n          `Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n      const exp =\n          `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n      throw new Error(`Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${\n          route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n    }\n    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n    }\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath);\n  }\n}\n\nfunction getFullPath(parentPath: string, currentRoute: Route): string {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nexport function standardizeConfig(r: Route): Route {\n  const children = r.children && r.children.map(standardizeConfig);\n  const c = children ? {...r, children} : {...r};\n  if (!c.component && (children || c.loadChildren) && (c.outlet && c.outlet !== PRIMARY_OUTLET)) {\n    c.component = EmptyOutletComponent;\n  }\n  return c;\n}\n\n/** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */\nexport function getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n\n/**\n * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.\n * The order of the configs is otherwise preserved.\n */\nexport function sortByMatchingOutlets(routes: Routes, outletName: string): Routes {\n  const sortedConfig = routes.filter(r => getOutlet(r) === outletName);\n  sortedConfig.push(...routes.filter(r => getOutlet(r) !== outletName));\n  return sortedConfig;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from '../config';\nimport {defaultUrlMatcher, PRIMARY_OUTLET} from '../shared';\nimport {UrlSegment, UrlSegmentGroup} from '../url_tree';\n\nimport {forEach} from './collection';\nimport {getOutlet} from './config';\n\nexport interface MatchResult {\n  matched: boolean;\n  consumedSegments: UrlSegment[];\n  lastChild: number;\n  parameters: {[k: string]: string};\n  positionalParamSegments: {[k: string]: UrlSegment};\n}\n\nconst noMatch: MatchResult = {\n  matched: false,\n  consumedSegments: [],\n  lastChild: 0,\n  parameters: {},\n  positionalParamSegments: {}\n};\n\nexport function match(\n    segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): MatchResult {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {...noMatch};\n    }\n\n    return {\n      matched: true,\n      consumedSegments: [],\n      lastChild: 0,\n      parameters: {},\n      positionalParamSegments: {}\n    };\n  }\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) return {...noMatch};\n\n  const posParams: {[n: string]: string} = {};\n  forEach(res.posParams!, (v: UrlSegment, k: string) => {\n    posParams[k] = v.path;\n  });\n  const parameters = res.consumed.length > 0 ?\n      {...posParams, ...res.consumed[res.consumed.length - 1].parameters} :\n      posParams;\n\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    lastChild: res.consumed.length,\n    // TODO(atscott): investigate combining parameters and positionalParamSegments\n    parameters,\n    positionalParamSegments: res.posParams ?? {}\n  };\n}\n\nexport function split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[], relativeLinkResolution: 'legacy'|'corrected' = 'corrected') {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments,\n        createChildrenForEmptyPaths(\n            segmentGroup, consumedSegments, config,\n            new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments,\n        addEmptyPathsToChildrenIfNeeded(\n            segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children,\n            relativeLinkResolution));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n\n  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  s._sourceSegment = segmentGroup;\n  s._segmentIndexShift = consumedSegments.length;\n  return {segmentGroup: s, slicedSegments};\n}\n\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    routes: Route[], children: {[name: string]: UrlSegmentGroup},\n    relativeLinkResolution: 'legacy'|'corrected'): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (const r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      if (relativeLinkResolution === 'legacy') {\n        s._segmentIndexShift = segmentGroup.segments.length;\n      } else {\n        s._segmentIndexShift = consumedSegments.length;\n      }\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {...children, ...res};\n}\n\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\n\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '';\n}\n\n/**\n * Determines if `route` is a path match for the `rawSegment`, `segments`, and `outlet` without\n * verifying that its children are a full match for the remainder of the `rawSegment` children as\n * well.\n */\nexport function isImmediateMatch(\n    route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[], outlet: string): boolean {\n  // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to\n  // a config like\n  // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`\n  // or even\n  // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`\n  //\n  // The exception here is when the segment outlet is for the primary outlet. This would\n  // result in a match inside the named outlet because all children there are written as primary\n  // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like\n  // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`\n  // This should only match if the url is `/(x:b)`.\n  if (getOutlet(route) !== outlet &&\n      (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {\n    return false;\n  }\n  if (route.path === '**') {\n    return true;\n  }\n  return match(rawSegment, route, segments).matched;\n}\n\nexport function noLeftoversInUrl(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string): boolean {\n  return segments.length === 0 && !segmentGroup.children[outlet];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModuleRef} from '@angular/core';\nimport {EmptyError, from, Observable, Observer, of} from 'rxjs';\nimport {catchError, concatMap, first, last, map, mergeMap, scan, tap} from 'rxjs/operators';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {CanLoadFn} from './interfaces';\nimport {prioritizedGuardValue} from './operators/prioritized_guard_value';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {navigationCancelingError, Params, PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {forEach, wrapIntoObservable} from './utils/collection';\nimport {getOutlet, sortByMatchingOutlets} from './utils/config';\nimport {isImmediateMatch, match, noLeftoversInUrl, split} from './utils/config_matching';\nimport {isCanLoad, isFunction, isUrlTree} from './utils/type_guards';\n\nclass NoMatch {\n  public segmentGroup: UrlSegmentGroup|null;\n\n  constructor(segmentGroup?: UrlSegmentGroup) {\n    this.segmentGroup = segmentGroup || null;\n  }\n}\n\nclass AbsoluteRedirect {\n  constructor(public urlTree: UrlTree) {}\n}\n\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(\n          navigationCancelingError(`Cannot load children because the guard of the route \"path: '${\n              route.path}'\" returned false`)));\n}\n\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n */\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\n\nclass ApplyRedirects {\n  private allowRedirects: boolean = true;\n  private ngModule: NgModuleRef<any>;\n\n  constructor(\n      moduleInjector: Injector, private configLoader: RouterConfigLoader,\n      private urlSerializer: UrlSerializer, private urlTree: UrlTree, private config: Routes) {\n    this.ngModule = moduleInjector.get(NgModuleRef);\n  }\n\n  apply(): Observable<UrlTree> {\n    const splitGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n    // TODO(atscott): creating a new segment removes the _sourceSegment _segmentIndexShift, which is\n    // only necessary to prevent failures in tests which assert exact object matches. The `split` is\n    // now shared between `applyRedirects` and `recognize` but only the `recognize` step needs these\n    // properties. Before the implementations were merged, the `applyRedirects` would not assign\n    // them. We should be able to remove this logic as a \"breaking change\" but should do some more\n    // investigation into the failures first.\n    const rootSegmentGroup = new UrlSegmentGroup(splitGroup.segments, splitGroup.children);\n\n    const expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, rootSegmentGroup, PRIMARY_OUTLET);\n    const urlTrees$ = expanded$.pipe(map((rootSegmentGroup: UrlSegmentGroup) => {\n      return this.createUrlTree(\n          squashSegmentGroup(rootSegmentGroup), this.urlTree.queryParams, this.urlTree.fragment);\n    }));\n    return urlTrees$.pipe(catchError((e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // After an absolute redirect we do not apply any more redirects!\n        // If this implementation changes, update the documentation note in `redirectTo`.\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      }\n\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    }));\n  }\n\n  private match(tree: UrlTree): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n    const mapped$ = expanded$.pipe(map((rootSegmentGroup: UrlSegmentGroup) => {\n      return this.createUrlTree(\n          squashSegmentGroup(rootSegmentGroup), tree.queryParams, tree.fragment);\n    }));\n    return mapped$.pipe(catchError((e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    }));\n  }\n\n  private noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n\n  private createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string|null):\n      UrlTree {\n    const root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n\n  private expandSegmentGroup(\n      ngModule: NgModuleRef<any>, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.expandChildren(ngModule, routes, segmentGroup)\n          .pipe(map((children: any) => new UrlSegmentGroup([], children)));\n    }\n\n    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  }\n\n  // Recursively expand segment groups for all the child outlets\n  private expandChildren(\n      ngModule: NgModuleRef<any>, routes: Route[],\n      segmentGroup: UrlSegmentGroup): Observable<{[name: string]: UrlSegmentGroup}> {\n    // Expand outlets one at a time, starting with the primary outlet. We need to do it this way\n    // because an absolute redirect from the primary outlet takes precedence.\n    const childOutlets: string[] = [];\n    for (const child of Object.keys(segmentGroup.children)) {\n      if (child === 'primary') {\n        childOutlets.unshift(child);\n      } else {\n        childOutlets.push(child);\n      }\n    }\n\n    return from(childOutlets)\n        .pipe(\n            concatMap(childOutlet => {\n              const child = segmentGroup.children[childOutlet];\n              // Sort the routes so routes with outlets that match the segment appear\n              // first, followed by routes for other outlets, which might match if they have an\n              // empty path.\n              const sortedRoutes = sortByMatchingOutlets(routes, childOutlet);\n              return this.expandSegmentGroup(ngModule, sortedRoutes, child, childOutlet)\n                  .pipe(map(s => ({segment: s, outlet: childOutlet})));\n            }),\n            scan(\n                (children, expandedChild) => {\n                  children[expandedChild.outlet] = expandedChild.segment;\n                  return children;\n                },\n                {} as {[outlet: string]: UrlSegmentGroup}),\n            last(),\n        );\n  }\n\n  private expandSegment(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[],\n      segments: UrlSegment[], outlet: string,\n      allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    return from(routes).pipe(\n        concatMap((r: any) => {\n          const expanded$ = this.expandSegmentAgainstRoute(\n              ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n          return expanded$.pipe(catchError((e: any) => {\n            if (e instanceof NoMatch) {\n              return of(null);\n            }\n            throw e;\n          }));\n        }),\n        first((s): s is UrlSegmentGroup => !!s), catchError((e: any, _: any) => {\n          if (e instanceof EmptyError || e.name === 'EmptyError') {\n            if (noLeftoversInUrl(segmentGroup, segments, outlet)) {\n              return of(new UrlSegmentGroup([], {}));\n            }\n            throw new NoMatch(segmentGroup);\n          }\n          throw e;\n        }));\n  }\n\n  private expandSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (!isImmediateMatch(route, segmentGroup, paths, outlet)) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths, outlet);\n    }\n\n    if (allowRedirects && this.allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n          ngModule, segmentGroup, routes, route, paths, outlet);\n    }\n\n    return noMatch(segmentGroup);\n  }\n\n  private expandSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          ngModule, routes, route, outlet);\n    }\n\n    return this.expandRegularSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, segments, outlet);\n  }\n\n  private expandWildCardWithParamsAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const newTree = this.applyRedirectCommands([], route.redirectTo!, {});\n    if (route.redirectTo!.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments: UrlSegment[]) => {\n      const group = new UrlSegmentGroup(newSegments, {});\n      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n    }));\n  }\n\n  private expandRegularSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const newTree =\n        this.applyRedirectCommands(consumedSegments, route.redirectTo!, positionalParamSegments);\n    if (route.redirectTo!.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments: UrlSegment[]) => {\n      return this.expandSegment(\n          ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n          false);\n    }));\n  }\n\n  private matchSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        const loaded$ = route._loadedConfig ? of(route._loadedConfig) :\n                                              this.configLoader.load(ngModule.injector, route);\n        return loaded$.pipe(map((cfg: LoadedRouterConfig) => {\n          route._loadedConfig = cfg;\n          return new UrlSegmentGroup(segments, {});\n        }));\n      }\n\n      return of(new UrlSegmentGroup(segments, {}));\n    }\n\n    const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n\n    const rawSlicedSegments = segments.slice(lastChild);\n    const childConfig$ = this.getChildConfig(ngModule, route, segments);\n\n    return childConfig$.pipe(mergeMap((routerConfig: LoadedRouterConfig) => {\n      const childModule = routerConfig.module;\n      const childConfig = routerConfig.routes;\n\n      const {segmentGroup: splitSegmentGroup, slicedSegments} =\n          split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n      // See comment on the other call to `split` about why this is necessary.\n      const segmentGroup =\n          new UrlSegmentGroup(splitSegmentGroup.segments, splitSegmentGroup.children);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n        return expanded$.pipe(\n            map((children: any) => new UrlSegmentGroup(consumedSegments, children)));\n      }\n\n      if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of(new UrlSegmentGroup(consumedSegments, {}));\n      }\n\n      const matchedOnOutlet = getOutlet(route) === outlet;\n      const expanded$ = this.expandSegment(\n          childModule, segmentGroup, childConfig, slicedSegments,\n          matchedOnOutlet ? PRIMARY_OUTLET : outlet, true);\n      return expanded$.pipe(\n          map((cs: UrlSegmentGroup) =>\n                  new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children)));\n    }));\n  }\n\n  private getChildConfig(ngModule: NgModuleRef<any>, route: Route, segments: UrlSegment[]):\n      Observable<LoadedRouterConfig> {\n    if (route.children) {\n      // The children belong to the same module\n      return of(new LoadedRouterConfig(route.children, ngModule));\n    }\n\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedConfig !== undefined) {\n        return of(route._loadedConfig);\n      }\n\n      return this.runCanLoadGuards(ngModule.injector, route, segments)\n          .pipe(mergeMap((shouldLoadResult: boolean) => {\n            if (shouldLoadResult) {\n              return this.configLoader.load(ngModule.injector, route)\n                  .pipe(map((cfg: LoadedRouterConfig) => {\n                    route._loadedConfig = cfg;\n                    return cfg;\n                  }));\n            }\n            return canLoadFails(route);\n          }));\n    }\n\n    return of(new LoadedRouterConfig([], ngModule));\n  }\n\n  private runCanLoadGuards(moduleInjector: Injector, route: Route, segments: UrlSegment[]):\n      Observable<boolean> {\n    const canLoad = route.canLoad;\n    if (!canLoad || canLoad.length === 0) return of(true);\n\n    const canLoadObservables = canLoad.map((injectionToken: any) => {\n      const guard = moduleInjector.get(injectionToken);\n      let guardVal;\n      if (isCanLoad(guard)) {\n        guardVal = guard.canLoad(route, segments);\n      } else if (isFunction<CanLoadFn>(guard)) {\n        guardVal = guard(route, segments);\n      } else {\n        throw new Error('Invalid CanLoad guard');\n      }\n      return wrapIntoObservable(guardVal);\n    });\n\n    return of(canLoadObservables)\n        .pipe(\n            prioritizedGuardValue(),\n            tap((result: UrlTree|boolean) => {\n              if (!isUrlTree(result)) return;\n\n              const error: Error&{url?: UrlTree} = navigationCancelingError(\n                  `Redirecting to \"${this.urlSerializer.serialize(result)}\"`);\n              error.url = result;\n              throw error;\n            }),\n            map(result => result === true),\n        );\n  }\n\n  private lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let res: UrlSegment[] = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of(res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(route.redirectTo!);\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n\n  private applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n\n  private applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n\n  private createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      const copySourceValue = typeof v === 'string' && v.startsWith(':');\n      if (copySourceValue) {\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n\n  private createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n\n  private createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n\n  private findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n\n  private findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\n/**\n * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.\n *\n * When a segment group has only one child which is a primary outlet, merges that child into the\n * parent. That is, the child segment group's segments are merged into the `s` and the child's\n * children become the children of `s`. Think of this like a 'squash', merging the child segment\n * group into the parent.\n */\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n\n/**\n * Recursively merges primary segment children into their parents and also drops empty children\n * (those which have no segments and no children themselves). The latter prevents serializing a\n * group into something like `/a(aux:)`, where `aux` is an empty child segment.\n */\nfunction squashSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  const newChildren = {} as any;\n  for (const childOutlet of Object.keys(segmentGroup.children)) {\n    const child = segmentGroup.children[childOutlet];\n    const childCandidate = squashSegmentGroup(child);\n    // don't add empty children\n    if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {\n      newChildren[childOutlet] = childCandidate;\n    }\n  }\n  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);\n  return mergeTrivialChildren(s);\n}\n","import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { filter } from './filter';\nimport { takeLast } from './takeLast';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { identity } from '../util/identity';\n\nexport function last<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function last<T, D>(predicate: BooleanConstructor, defaultValue: D): OperatorFunction<T, TruthyTypesOf<T> | D>;\nexport function last<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport function last<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function last<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * ![](last.png)\n *\n * It will throw an error if the source completes without notification or one that matches the predicate. It\n * returns the last value or if a predicate is provided last value that matches the predicate. It returns the\n * given default value if no notification is emitted or matches the predicate.\n *\n * ## Example\n * Last alphabet from the sequence.\n * ```ts\n * import { from } from 'rxjs';\n * import { last } from 'rxjs/operators';\n *\n * const source = from(['x', 'y', 'z']);\n * const example = source.pipe(last());\n * //output: \"Last alphabet: z\"\n * example.subscribe(val => console.log(`Last alphabet: ${val}`));\n * ```\n *\n * Default value when the value in the predicate is not matched.\n * ```ts\n * import { from } from 'rxjs';\n * import { last } from 'rxjs/operators';\n *\n * const source = from(['x', 'y', 'z']);\n * const example = source.pipe(last(char => char === 'a','not exist'));\n * //output: \"'a' is not exist.\"\n * example.subscribe(val => console.log(`'a' is ${val}.`));\n * ```\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n * @see {@link skipWhile}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} [predicate] - The condition any source emitted item has to satisfy.\n * @param {any} [defaultValue] - An optional default value to provide if last\n * predicate isn't met or no values were emitted.\n * @return A function that returns an Observable that emits only the last item\n * satisfying the given condition from the source, or a NoSuchElementException\n * if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n */\nexport function last<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) =>\n    source.pipe(\n      predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n      takeLast(1),\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\n    );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\n\nimport {LoadedRouterConfig, RunGuardsAndResolvers} from '../config';\nimport {ChildrenOutletContexts, OutletContext} from '../router_outlet_context';\nimport {ActivatedRouteSnapshot, equalParamsAndUrlSegments, RouterStateSnapshot} from '../router_state';\nimport {equalPath} from '../url_tree';\nimport {forEach, shallowEqual} from '../utils/collection';\nimport {nodeChildrenAsMap, TreeNode} from '../utils/tree';\n\nexport class CanActivate {\n  readonly route: ActivatedRouteSnapshot;\n  constructor(public path: ActivatedRouteSnapshot[]) {\n    this.route = this.path[this.path.length - 1];\n  }\n}\n\nexport class CanDeactivate {\n  constructor(public component: Object|null, public route: ActivatedRouteSnapshot) {}\n}\n\nexport declare type Checks = {\n  canDeactivateChecks: CanDeactivate[],\n  canActivateChecks: CanActivate[],\n};\n\nexport function getAllRouteGuards(\n    future: RouterStateSnapshot, curr: RouterStateSnapshot,\n    parentContexts: ChildrenOutletContexts) {\n  const futureRoot = future._root;\n  const currRoot = curr ? curr._root : null;\n\n  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\n\nexport function getCanActivateChild(p: ActivatedRouteSnapshot):\n    {node: ActivatedRouteSnapshot, guards: any[]}|null {\n  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n  if (!canActivateChild || canActivateChild.length === 0) return null;\n  return {node: p, guards: canActivateChild};\n}\n\nexport function getToken(\n    token: any, snapshot: ActivatedRouteSnapshot, moduleInjector: Injector): any {\n  const config = getClosestLoadedConfig(snapshot);\n  const injector = config ? config.module.injector : moduleInjector;\n  return injector.get(token);\n}\n\nfunction getClosestLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  if (!snapshot) return null;\n\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n  }\n\n  return null;\n}\n\nfunction getChildRouteGuards(\n    futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>|null,\n    contexts: ChildrenOutletContexts|null, futurePath: ActivatedRouteSnapshot[], checks: Checks = {\n      canDeactivateChecks: [],\n      canActivateChecks: []\n    }): Checks {\n  const prevChildren = nodeChildrenAsMap(currNode);\n\n  // Process the children of the future route\n  futureNode.children.forEach(c => {\n    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n    delete prevChildren[c.value.outlet];\n  });\n\n  // Process any children left from the current route (not active for the future route)\n  forEach(\n      prevChildren,\n      (v: TreeNode<ActivatedRouteSnapshot>, k: string) =>\n          deactivateRouteAndItsChildren(v, contexts!.getContext(k), checks));\n\n  return checks;\n}\n\nfunction getRouteGuards(\n    futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n    parentContexts: ChildrenOutletContexts|null, futurePath: ActivatedRouteSnapshot[],\n    checks: Checks = {\n      canDeactivateChecks: [],\n      canActivateChecks: []\n    }): Checks {\n  const future = futureNode.value;\n  const curr = currNode ? currNode.value : null;\n  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n\n  // reusing the node\n  if (curr && future.routeConfig === curr.routeConfig) {\n    const shouldRun =\n        shouldRunGuardsAndResolvers(curr, future, future.routeConfig!.runGuardsAndResolvers);\n    if (shouldRun) {\n      checks.canActivateChecks.push(new CanActivate(futurePath));\n    } else {\n      // we need to set the data\n      future.data = curr.data;\n      future._resolvedData = curr._resolvedData;\n    }\n\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(\n          futureNode, currNode, context ? context.children : null, futurePath, checks);\n\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n    }\n\n    if (shouldRun && context && context.outlet && context.outlet.isActivated) {\n      checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));\n    }\n  } else {\n    if (curr) {\n      deactivateRouteAndItsChildren(currNode, context, checks);\n    }\n\n    checks.canActivateChecks.push(new CanActivate(futurePath));\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n    }\n  }\n\n  return checks;\n}\n\nfunction shouldRunGuardsAndResolvers(\n    curr: ActivatedRouteSnapshot, future: ActivatedRouteSnapshot,\n    mode: RunGuardsAndResolvers|undefined): boolean {\n  if (typeof mode === 'function') {\n    return mode(curr, future);\n  }\n  switch (mode) {\n    case 'pathParamsChange':\n      return !equalPath(curr.url, future.url);\n\n    case 'pathParamsOrQueryParamsChange':\n      return !equalPath(curr.url, future.url) ||\n          !shallowEqual(curr.queryParams, future.queryParams);\n\n    case 'always':\n      return true;\n\n    case 'paramsOrQueryParamsChange':\n      return !equalParamsAndUrlSegments(curr, future) ||\n          !shallowEqual(curr.queryParams, future.queryParams);\n\n    case 'paramsChange':\n    default:\n      return !equalParamsAndUrlSegments(curr, future);\n  }\n}\n\nfunction deactivateRouteAndItsChildren(\n    route: TreeNode<ActivatedRouteSnapshot>, context: OutletContext|null, checks: Checks): void {\n  const children = nodeChildrenAsMap(route);\n  const r = route.value;\n\n  forEach(children, (node: TreeNode<ActivatedRouteSnapshot>, childName: string) => {\n    if (!r.component) {\n      deactivateRouteAndItsChildren(node, context, checks);\n    } else if (context) {\n      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n    } else {\n      deactivateRouteAndItsChildren(node, null, checks);\n    }\n  });\n\n  if (!r.component) {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  } else if (context && context.outlet && context.outlet.isActivated) {\n    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n  } else {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable, Observer, of} from 'rxjs';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, inheritedParamsDataResolve, ParamsInheritanceStrategy, RouterStateSnapshot} from './router_state';\nimport {PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {last} from './utils/collection';\nimport {getOutlet, sortByMatchingOutlets} from './utils/config';\nimport {isImmediateMatch, match, noLeftoversInUrl, split} from './utils/config_matching';\nimport {TreeNode} from './utils/tree';\n\nclass NoMatch {}\n\nfunction newObservableError(e: unknown): Observable<RouterStateSnapshot> {\n  // TODO(atscott): This pattern is used throughout the router code and can be `throwError` instead.\n  return new Observable<RouterStateSnapshot>((obs: Observer<RouterStateSnapshot>) => obs.error(e));\n}\n\nexport function recognize(\n    rootComponentType: Type<any>|null, config: Routes, urlTree: UrlTree, url: string,\n    paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly',\n    relativeLinkResolution: 'legacy'|'corrected' = 'legacy'): Observable<RouterStateSnapshot> {\n  try {\n    const result = new Recognizer(\n                       rootComponentType, config, urlTree, url, paramsInheritanceStrategy,\n                       relativeLinkResolution)\n                       .recognize();\n    if (result === null) {\n      return newObservableError(new NoMatch());\n    } else {\n      return of(result);\n    }\n  } catch (e) {\n    // Catch the potential error from recognize due to duplicate outlet matches and return as an\n    // `Observable` error instead.\n    return newObservableError(e);\n  }\n}\n\nexport class Recognizer {\n  constructor(\n      private rootComponentType: Type<any>|null, private config: Routes, private urlTree: UrlTree,\n      private url: string, private paramsInheritanceStrategy: ParamsInheritanceStrategy,\n      private relativeLinkResolution: 'legacy'|'corrected') {}\n\n  recognize(): RouterStateSnapshot|null {\n    const rootSegmentGroup =\n        split(\n            this.urlTree.root, [], [], this.config.filter(c => c.redirectTo === undefined),\n            this.relativeLinkResolution)\n            .segmentGroup;\n\n    const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n    if (children === null) {\n      return null;\n    }\n\n    // Use Object.freeze to prevent readers of the Router state from modifying it outside of a\n    // navigation, resulting in the router being out of sync with the browser.\n    const root = new ActivatedRouteSnapshot(\n        [], Object.freeze({}), Object.freeze({...this.urlTree.queryParams}), this.urlTree.fragment,\n        {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n\n    const rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n    const routeState = new RouterStateSnapshot(this.url, rootNode);\n    this.inheritParamsAndData(routeState._root);\n    return routeState;\n  }\n\n  inheritParamsAndData(routeNode: TreeNode<ActivatedRouteSnapshot>): void {\n    const route = routeNode.value;\n\n    const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n\n    routeNode.children.forEach(n => this.inheritParamsAndData(n));\n  }\n\n  processSegmentGroup(config: Route[], segmentGroup: UrlSegmentGroup, outlet: string):\n      TreeNode<ActivatedRouteSnapshot>[]|null {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    }\n\n    return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n  }\n\n  /**\n   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if\n   * we cannot find a match for _any_ of the children.\n   *\n   * @param config - The `Routes` to match against\n   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the\n   *     config.\n   */\n  processChildren(config: Route[], segmentGroup: UrlSegmentGroup):\n      TreeNode<ActivatedRouteSnapshot>[]|null {\n    const children: Array<TreeNode<ActivatedRouteSnapshot>> = [];\n    for (const childOutlet of Object.keys(segmentGroup.children)) {\n      const child = segmentGroup.children[childOutlet];\n      // Sort the config so that routes with outlets that match the one being activated appear\n      // first, followed by routes for other outlets, which might match if they have an empty path.\n      const sortedConfig = sortByMatchingOutlets(config, childOutlet);\n      const outletChildren = this.processSegmentGroup(sortedConfig, child, childOutlet);\n      if (outletChildren === null) {\n        // Configs must match all segment children so because we did not find a match for this\n        // outlet, return `null`.\n        return null;\n      }\n      children.push(...outletChildren);\n    }\n    // Because we may have matched two outlets to the same empty path segment, we can have multiple\n    // activated results for the same outlet. We should merge the children of these results so the\n    // final return value is only one `TreeNode` per outlet.\n    const mergedChildren = mergeEmptyPathMatches(children);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // This should really never happen - we are only taking the first match for each outlet and\n      // merge the empty path matches.\n      checkOutletNameUniqueness(mergedChildren);\n    }\n    sortActivatedRouteSnapshots(mergedChildren);\n    return mergedChildren;\n  }\n\n  processSegment(\n      config: Route[], segmentGroup: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[]|null {\n    for (const r of config) {\n      const children = this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      if (children !== null) {\n        return children;\n      }\n    }\n    if (noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    }\n\n    return null;\n  }\n\n  processSegmentAgainstRoute(\n      route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[]|null {\n    if (route.redirectTo || !isImmediateMatch(route, rawSegment, segments, outlet)) return null;\n\n    let snapshot: ActivatedRouteSnapshot;\n    let consumedSegments: UrlSegment[] = [];\n    let rawSlicedSegments: UrlSegment[] = [];\n\n    if (route.path === '**') {\n      const params = segments.length > 0 ? last(segments)!.parameters : {};\n      snapshot = new ActivatedRouteSnapshot(\n          segments, params, Object.freeze({...this.urlTree.queryParams}), this.urlTree.fragment,\n          getData(route), getOutlet(route), route.component!, route,\n          getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length,\n          getResolve(route));\n    } else {\n      const result = match(rawSegment, route, segments);\n      if (!result.matched) {\n        return null;\n      }\n      consumedSegments = result.consumedSegments;\n      rawSlicedSegments = segments.slice(result.lastChild);\n\n      snapshot = new ActivatedRouteSnapshot(\n          consumedSegments, result.parameters, Object.freeze({...this.urlTree.queryParams}),\n          this.urlTree.fragment, getData(route), getOutlet(route), route.component!, route,\n          getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n    }\n\n    const childConfig: Route[] = getChildConfig(route);\n\n    const {segmentGroup, slicedSegments} = split(\n        rawSegment, consumedSegments, rawSlicedSegments,\n        // Filter out routes with redirectTo because we are trying to create activated route\n        // snapshots and don't handle redirects here. That should have been done in\n        // `applyRedirects`.\n        childConfig.filter(c => c.redirectTo === undefined), this.relativeLinkResolution);\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      const children = this.processChildren(childConfig, segmentGroup);\n      if (children === null) {\n        return null;\n      }\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n    }\n\n    if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const matchedOnOutlet = getOutlet(route) === outlet;\n    // If we matched a config due to empty path match on a different outlet, we need to continue\n    // passing the current outlet for the segment rather than switch to PRIMARY.\n    // Note that we switch to primary when we have a match because outlet configs look like this:\n    // {path: 'a', outlet: 'a', children: [\n    //  {path: 'b', component: B},\n    //  {path: 'c', component: C},\n    // ]}\n    // Notice that the children of the named outlet are configured with the primary outlet\n    const children = this.processSegment(\n        childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet);\n    if (children === null) {\n      return null;\n    }\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n  }\n}\n\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  }\n\n  if (route.loadChildren) {\n    return route._loadedConfig!.routes;\n  }\n\n  return [];\n}\n\nfunction hasEmptyPathConfig(node: TreeNode<ActivatedRouteSnapshot>) {\n  const config = node.value.routeConfig;\n  return config && config.path === '' && config.redirectTo === undefined;\n}\n\n/**\n * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with the\n * children from each duplicate. This is necessary because different outlets can match a single\n * empty path route config and the results need to then be merged.\n */\nfunction mergeEmptyPathMatches(nodes: Array<TreeNode<ActivatedRouteSnapshot>>):\n    Array<TreeNode<ActivatedRouteSnapshot>> {\n  const result: Array<TreeNode<ActivatedRouteSnapshot>> = [];\n  // The set of nodes which contain children that were merged from two duplicate empty path nodes.\n  const mergedNodes: Set<TreeNode<ActivatedRouteSnapshot>> = new Set();\n\n  for (const node of nodes) {\n    if (!hasEmptyPathConfig(node)) {\n      result.push(node);\n      continue;\n    }\n\n    const duplicateEmptyPathNode =\n        result.find(resultNode => node.value.routeConfig === resultNode.value.routeConfig);\n    if (duplicateEmptyPathNode !== undefined) {\n      duplicateEmptyPathNode.children.push(...node.children);\n      mergedNodes.add(duplicateEmptyPathNode);\n    } else {\n      result.push(node);\n    }\n  }\n  // For each node which has children from multiple sources, we need to recompute a new `TreeNode`\n  // by also merging those children. This is necessary when there are multiple empty path configs in\n  // a row. Put another way: whenever we combine children of two nodes, we need to also check if any\n  // of those children can be combined into a single node as well.\n  for (const mergedNode of mergedNodes) {\n    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);\n    result.push(new TreeNode(mergedNode.value, mergedChildren));\n  }\n  return result.filter(n => !mergedNodes.has(n));\n}\n\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    const routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let s = segmentGroup;\n  let res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n\nfunction getData(route: Route): Data {\n  return route.data || {};\n}\n\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve || {};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {from, MonoTypeOperatorFunction, ObservableInput, of} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nexport function switchTap<T>(next: (x: T) => void|ObservableInput<any>):\n    MonoTypeOperatorFunction<T> {\n  return switchMap(v => {\n    const nextResult = next(v);\n    if (nextResult) {\n      return from(nextResult).pipe(map(() => v));\n    }\n    return of(v);\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\n\nimport {OutletContext} from './router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\n/**\n * @description\n *\n * Represents the detached route tree.\n *\n * This is an opaque value the router will give to a custom route reuse strategy\n * to store and retrieve later on.\n *\n * @publicApi\n */\nexport type DetachedRouteHandle = {};\n\n/** @internal */\nexport type DetachedRouteHandleInternal = {\n  contexts: Map<string, OutletContext>,\n  componentRef: ComponentRef<any>,\n  route: TreeNode<ActivatedRoute>,\n};\n\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\nexport abstract class RouteReuseStrategy {\n  /** Determines if this route (and its subtree) should be detached to be reused later */\n  abstract shouldDetach(route: ActivatedRouteSnapshot): boolean;\n\n  /**\n   * Stores the detached route.\n   *\n   * Storing a `null` value should erase the previously stored value.\n   */\n  abstract store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle|null): void;\n\n  /** Determines if this route (and its subtree) should be reattached */\n  abstract shouldAttach(route: ActivatedRouteSnapshot): boolean;\n\n  /** Retrieves the previously stored route */\n  abstract retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle|null;\n\n  /** Determines if a route should be reused */\n  abstract shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;\n}\n\n/**\n * @description\n *\n * This base route reuse strategy only reuses routes when the matched router configs are\n * identical. This prevents components from being destroyed and recreated\n * when just the fragment or query parameters change\n * (that is, the existing component is _reused_).\n *\n * This strategy does not store any routes for later reuse.\n *\n * Angular uses this strategy by default.\n *\n *\n * It can be used as a base class for custom route reuse strategies, i.e. you can create your own\n * class that extends the `BaseRouteReuseStrategy` one.\n * @publicApi\n */\nexport abstract class BaseRouteReuseStrategy implements RouteReuseStrategy {\n  /**\n   * Whether the given route should detach for later reuse.\n   * Always returns false for `BaseRouteReuseStrategy`.\n   * */\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  /**\n   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.\n   */\n  store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void {}\n\n  /** Returns `false`, meaning the route (and its subtree) is never reattached */\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  /** Returns `null` because this strategy does not store routes for later re-use. */\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle|null {\n    return null;\n  }\n\n  /**\n   * Determines if a route should be reused.\n   * This strategy returns `true` when the future route config and current route config are\n   * identical.\n   */\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n\nexport class DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, InjectFlags, InjectionToken, Injector, NgModuleFactory} from '@angular/core';\nimport {ConnectableObservable, from, Observable, of, Subject} from 'rxjs';\nimport {catchError, map, mergeMap, refCount, tap} from 'rxjs/operators';\n\nimport {LoadChildren, LoadedRouterConfig, Route} from './config';\nimport {flatten, wrapIntoObservable} from './utils/collection';\nimport {standardizeConfig} from './utils/config';\n\n/**\n * The [DI token](guide/glossary/#di-token) for a router configuration.\n *\n * `ROUTES` is a low level API for router configuration via dependency injection.\n *\n * We recommend that in almost all cases to use higher level APIs such as `RouterModule.forRoot()`,\n * `RouterModule.forChild()`, `provideRoutes`, or `Router.resetConfig()`.\n *\n * @publicApi\n */\nexport const ROUTES = new InjectionToken<Route[][]>('ROUTES');\n\nexport class RouterConfigLoader {\n  constructor(\n      private injector: Injector, private compiler: Compiler,\n      private onLoadStartListener?: (r: Route) => void,\n      private onLoadEndListener?: (r: Route) => void) {}\n\n  load(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (route._loader$) {\n      return route._loader$;\n    }\n\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n    const moduleFactory$ = this.loadModuleFactory(route.loadChildren!);\n    const loadRunner = moduleFactory$.pipe(\n        map((factory: NgModuleFactory<any>) => {\n          if (this.onLoadEndListener) {\n            this.onLoadEndListener(route);\n          }\n          const module = factory.create(parentInjector);\n          // When loading a module that doesn't provide `RouterModule.forChild()` preloader\n          // will get stuck in an infinite loop. The child module's Injector will look to\n          // its parent `Injector` when it doesn't find any ROUTES so it will return routes\n          // for it's parent module instead.\n          return new LoadedRouterConfig(\n              flatten(\n                  module.injector.get(ROUTES, undefined, InjectFlags.Self | InjectFlags.Optional))\n                  .map(standardizeConfig),\n              module);\n        }),\n        catchError((err) => {\n          route._loader$ = undefined;\n          throw err;\n        }),\n    );\n    // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n    route._loader$ = new ConnectableObservable(loadRunner, () => new Subject<LoadedRouterConfig>())\n                         .pipe(refCount());\n    return route._loader$;\n  }\n\n  private loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    return wrapIntoObservable(loadChildren()).pipe(mergeMap((t: any) => {\n      if (t instanceof NgModuleFactory) {\n        return of(t);\n      } else {\n        return from(this.compiler.compileModuleAsync(t));\n      }\n    }));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {UrlTree} from './url_tree';\n\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\nexport abstract class UrlHandlingStrategy {\n  /**\n   * Tells the router if this URL should be processed.\n   *\n   * When it returns true, the router will execute the regular navigation.\n   * When it returns false, the router will set the router state to an empty state.\n   * As a result, all the active components will be destroyed.\n   *\n   */\n  abstract shouldProcessUrl(url: UrlTree): boolean;\n\n  /**\n   * Extracts the part of the URL that should be handled by the router.\n   * The rest of the URL will remain untouched.\n   */\n  abstract extract(url: UrlTree): UrlTree;\n\n  /**\n   * Merges the URL fragment with the rest of the URL.\n   */\n  abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}\n\n/**\n * @publicApi\n */\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n  shouldProcessUrl(url: UrlTree): boolean {\n    return true;\n  }\n  extract(url: UrlTree): UrlTree {\n    return url;\n  }\n  merge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree {\n    return newUrlPart;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location, PopStateEvent} from '@angular/common';\nimport {Compiler, Injectable, Injector, NgModuleRef, NgZone, Type, ɵConsole as Console} from '@angular/core';\nimport {BehaviorSubject, EMPTY, Observable, of, Subject, SubscriptionLike} from 'rxjs';\nimport {catchError, filter, finalize, map, switchMap, tap} from 'rxjs/operators';\n\nimport {QueryParamsHandling, Route, Routes} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {Event, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, NavigationTrigger, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RoutesRecognized} from './events';\nimport {activateRoutes} from './operators/activate_routes';\nimport {applyRedirects} from './operators/apply_redirects';\nimport {checkGuards} from './operators/check_guards';\nimport {recognize} from './operators/recognize';\nimport {resolveData} from './operators/resolve_data';\nimport {switchTap} from './operators/switch_tap';\nimport {DefaultRouteReuseStrategy, RouteReuseStrategy} from './route_reuse_strategy';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {ActivatedRoute, createEmptyState, RouterState, RouterStateSnapshot} from './router_state';\nimport {isNavigationCancelingError, navigationCancelingError, Params} from './shared';\nimport {DefaultUrlHandlingStrategy, UrlHandlingStrategy} from './url_handling_strategy';\nimport {containsTree, createEmptyUrlTree, IsActiveMatchOptions, UrlSerializer, UrlTree} from './url_tree';\nimport {standardizeConfig, validateConfig} from './utils/config';\nimport {Checks, getAllRouteGuards} from './utils/preactivation';\nimport {isUrlTree} from './utils/type_guards';\n\n\n/**\n * @description\n *\n * Options that modify the `Router` URL.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the target URL should be constructed.\n *\n * @see [Router.navigate() method](api/router/Router#navigate)\n * @see [Router.createUrlTree() method](api/router/Router#createurltree)\n * @see [Routing and Navigation guide](guide/router)\n *\n * @publicApi\n */\nexport interface UrlCreationOptions {\n  /**\n   * Specifies a root URI to use for relative navigation.\n   *\n   * For example, consider the following route configuration where the parent route\n   * has two children.\n   *\n   * ```\n   * [{\n   *   path: 'parent',\n   *   component: ParentComponent,\n   *   children: [{\n   *     path: 'list',\n   *     component: ListComponent\n   *   },{\n   *     path: 'child',\n   *     component: ChildComponent\n   *   }]\n   * }]\n   * ```\n   *\n   * The following `go()` function navigates to the `list` route by\n   * interpreting the destination URI as relative to the activated `child`  route\n   *\n   * ```\n   *  @Component({...})\n   *  class ChildComponent {\n   *    constructor(private router: Router, private route: ActivatedRoute) {}\n   *\n   *    go() {\n   *      this.router.navigate(['../list'], { relativeTo: this.route });\n   *    }\n   *  }\n   * ```\n   *\n   * A value of `null` or `undefined` indicates that the navigation commands should be applied\n   * relative to the root.\n   */\n  relativeTo?: ActivatedRoute|null;\n\n  /**\n   * Sets query parameters to the URL.\n   *\n   * ```\n   * // Navigate to /results?page=1\n   * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n   * ```\n   */\n  queryParams?: Params|null;\n\n  /**\n   * Sets the hash fragment for the URL.\n   *\n   * ```\n   * // Navigate to /results#top\n   * this.router.navigate(['/results'], { fragment: 'top' });\n   * ```\n   */\n  fragment?: string;\n\n  /**\n   * How to handle query parameters in the router link for the next navigation.\n   * One of:\n   * * `preserve` : Preserve current parameters.\n   * * `merge` : Merge new with current parameters.\n   *\n   * The \"preserve\" option discards any new query params:\n   * ```\n   * // from /view1?page=1 to/view2?page=1\n   * this.router.navigate(['/view2'], { queryParams: { page: 2 },  queryParamsHandling: \"preserve\"\n   * });\n   * ```\n   * The \"merge\" option appends new query params to the params from the current URL:\n   * ```\n   * // from /view1?page=1 to/view2?page=1&otherKey=2\n   * this.router.navigate(['/view2'], { queryParams: { otherKey: 2 },  queryParamsHandling: \"merge\"\n   * });\n   * ```\n   * In case of a key collision between current parameters and those in the `queryParams` object,\n   * the new value is used.\n   *\n   */\n  queryParamsHandling?: QueryParamsHandling|null;\n\n  /**\n   * When true, preserves the URL fragment for the next navigation\n   *\n   * ```\n   * // Preserve fragment from /results#top to /view#top\n   * this.router.navigate(['/view'], { preserveFragment: true });\n   * ```\n   */\n  preserveFragment?: boolean;\n}\n\n/**\n * @description\n *\n * Options that modify the `Router` navigation strategy.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the navigation should be handled.\n *\n * @see [Router.navigate() method](api/router/Router#navigate)\n * @see [Router.navigateByUrl() method](api/router/Router#navigatebyurl)\n * @see [Routing and Navigation guide](guide/router)\n *\n * @publicApi\n */\nexport interface NavigationBehaviorOptions {\n  /**\n   * When true, navigates without pushing a new state into history.\n   *\n   * ```\n   * // Navigate silently to /view\n   * this.router.navigate(['/view'], { skipLocationChange: true });\n   * ```\n   */\n  skipLocationChange?: boolean;\n\n  /**\n   * When true, navigates while replacing the current state in history.\n   *\n   * ```\n   * // Navigate to /view\n   * this.router.navigate(['/view'], { replaceUrl: true });\n   * ```\n   */\n  replaceUrl?: boolean;\n\n  /**\n   * Developer-defined state that can be passed to any navigation.\n   * Access this value through the `Navigation.extras` object\n   * returned from the [Router.getCurrentNavigation()\n   * method](api/router/Router#getcurrentnavigation) while a navigation is executing.\n   *\n   * After a navigation completes, the router writes an object containing this\n   * value together with a `navigationId` to `history.state`.\n   * The value is written when `location.go()` or `location.replaceState()`\n   * is called before activating this route.\n   *\n   * Note that `history.state` does not pass an object equality test because\n   * the router adds the `navigationId` on each navigation.\n   *\n   */\n  state?: {[k: string]: any};\n}\n\n/**\n * @description\n *\n * Options that modify the `Router` navigation strategy.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the target URL should be constructed or interpreted.\n *\n * @see [Router.navigate() method](api/router/Router#navigate)\n * @see [Router.navigateByUrl() method](api/router/Router#navigatebyurl)\n * @see [Router.createUrlTree() method](api/router/Router#createurltree)\n * @see [Routing and Navigation guide](guide/router)\n * @see UrlCreationOptions\n * @see NavigationBehaviorOptions\n *\n * @publicApi\n */\nexport interface NavigationExtras extends UrlCreationOptions, NavigationBehaviorOptions {}\n\n/**\n * Error handler that is invoked when a navigation error occurs.\n *\n * If the handler returns a value, the navigation Promise is resolved with this value.\n * If the handler throws an exception, the navigation Promise is rejected with\n * the exception.\n *\n * @publicApi\n */\nexport type ErrorHandler = (error: any) => any;\n\nfunction defaultErrorHandler(error: any): any {\n  throw error;\n}\n\nfunction defaultMalformedUriErrorHandler(\n    error: URIError, urlSerializer: UrlSerializer, url: string): UrlTree {\n  return urlSerializer.parse('/');\n}\n\nexport type RestoredState = {\n  [k: string]: any,\n  // TODO(#27607): Remove `navigationId` and `ɵrouterPageId` and move to `ng` or `ɵ` namespace.\n  navigationId: number,\n  // The `ɵ` prefix is there to reduce the chance of colliding with any existing user properties on\n  // the history state.\n  ɵrouterPageId?: number,\n};\n\n/**\n * Information about a navigation operation.\n * Retrieve the most recent navigation object with the\n * [Router.getCurrentNavigation() method](api/router/Router#getcurrentnavigation) .\n *\n * * *id* : The unique identifier of the current navigation.\n * * *initialUrl* : The target URL passed into the `Router#navigateByUrl()` call before navigation.\n * This is the value before the router has parsed or applied redirects to it.\n * * *extractedUrl* : The initial target URL after being parsed with `UrlSerializer.extract()`.\n * * *finalUrl* : The extracted URL after redirects have been applied.\n * This URL may not be available immediately, therefore this property can be `undefined`.\n * It is guaranteed to be set after the `RoutesRecognized` event fires.\n * * *trigger* : Identifies how this navigation was triggered.\n * -- 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n * -- 'popstate'--Triggered by a popstate event.\n * -- 'hashchange'--Triggered by a hashchange event.\n * * *extras* : A `NavigationExtras` options object that controlled the strategy used for this\n * navigation.\n * * *previousNavigation* : The previously successful `Navigation` object. Only one previous\n * navigation is available, therefore this previous `Navigation` object has a `null` value for its\n * own `previousNavigation`.\n *\n * @publicApi\n */\nexport interface Navigation {\n  /**\n   * The unique identifier of the current navigation.\n   */\n  id: number;\n  /**\n   * The target URL passed into the `Router#navigateByUrl()` call before navigation. This is\n   * the value before the router has parsed or applied redirects to it.\n   */\n  initialUrl: string|UrlTree;\n  /**\n   * The initial target URL after being parsed with `UrlSerializer.extract()`.\n   */\n  extractedUrl: UrlTree;\n  /**\n   * The extracted URL after redirects have been applied.\n   * This URL may not be available immediately, therefore this property can be `undefined`.\n   * It is guaranteed to be set after the `RoutesRecognized` event fires.\n   */\n  finalUrl?: UrlTree;\n  /**\n   * Identifies how this navigation was triggered.\n   *\n   * * 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n   * * 'popstate'--Triggered by a popstate event.\n   * * 'hashchange'--Triggered by a hashchange event.\n   */\n  trigger: 'imperative'|'popstate'|'hashchange';\n  /**\n   * Options that controlled the strategy used for this navigation.\n   * See `NavigationExtras`.\n   */\n  extras: NavigationExtras;\n  /**\n   * The previously successful `Navigation` object. Only one previous navigation\n   * is available, therefore this previous `Navigation` object has a `null` value\n   * for its own `previousNavigation`.\n   */\n  previousNavigation: Navigation|null;\n}\n\nexport interface NavigationTransition {\n  id: number;\n  targetPageId: number;\n  currentUrlTree: UrlTree;\n  currentRawUrl: UrlTree;\n  extractedUrl: UrlTree;\n  urlAfterRedirects?: UrlTree;\n  rawUrl: UrlTree;\n  extras: NavigationExtras;\n  resolve: any;\n  reject: any;\n  promise: Promise<boolean>;\n  source: NavigationTrigger;\n  restoredState: RestoredState|null;\n  currentSnapshot: RouterStateSnapshot;\n  targetSnapshot: RouterStateSnapshot|null;\n  currentRouterState: RouterState;\n  targetRouterState: RouterState|null;\n  guards: Checks;\n  guardsResult: boolean|UrlTree|null;\n}\n\n/**\n * @internal\n */\nexport type RouterHook = (snapshot: RouterStateSnapshot, runExtras: {\n  appliedUrlTree: UrlTree,\n  rawUrlTree: UrlTree,\n  skipLocationChange: boolean,\n  replaceUrl: boolean,\n  navigationId: number\n}) => Observable<void>;\n\n/**\n * @internal\n */\nfunction defaultRouterHook(snapshot: RouterStateSnapshot, runExtras: {\n  appliedUrlTree: UrlTree,\n  rawUrlTree: UrlTree,\n  skipLocationChange: boolean,\n  replaceUrl: boolean,\n  navigationId: number\n}): Observable<void> {\n  return of(null) as any;\n}\n\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `true`\n * (exact = true).\n */\nexport const exactMatchOptions: IsActiveMatchOptions = {\n  paths: 'exact',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'exact'\n};\n\n/**\n * The equivalent `IsActiveMatchOptions` options for `Router.isActive` is called with `false`\n * (exact = false).\n */\nexport const subsetMatchOptions: IsActiveMatchOptions = {\n  paths: 'subset',\n  fragment: 'ignored',\n  matrixParams: 'ignored',\n  queryParams: 'subset'\n};\n\n/**\n * @description\n *\n * A service that provides navigation among views and URL manipulation capabilities.\n *\n * @see `Route`.\n * @see [Routing and Navigation Guide](guide/router).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Injectable()\nexport class Router {\n  /**\n   * Represents the activated `UrlTree` that the `Router` is configured to handle (through\n   * `UrlHandlingStrategy`). That is, after we find the route config tree that we're going to\n   * activate, run guards, and are just about to activate the route, we set the currentUrlTree.\n   *\n   * This should match the `browserUrlTree` when a navigation succeeds. If the\n   * `UrlHandlingStrategy.shouldProcessUrl` is `false`, only the `browserUrlTree` is updated.\n   */\n  private currentUrlTree: UrlTree;\n  /**\n   * Meant to represent the entire browser url after a successful navigation. In the life of a\n   * navigation transition:\n   * 1. The rawUrl represents the full URL that's being navigated to\n   * 2. We apply redirects, which might only apply to _part_ of the URL (due to\n   * `UrlHandlingStrategy`).\n   * 3. Right before activation (because we assume activation will succeed), we update the\n   * rawUrlTree to be a combination of the urlAfterRedirects (again, this might only apply to part\n   * of the initial url) and the rawUrl of the transition (which was the original navigation url in\n   * its full form).\n   */\n  private rawUrlTree: UrlTree;\n  /**\n   * Meant to represent the part of the browser url that the `Router` is set up to handle (via the\n   * `UrlHandlingStrategy`). This value is updated immediately after the browser url is updated (or\n   * the browser url update is skipped via `skipLocationChange`). With that, note that\n   * `browserUrlTree` _may not_ reflect the actual browser URL for two reasons:\n   *\n   * 1. `UrlHandlingStrategy` only handles part of the URL\n   * 2. `skipLocationChange` does not update the browser url.\n   *\n   * So to reiterate, `browserUrlTree` only represents the Router's internal understanding of the\n   * current route, either before guards with `urlUpdateStrategy === 'eager'` or right before\n   * activation with `'deferred'`.\n   *\n   * This should match the `currentUrlTree` when the navigation succeeds.\n   */\n  private browserUrlTree: UrlTree;\n  private readonly transitions: BehaviorSubject<NavigationTransition>;\n  private navigations: Observable<NavigationTransition>;\n  private lastSuccessfulNavigation: Navigation|null = null;\n  private currentNavigation: Navigation|null = null;\n  private disposed = false;\n\n  private locationSubscription?: SubscriptionLike;\n  private navigationId: number = 0;\n\n  /**\n   * The id of the currently active page in the router.\n   * Updated to the transition's target id on a successful navigation.\n   *\n   * This is used to track what page the router last activated. When an attempted navigation fails,\n   * the router can then use this to compute how to restore the state back to the previously active\n   * page.\n   */\n  private currentPageId: number = 0;\n  /**\n   * The ɵrouterPageId of whatever page is currently active in the browser history. This is\n   * important for computing the target page id for new navigations because we need to ensure each\n   * page id in the browser history is 1 more than the previous entry.\n   */\n  private get browserPageId(): number|undefined {\n    return (this.location.getState() as RestoredState | null)?.ɵrouterPageId;\n  }\n  private configLoader: RouterConfigLoader;\n  private ngModule: NgModuleRef<any>;\n  private console: Console;\n  private isNgZoneEnabled: boolean = false;\n\n  /**\n   * An event stream for routing events in this NgModule.\n   */\n  public readonly events: Observable<Event> = new Subject<Event>();\n  /**\n   * The current state of routing in this NgModule.\n   */\n  public readonly routerState: RouterState;\n\n  /**\n   * A handler for navigation errors in this NgModule.\n   */\n  errorHandler: ErrorHandler = defaultErrorHandler;\n\n  /**\n   * A handler for errors thrown by `Router.parseUrl(url)`\n   * when `url` contains an invalid character.\n   * The most common case is a `%` sign\n   * that's not encoded and is not part of a percent encoded sequence.\n   */\n  malformedUriErrorHandler:\n      (error: URIError, urlSerializer: UrlSerializer,\n       url: string) => UrlTree = defaultMalformedUriErrorHandler;\n\n  /**\n   * True if at least one navigation event has occurred,\n   * false otherwise.\n   */\n  navigated: boolean = false;\n  private lastSuccessfulId: number = -1;\n\n  /**\n   * Hooks that enable you to pause navigation,\n   * either before or after the preactivation phase.\n   * Used by `RouterModule`.\n   *\n   * @internal\n   */\n  hooks: {\n    beforePreactivation: RouterHook,\n    afterPreactivation: RouterHook\n  } = {beforePreactivation: defaultRouterHook, afterPreactivation: defaultRouterHook};\n\n  /**\n   * A strategy for extracting and merging URLs.\n   * Used for AngularJS to Angular migrations.\n   */\n  urlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\n  /**\n   * A strategy for re-using routes.\n   */\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n\n  /**\n   * How to handle a navigation request to the current URL. One of:\n   *\n   * - `'ignore'` :  The router ignores the request.\n   * - `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n   *\n   * Note that this only configures whether the Route reprocesses the URL and triggers related\n   * action and events like redirects, guards, and resolvers. By default, the router re-uses a\n   * component instance when it re-navigates to the same component type without visiting a different\n   * component first. This behavior is configured by the `RouteReuseStrategy`. In order to reload\n   * routed components on same url navigation, you need to set `onSameUrlNavigation` to `'reload'`\n   * _and_ provide a `RouteReuseStrategy` which returns `false` for `shouldReuseRoute`.\n   */\n  onSameUrlNavigation: 'reload'|'ignore' = 'ignore';\n\n  /**\n   * How to merge parameters, data, and resolved data from parent to child\n   * routes. One of:\n   *\n   * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data\n   * for path-less or component-less routes.\n   * - `'always'` : Inherit parent parameters, data, and resolved data\n   * for all child routes.\n   */\n  paramsInheritanceStrategy: 'emptyOnly'|'always' = 'emptyOnly';\n\n  /**\n   * Determines when the router updates the browser URL.\n   * By default (`\"deferred\"`), updates the browser URL after navigation has finished.\n   * Set to `'eager'` to update the browser URL at the beginning of navigation.\n   * You can choose to update early so that, if navigation fails,\n   * you can show an error message with the URL that failed.\n   */\n  urlUpdateStrategy: 'deferred'|'eager' = 'deferred';\n\n  /**\n   * Enables a bug fix that corrects relative link resolution in components with empty paths.\n   * @see `RouterModule`\n   */\n  relativeLinkResolution: 'legacy'|'corrected' = 'corrected';\n\n  /**\n   * Configures how the Router attempts to restore state when a navigation is cancelled.\n   *\n   * 'replace' - Always uses `location.replaceState` to set the browser state to the state of the\n   * router before the navigation started. This means that if the URL of the browser is updated\n   * _before_ the navigation is canceled, the Router will simply replace the item in history rather\n   * than trying to restore to the previous location in the session history. This happens most\n   * frequently with `urlUpdateStrategy: 'eager'` and navigations with the browser back/forward\n   * buttons.\n   *\n   * 'computed' - Will attempt to return to the same index in the session history that corresponds\n   * to the Angular route when the navigation gets cancelled. For example, if the browser back\n   * button is clicked and the navigation is cancelled, the Router will trigger a forward navigation\n   * and vice versa.\n   *\n   * Note: the 'computed' option is incompatible with any `UrlHandlingStrategy` which only\n   * handles a portion of the URL because the history restoration navigates to the previous place in\n   * the browser history rather than simply resetting a portion of the URL.\n   *\n   * The default value is `replace`.\n   *\n   */\n  canceledNavigationResolution: 'replace'|'computed' = 'replace';\n\n  /**\n   * Creates the router service.\n   */\n  // TODO: vsavkin make internal after the final is out.\n  constructor(\n      private rootComponentType: Type<any>|null, private urlSerializer: UrlSerializer,\n      private rootContexts: ChildrenOutletContexts, private location: Location, injector: Injector,\n      compiler: Compiler, public config: Routes) {\n    const onLoadStart = (r: Route) => this.triggerEvent(new RouteConfigLoadStart(r));\n    const onLoadEnd = (r: Route) => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.ngModule = injector.get(NgModuleRef);\n    this.console = injector.get(Console);\n    const ngZone = injector.get(NgZone);\n    this.isNgZoneEnabled = ngZone instanceof NgZone && NgZone.isInAngularZone();\n\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n    this.browserUrlTree = this.currentUrlTree;\n\n    this.configLoader = new RouterConfigLoader(injector, compiler, onLoadStart, onLoadEnd);\n    this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n\n    this.transitions = new BehaviorSubject<NavigationTransition>({\n      id: 0,\n      targetPageId: 0,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.currentUrlTree,\n      extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),\n      urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),\n      rawUrl: this.currentUrlTree,\n      extras: {},\n      resolve: null,\n      reject: null,\n      promise: Promise.resolve(true),\n      source: 'imperative',\n      restoredState: null,\n      currentSnapshot: this.routerState.snapshot,\n      targetSnapshot: null,\n      currentRouterState: this.routerState,\n      targetRouterState: null,\n      guards: {canActivateChecks: [], canDeactivateChecks: []},\n      guardsResult: null,\n    });\n    this.navigations = this.setupNavigations(this.transitions);\n\n    this.processNavigations();\n  }\n\n  private setupNavigations(transitions: Observable<NavigationTransition>):\n      Observable<NavigationTransition> {\n    const eventsSubject = (this.events as Subject<Event>);\n    return transitions.pipe(\n               filter(t => t.id !== 0),\n\n               // Extract URL\n               map(t =>\n                       ({...t, extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl)} as\n                        NavigationTransition)),\n\n               // Using switchMap so we cancel executing navigations when a new one comes in\n               switchMap(t => {\n                 let completed = false;\n                 let errored = false;\n                 return of(t).pipe(\n                     // Store the Navigation object\n                     tap(t => {\n                       this.currentNavigation = {\n                         id: t.id,\n                         initialUrl: t.currentRawUrl,\n                         extractedUrl: t.extractedUrl,\n                         trigger: t.source,\n                         extras: t.extras,\n                         previousNavigation: this.lastSuccessfulNavigation ?\n                             {...this.lastSuccessfulNavigation, previousNavigation: null} :\n                             null\n                       };\n                     }),\n                     switchMap(t => {\n                       const browserUrlTree = this.browserUrlTree.toString();\n                       const urlTransition = !this.navigated ||\n                           t.extractedUrl.toString() !== browserUrlTree ||\n                           // Navigations which succeed or ones which fail and are cleaned up\n                           // correctly should result in `browserUrlTree` and `currentUrlTree`\n                           // matching. If this is not the case, assume something went wrong and try\n                           // processing the URL again.\n                           browserUrlTree !== this.currentUrlTree.toString();\n                       const processCurrentUrl =\n                           (this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\n                           this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);\n\n\n                       if (processCurrentUrl) {\n                         // If the source of the navigation is from a browser event, the URL is\n                         // already updated. We already need to sync the internal state.\n                         if (isBrowserTriggeredNavigation(t.source)) {\n                           this.browserUrlTree = t.extractedUrl;\n                         }\n                         return of(t).pipe(\n                             // Fire NavigationStart event\n                             switchMap(t => {\n                               const transition = this.transitions.getValue();\n                               eventsSubject.next(new NavigationStart(\n                                   t.id, this.serializeUrl(t.extractedUrl), t.source,\n                                   t.restoredState));\n                               if (transition !== this.transitions.getValue()) {\n                                 return EMPTY;\n                               }\n\n                               // This delay is required to match old behavior that forced\n                               // navigation to always be async\n                               return Promise.resolve(t);\n                             }),\n\n                             // ApplyRedirects\n                             applyRedirects(\n                                 this.ngModule.injector, this.configLoader, this.urlSerializer,\n                                 this.config),\n\n                             // Update the currentNavigation\n                             // `urlAfterRedirects` is guaranteed to be set after this point\n                             tap(t => {\n                               this.currentNavigation = {\n                                 ...this.currentNavigation!,\n                                 finalUrl: t.urlAfterRedirects\n                               };\n                             }),\n\n                             // Recognize\n                             recognize(\n                                 this.rootComponentType, this.config,\n                                 (url) => this.serializeUrl(url), this.paramsInheritanceStrategy,\n                                 this.relativeLinkResolution),\n\n                             // Update URL if in `eager` update mode\n                             tap(t => {\n                               if (this.urlUpdateStrategy === 'eager') {\n                                 if (!t.extras.skipLocationChange) {\n                                   const rawUrl = this.urlHandlingStrategy.merge(\n                                       t.urlAfterRedirects!, t.rawUrl);\n                                   this.setBrowserUrl(rawUrl, t);\n                                 }\n                                 this.browserUrlTree = t.urlAfterRedirects!;\n                               }\n\n                               // Fire RoutesRecognized\n                               const routesRecognized = new RoutesRecognized(\n                                   t.id, this.serializeUrl(t.extractedUrl),\n                                   this.serializeUrl(t.urlAfterRedirects!), t.targetSnapshot!);\n                               eventsSubject.next(routesRecognized);\n                             }));\n                       } else {\n                         const processPreviousUrl = urlTransition && this.rawUrlTree &&\n                             this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree);\n                         /* When the current URL shouldn't be processed, but the previous one was,\n                          * we handle this \"error condition\" by navigating to the previously\n                          * successful URL, but leaving the URL intact.*/\n                         if (processPreviousUrl) {\n                           const {id, extractedUrl, source, restoredState, extras} = t;\n                           const navStart = new NavigationStart(\n                               id, this.serializeUrl(extractedUrl), source, restoredState);\n                           eventsSubject.next(navStart);\n                           const targetSnapshot =\n                               createEmptyState(extractedUrl, this.rootComponentType).snapshot;\n\n                           return of({\n                             ...t,\n                             targetSnapshot,\n                             urlAfterRedirects: extractedUrl,\n                             extras: {...extras, skipLocationChange: false, replaceUrl: false},\n                           });\n                         } else {\n                           /* When neither the current or previous URL can be processed, do nothing\n                            * other than update router's internal reference to the current \"settled\"\n                            * URL. This way the next navigation will be coming from the current URL\n                            * in the browser.\n                            */\n                           this.rawUrlTree = t.rawUrl;\n                           t.resolve(null);\n                           return EMPTY;\n                         }\n                       }\n                     }),\n\n                     // Before Preactivation\n                     switchTap(t => {\n                       const {\n                         targetSnapshot,\n                         id: navigationId,\n                         extractedUrl: appliedUrlTree,\n                         rawUrl: rawUrlTree,\n                         extras: {skipLocationChange, replaceUrl}\n                       } = t;\n                       return this.hooks.beforePreactivation(targetSnapshot!, {\n                         navigationId,\n                         appliedUrlTree,\n                         rawUrlTree,\n                         skipLocationChange: !!skipLocationChange,\n                         replaceUrl: !!replaceUrl,\n                       });\n                     }),\n\n                     // --- GUARDS ---\n                     tap(t => {\n                       const guardsStart = new GuardsCheckStart(\n                           t.id, this.serializeUrl(t.extractedUrl),\n                           this.serializeUrl(t.urlAfterRedirects!), t.targetSnapshot!);\n                       this.triggerEvent(guardsStart);\n                     }),\n\n                     map(t => ({\n                           ...t,\n                           guards: getAllRouteGuards(\n                               t.targetSnapshot!, t.currentSnapshot, this.rootContexts)\n                         })),\n\n                     checkGuards(this.ngModule.injector, (evt: Event) => this.triggerEvent(evt)),\n                     tap(t => {\n                       if (isUrlTree(t.guardsResult)) {\n                         const error: Error&{url?: UrlTree} = navigationCancelingError(\n                             `Redirecting to \"${this.serializeUrl(t.guardsResult)}\"`);\n                         error.url = t.guardsResult;\n                         throw error;\n                       }\n\n                       const guardsEnd = new GuardsCheckEnd(\n                           t.id, this.serializeUrl(t.extractedUrl),\n                           this.serializeUrl(t.urlAfterRedirects!), t.targetSnapshot!,\n                           !!t.guardsResult);\n                       this.triggerEvent(guardsEnd);\n                     }),\n\n                     filter(t => {\n                       if (!t.guardsResult) {\n                         this.restoreHistory(t);\n                         this.cancelNavigationTransition(t, '');\n                         return false;\n                       }\n                       return true;\n                     }),\n\n                     // --- RESOLVE ---\n                     switchTap(t => {\n                       if (t.guards.canActivateChecks.length) {\n                         return of(t).pipe(\n                             tap(t => {\n                               const resolveStart = new ResolveStart(\n                                   t.id, this.serializeUrl(t.extractedUrl),\n                                   this.serializeUrl(t.urlAfterRedirects!), t.targetSnapshot!);\n                               this.triggerEvent(resolveStart);\n                             }),\n                             switchMap(t => {\n                               let dataResolved = false;\n                               return of(t).pipe(\n                                   resolveData(\n                                       this.paramsInheritanceStrategy, this.ngModule.injector),\n                                   tap({\n                                     next: () => dataResolved = true,\n                                     complete: () => {\n                                       if (!dataResolved) {\n                                         this.restoreHistory(t);\n                                         this.cancelNavigationTransition(\n                                             t,\n                                             `At least one route resolver didn't emit any value.`);\n                                       }\n                                     }\n                                   }),\n                               );\n                             }),\n                             tap(t => {\n                               const resolveEnd = new ResolveEnd(\n                                   t.id, this.serializeUrl(t.extractedUrl),\n                                   this.serializeUrl(t.urlAfterRedirects!), t.targetSnapshot!);\n                               this.triggerEvent(resolveEnd);\n                             }));\n                       }\n                       return undefined;\n                     }),\n\n                     // --- AFTER PREACTIVATION ---\n                     switchTap((t: NavigationTransition) => {\n                       const {\n                         targetSnapshot,\n                         id: navigationId,\n                         extractedUrl: appliedUrlTree,\n                         rawUrl: rawUrlTree,\n                         extras: {skipLocationChange, replaceUrl}\n                       } = t;\n                       return this.hooks.afterPreactivation(targetSnapshot!, {\n                         navigationId,\n                         appliedUrlTree,\n                         rawUrlTree,\n                         skipLocationChange: !!skipLocationChange,\n                         replaceUrl: !!replaceUrl,\n                       });\n                     }),\n\n                     map((t: NavigationTransition) => {\n                       const targetRouterState = createRouterState(\n                           this.routeReuseStrategy, t.targetSnapshot!, t.currentRouterState);\n                       return ({...t, targetRouterState});\n                     }),\n\n                     /* Once here, we are about to activate syncronously. The assumption is this\n                        will succeed, and user code may read from the Router service. Therefore\n                        before activation, we need to update router properties storing the current\n                        URL and the RouterState, as well as updated the browser URL. All this should\n                        happen *before* activating. */\n                     tap((t: NavigationTransition) => {\n                       this.currentUrlTree = t.urlAfterRedirects!;\n                       this.rawUrlTree =\n                           this.urlHandlingStrategy.merge(t.urlAfterRedirects!, t.rawUrl);\n\n                       (this as {routerState: RouterState}).routerState = t.targetRouterState!;\n\n                       if (this.urlUpdateStrategy === 'deferred') {\n                         if (!t.extras.skipLocationChange) {\n                           this.setBrowserUrl(this.rawUrlTree, t);\n                         }\n                         this.browserUrlTree = t.urlAfterRedirects!;\n                       }\n                     }),\n\n                     activateRoutes(\n                         this.rootContexts, this.routeReuseStrategy,\n                         (evt: Event) => this.triggerEvent(evt)),\n\n                     tap({\n                       next() {\n                         completed = true;\n                       },\n                       complete() {\n                         completed = true;\n                       }\n                     }),\n                     finalize(() => {\n                       /* When the navigation stream finishes either through error or success, we\n                        * set the `completed` or `errored` flag. However, there are some situations\n                        * where we could get here without either of those being set. For instance, a\n                        * redirect during NavigationStart. Therefore, this is a catch-all to make\n                        * sure the NavigationCancel\n                        * event is fired when a navigation gets cancelled but not caught by other\n                        * means. */\n                       if (!completed && !errored) {\n                         const cancelationReason = `Navigation ID ${\n                             t.id} is not equal to the current navigation id ${this.navigationId}`;\n                         this.cancelNavigationTransition(t, cancelationReason);\n                       }\n                       // Only clear current navigation if it is still set to the one that\n                       // finalized.\n                       if (this.currentNavigation?.id === t.id) {\n                         this.currentNavigation = null;\n                       }\n                     }),\n                     catchError((e) => {\n                       // TODO(atscott): The NavigationTransition `t` used here does not accurately\n                       // reflect the current state of the whole transition because some operations\n                       // return a new object rather than modifying the one in the outermost\n                       // `switchMap`.\n                       //  The fix can likely be to:\n                       //  1. Rename the outer `t` variable so it's not shadowed all the time and\n                       //  confusing\n                       //  2. Keep reassigning to the outer variable after each stage to ensure it\n                       //  gets updated. Or change the implementations to not return a copy.\n                       // Not changed yet because it affects existing code and would need to be\n                       // tested more thoroughly.\n                       errored = true;\n                       /* This error type is issued during Redirect, and is handled as a\n                        * cancellation rather than an error. */\n                       if (isNavigationCancelingError(e)) {\n                         const redirecting = isUrlTree(e.url);\n                         if (!redirecting) {\n                           // Set property only if we're not redirecting. If we landed on a page and\n                           // redirect to `/` route, the new navigation is going to see the `/`\n                           // isn't a change from the default currentUrlTree and won't navigate.\n                           // This is only applicable with initial navigation, so setting\n                           // `navigated` only when not redirecting resolves this scenario.\n                           this.navigated = true;\n                           this.restoreHistory(t, true);\n                         }\n                         const navCancel = new NavigationCancel(\n                             t.id, this.serializeUrl(t.extractedUrl), e.message);\n                         eventsSubject.next(navCancel);\n\n                         // When redirecting, we need to delay resolving the navigation\n                         // promise and push it to the redirect navigation\n                         if (!redirecting) {\n                           t.resolve(false);\n                         } else {\n                           // setTimeout is required so this navigation finishes with\n                           // the return EMPTY below. If it isn't allowed to finish\n                           // processing, there can be multiple navigations to the same\n                           // URL.\n                           setTimeout(() => {\n                             const mergedTree =\n                                 this.urlHandlingStrategy.merge(e.url, this.rawUrlTree);\n                             const extras = {\n                               skipLocationChange: t.extras.skipLocationChange,\n                               // The URL is already updated at this point if we have 'eager' URL\n                               // updates or if the navigation was triggered by the browser (back\n                               // button, URL bar, etc). We want to replace that item in history if\n                               // the navigation is rejected.\n                               replaceUrl: this.urlUpdateStrategy === 'eager' ||\n                                   isBrowserTriggeredNavigation(t.source)\n                             };\n\n                             this.scheduleNavigation(\n                                 mergedTree, 'imperative', null, extras,\n                                 {resolve: t.resolve, reject: t.reject, promise: t.promise});\n                           }, 0);\n                         }\n\n                         /* All other errors should reset to the router's internal URL reference to\n                          * the pre-error state. */\n                       } else {\n                         this.restoreHistory(t, true);\n                         const navError =\n                             new NavigationError(t.id, this.serializeUrl(t.extractedUrl), e);\n                         eventsSubject.next(navError);\n                         try {\n                           t.resolve(this.errorHandler(e));\n                         } catch (ee) {\n                           t.reject(ee);\n                         }\n                       }\n                       return EMPTY;\n                     }));\n                 // TODO(jasonaden): remove cast once g3 is on updated TypeScript\n               })) as any as Observable<NavigationTransition>;\n  }\n\n  /**\n   * @internal\n   * TODO: this should be removed once the constructor of the router made internal\n   */\n  resetRootComponentType(rootComponentType: Type<any>): void {\n    this.rootComponentType = rootComponentType;\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.routerState.root.component = this.rootComponentType;\n  }\n\n  private setTransition(t: Partial<NavigationTransition>): void {\n    this.transitions.next({...this.transitions.value, ...t});\n  }\n\n  /**\n   * Sets up the location change listener and performs the initial navigation.\n   */\n  initialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {replaceUrl: true});\n    }\n  }\n\n  /**\n   * Sets up the location change listener. This listener detects navigations triggered from outside\n   * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router\n   * navigation so that the correct events, guards, etc. are triggered.\n   */\n  setUpLocationChangeListener(): void {\n    // Don't need to use Zone.wrap any more, because zone.js\n    // already patch onPopState, so location change callback will\n    // run into ngZone\n    if (!this.locationSubscription) {\n      this.locationSubscription = this.location.subscribe(event => {\n        const source = event['type'] === 'popstate' ? 'popstate' : 'hashchange';\n        if (source === 'popstate') {\n          // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS\n          // hybrid apps.\n          setTimeout(() => {\n            const extras: NavigationExtras = {replaceUrl: true};\n            // Navigations coming from Angular router have a navigationId state\n            // property. When this exists, restore the state.\n            const state = event.state?.navigationId ? event.state : null;\n            if (state) {\n              const stateCopy = {...state} as Partial<RestoredState>;\n              delete stateCopy.navigationId;\n              delete stateCopy.ɵrouterPageId;\n              if (Object.keys(stateCopy).length !== 0) {\n                extras.state = stateCopy;\n              }\n            }\n            const urlTree = this.parseUrl(event['url']!);\n            this.scheduleNavigation(urlTree, source, state, extras);\n          }, 0);\n        }\n      });\n    }\n  }\n\n  /** The current URL. */\n  get url(): string {\n    return this.serializeUrl(this.currentUrlTree);\n  }\n\n  /**\n   * Returns the current `Navigation` object when the router is navigating,\n   * and `null` when idle.\n   */\n  getCurrentNavigation(): Navigation|null {\n    return this.currentNavigation;\n  }\n\n  /** @internal */\n  triggerEvent(event: Event): void {\n    (this.events as Subject<Event>).next(event);\n  }\n\n  /**\n   * Resets the route configuration used for navigation and generating links.\n   *\n   * @param config The route array for the new configuration.\n   *\n   * @usageNotes\n   *\n   * ```\n   * router.resetConfig([\n   *  { path: 'team/:id', component: TeamCmp, children: [\n   *    { path: 'simple', component: SimpleCmp },\n   *    { path: 'user/:name', component: UserCmp }\n   *  ]}\n   * ]);\n   * ```\n   */\n  resetConfig(config: Routes): void {\n    validateConfig(config);\n    this.config = config.map(standardizeConfig);\n    this.navigated = false;\n    this.lastSuccessfulId = -1;\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  /** Disposes of the router. */\n  dispose(): void {\n    this.transitions.complete();\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription = undefined;\n    }\n    this.disposed = true;\n  }\n\n  /**\n   * Appends URL segments to the current URL tree to create a new URL tree.\n   *\n   * @param commands An array of URL fragments with which to construct the new URL tree.\n   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n   * segments, followed by the parameters for each segment.\n   * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`\n   * property of the options object, if supplied.\n   * @param navigationExtras Options that control the navigation strategy.\n   * @returns The new URL tree.\n   *\n   * @usageNotes\n   *\n   * ```\n   * // create /team/33/user/11\n   * router.createUrlTree(['/team', 33, 'user', 11]);\n   *\n   * // create /team/33;expand=true/user/11\n   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n   *\n   * // you can collapse static segments like this (this works only with the first passed-in value):\n   * router.createUrlTree(['/team/33/user', userId]);\n   *\n   * // If the first segment can contain slashes, and you do not want the router to split it,\n   * // you can do the following:\n   * router.createUrlTree([{segmentPath: '/one/two'}]);\n   *\n   * // create /team/33/(user/11//right:chat)\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n   *\n   * // remove the right secondary node\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n   *\n   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n   *\n   * // navigate to /team/33/user/11/details\n   * router.createUrlTree(['details'], {relativeTo: route});\n   *\n   * // navigate to /team/33/user/22\n   * router.createUrlTree(['../22'], {relativeTo: route});\n   *\n   * // navigate to /team/44/user/22\n   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n   *\n   * Note that a value of `null` or `undefined` for `relativeTo` indicates that the\n   * tree should be created relative to the root.\n   * ```\n   */\n  createUrlTree(commands: any[], navigationExtras: UrlCreationOptions = {}): UrlTree {\n    const {relativeTo, queryParams, fragment, queryParamsHandling, preserveFragment} =\n        navigationExtras;\n    const a = relativeTo || this.routerState.root;\n    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let q: Params|null = null;\n    switch (queryParamsHandling) {\n      case 'merge':\n        q = {...this.currentUrlTree.queryParams, ...queryParams};\n        break;\n      case 'preserve':\n        q = this.currentUrlTree.queryParams;\n        break;\n      default:\n        q = queryParams || null;\n    }\n    if (q !== null) {\n      q = this.removeEmptyProps(q);\n    }\n    return createUrlTree(a, this.currentUrlTree, commands, q, f ?? null);\n  }\n\n  /**\n   * Navigates to a view using an absolute route path.\n   *\n   * @param url An absolute path for a defined route. The function does not apply any delta to the\n   *     current URL.\n   * @param extras An object containing properties that modify the navigation strategy.\n   *\n   * @returns A Promise that resolves to 'true' when navigation succeeds,\n   * to 'false' when navigation fails, or is rejected on error.\n   *\n   * @usageNotes\n   *\n   * The following calls request navigation to an absolute path.\n   *\n   * ```\n   * router.navigateByUrl(\"/team/33/user/11\");\n   *\n   * // Navigate without updating the URL\n   * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n   * ```\n   *\n   * @see [Routing and Navigation guide](guide/router)\n   *\n   */\n  navigateByUrl(url: string|UrlTree, extras: NavigationBehaviorOptions = {\n    skipLocationChange: false\n  }): Promise<boolean> {\n    if (typeof ngDevMode === 'undefined' ||\n        ngDevMode && this.isNgZoneEnabled && !NgZone.isInAngularZone()) {\n      this.console.warn(\n          `Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);\n    }\n\n    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n  }\n\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no starting route is provided, the navigation is absolute.\n   *\n   * @param commands An array of URL fragments with which to construct the target URL.\n   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n   * segments, followed by the parameters for each segment.\n   * The fragments are applied to the current URL or the one provided  in the `relativeTo` property\n   * of the options object, if supplied.\n   * @param extras An options object that determines how the URL should be constructed or\n   *     interpreted.\n   *\n   * @returns A Promise that resolves to `true` when navigation succeeds, to `false` when navigation\n   *     fails,\n   * or is rejected on error.\n   *\n   * @usageNotes\n   *\n   * The following calls request navigation to a dynamic route path relative to the current URL.\n   *\n   * ```\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n   *\n   * // Navigate without updating the URL, overriding the default behavior\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n   * ```\n   *\n   * @see [Routing and Navigation guide](guide/router)\n   *\n   */\n  navigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    validateCommands(commands);\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n\n  /** Serializes a `UrlTree` into a string */\n  serializeUrl(url: UrlTree): string {\n    return this.urlSerializer.serialize(url);\n  }\n\n  /** Parses a string into a `UrlTree` */\n  parseUrl(url: string): UrlTree {\n    let urlTree: UrlTree;\n    try {\n      urlTree = this.urlSerializer.parse(url);\n    } catch (e) {\n      urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);\n    }\n    return urlTree;\n  }\n\n  /**\n   * Returns whether the url is activated.\n   *\n   * @deprecated\n   * Use `IsActiveMatchOptions` instead.\n   *\n   * - The equivalent `IsActiveMatchOptions` for `true` is\n   * `{paths: 'exact', queryParams: 'exact', fragment: 'ignored', matrixParams: 'ignored'}`.\n   * - The equivalent for `false` is\n   * `{paths: 'subset', queryParams: 'subset', fragment: 'ignored', matrixParams: 'ignored'}`.\n   */\n  isActive(url: string|UrlTree, exact: boolean): boolean;\n  /**\n   * Returns whether the url is activated.\n   */\n  isActive(url: string|UrlTree, matchOptions: IsActiveMatchOptions): boolean;\n  /** @internal */\n  isActive(url: string|UrlTree, matchOptions: boolean|IsActiveMatchOptions): boolean;\n  isActive(url: string|UrlTree, matchOptions: boolean|IsActiveMatchOptions): boolean {\n    let options: IsActiveMatchOptions;\n    if (matchOptions === true) {\n      options = {...exactMatchOptions};\n    } else if (matchOptions === false) {\n      options = {...subsetMatchOptions};\n    } else {\n      options = matchOptions;\n    }\n    if (isUrlTree(url)) {\n      return containsTree(this.currentUrlTree, url, options);\n    }\n\n    const urlTree = this.parseUrl(url);\n    return containsTree(this.currentUrlTree, urlTree, options);\n  }\n\n  private removeEmptyProps(params: Params): Params {\n    return Object.keys(params).reduce((result: Params, key: string) => {\n      const value: any = params[key];\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n\n  private processNavigations(): void {\n    this.navigations.subscribe(\n        t => {\n          this.navigated = true;\n          this.lastSuccessfulId = t.id;\n          this.currentPageId = t.targetPageId;\n          (this.events as Subject<Event>)\n              .next(new NavigationEnd(\n                  t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree)));\n          this.lastSuccessfulNavigation = this.currentNavigation;\n          t.resolve(true);\n        },\n        e => {\n          this.console.warn(`Unhandled Navigation Error: ${e}`);\n        });\n  }\n\n  private scheduleNavigation(\n      rawUrl: UrlTree, source: NavigationTrigger, restoredState: RestoredState|null,\n      extras: NavigationExtras,\n      priorPromise?: {resolve: any, reject: any, promise: Promise<boolean>}): Promise<boolean> {\n    if (this.disposed) {\n      return Promise.resolve(false);\n    }\n\n    // Duplicate navigations may be triggered by attempts to sync AngularJS and\n    // Angular router states. We have the setTimeout in the location listener to\n    // ensure the imperative nav is scheduled before the browser nav.\n    const lastNavigation = this.transitions.value;\n    const browserNavPrecededByRouterNav = isBrowserTriggeredNavigation(source) && lastNavigation &&\n        !isBrowserTriggeredNavigation(lastNavigation.source);\n    const navToSameUrl = lastNavigation.rawUrl.toString() === rawUrl.toString();\n    const lastNavigationInProgress = lastNavigation.id === this.currentNavigation?.id;\n    // We consider duplicates as ones that goes to the same URL while the first\n    // is still processing.\n    const isDuplicateNav = navToSameUrl && lastNavigationInProgress;\n    if (browserNavPrecededByRouterNav && isDuplicateNav) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    let resolve: any;\n    let reject: any;\n    let promise: Promise<boolean>;\n    if (priorPromise) {\n      resolve = priorPromise.resolve;\n      reject = priorPromise.reject;\n      promise = priorPromise.promise;\n\n    } else {\n      promise = new Promise<boolean>((res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n    }\n\n    const id = ++this.navigationId;\n    let targetPageId: number;\n    if (this.canceledNavigationResolution === 'computed') {\n      const isInitialPage = this.currentPageId === 0;\n      if (isInitialPage) {\n        restoredState = this.location.getState() as RestoredState | null;\n      }\n      // If the `ɵrouterPageId` exist in the state then `targetpageId` should have the value of\n      // `ɵrouterPageId`. This is the case for something like a page refresh where we assign the\n      // target id to the previously set value for that page.\n      if (restoredState && restoredState.ɵrouterPageId) {\n        targetPageId = restoredState.ɵrouterPageId;\n      } else {\n        // If we're replacing the URL or doing a silent navigation, we do not want to increment the\n        // page id because we aren't pushing a new entry to history.\n        if (extras.replaceUrl || extras.skipLocationChange) {\n          targetPageId = this.browserPageId ?? 0;\n        } else {\n          targetPageId = (this.browserPageId ?? 0) + 1;\n        }\n      }\n    } else {\n      // This is unused when `canceledNavigationResolution` is not computed.\n      targetPageId = 0;\n    }\n\n    this.setTransition({\n      id,\n      targetPageId,\n      source,\n      restoredState,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.rawUrlTree,\n      rawUrl,\n      extras,\n      resolve,\n      reject,\n      promise,\n      currentSnapshot: this.routerState.snapshot,\n      currentRouterState: this.routerState\n    });\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => {\n      return Promise.reject(e);\n    });\n  }\n\n  private setBrowserUrl(url: UrlTree, t: NavigationTransition) {\n    const path = this.urlSerializer.serialize(url);\n    const state = {...t.extras.state, ...this.generateNgRouterState(t.id, t.targetPageId)};\n    if (this.location.isCurrentPathEqualTo(path) || !!t.extras.replaceUrl) {\n      this.location.replaceState(path, '', state);\n    } else {\n      this.location.go(path, '', state);\n    }\n  }\n\n  /**\n   * Performs the necessary rollback action to restore the browser URL to the\n   * state before the transition.\n   */\n  private restoreHistory(t: NavigationTransition, restoringFromCaughtError = false) {\n    if (this.canceledNavigationResolution === 'computed') {\n      const targetPagePosition = this.currentPageId - t.targetPageId;\n      // The navigator change the location before triggered the browser event,\n      // so we need to go back to the current url if the navigation is canceled.\n      // Also, when navigation gets cancelled while using url update strategy eager, then we need to\n      // go back. Because, when `urlUpdateSrategy` is `eager`; `setBrowserUrl` method is called\n      // before any verification.\n      const browserUrlUpdateOccurred =\n          (t.source === 'popstate' || this.urlUpdateStrategy === 'eager' ||\n           this.currentUrlTree === this.currentNavigation?.finalUrl);\n      if (browserUrlUpdateOccurred && targetPagePosition !== 0) {\n        this.location.historyGo(targetPagePosition);\n      } else if (\n          this.currentUrlTree === this.currentNavigation?.finalUrl && targetPagePosition === 0) {\n        // We got to the activation stage (where currentUrlTree is set to the navigation's\n        // finalUrl), but we weren't moving anywhere in history (skipLocationChange or replaceUrl).\n        // We still need to reset the router state back to what it was when the navigation started.\n        this.resetState(t);\n        // TODO(atscott): resetting the `browserUrlTree` should really be done in `resetState`.\n        // Investigate if this can be done by running TGP.\n        this.browserUrlTree = t.currentUrlTree;\n        this.resetUrlToCurrentUrlTree();\n      } else {\n        // The browser URL and router state was not updated before the navigation cancelled so\n        // there's no restoration needed.\n      }\n    } else if (this.canceledNavigationResolution === 'replace') {\n      // TODO(atscott): It seems like we should _always_ reset the state here. It would be a no-op\n      // for `deferred` navigations that haven't change the internal state yet because guards\n      // reject. For 'eager' navigations, it seems like we also really should reset the state\n      // because the navigation was cancelled. Investigate if this can be done by running TGP.\n      if (restoringFromCaughtError) {\n        this.resetState(t);\n      }\n      this.resetUrlToCurrentUrlTree();\n    }\n  }\n\n  private resetState(t: NavigationTransition): void {\n    (this as {routerState: RouterState}).routerState = t.currentRouterState;\n    this.currentUrlTree = t.currentUrlTree;\n    // Note here that we use the urlHandlingStrategy to get the reset `rawUrlTree` because it may be\n    // configured to handle only part of the navigation URL. This means we would only want to reset\n    // the part of the navigation handled by the Angular router rather than the whole URL. In\n    // addition, the URLHandlingStrategy may be configured to specifically preserve parts of the URL\n    // when merging, such as the query params so they are not lost on a refresh.\n    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);\n  }\n\n  private resetUrlToCurrentUrlTree(): void {\n    this.location.replaceState(\n        this.urlSerializer.serialize(this.rawUrlTree), '',\n        this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));\n  }\n\n  private cancelNavigationTransition(t: NavigationTransition, reason: string) {\n    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), reason);\n    this.triggerEvent(navCancel);\n    t.resolve(false);\n  }\n\n  private generateNgRouterState(navigationId: number, routerPageId?: number) {\n    if (this.canceledNavigationResolution === 'computed') {\n      return {navigationId, ɵrouterPageId: routerPageId};\n    }\n    return {navigationId};\n  }\n}\n\nfunction validateCommands(commands: string[]): void {\n  for (let i = 0; i < commands.length; i++) {\n    const cmd = commands[i];\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n\nfunction isBrowserTriggeredNavigation(source: 'imperative'|'popstate'|'hashchange') {\n  return source !== 'imperative';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\nimport {applyRedirects as applyRedirectsFn} from '../apply_redirects';\nimport {Routes} from '../config';\nimport {NavigationTransition} from '../router';\nimport {RouterConfigLoader} from '../router_config_loader';\nimport {UrlSerializer} from '../url_tree';\n\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    config: Routes): MonoTypeOperatorFunction<NavigationTransition> {\n  return switchMap(\n      t => applyRedirectsFn(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config)\n               .pipe(map(urlAfterRedirects => ({...t, urlAfterRedirects}))));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {map, mergeMap} from 'rxjs/operators';\n\nimport {Route} from '../config';\nimport {recognize as recognizeFn} from '../recognize';\nimport {NavigationTransition} from '../router';\nimport {UrlTree} from '../url_tree';\n\nexport function recognize(\n    rootComponentType: Type<any>|null, config: Route[], serializer: (url: UrlTree) => string,\n    paramsInheritanceStrategy: 'emptyOnly'|'always',\n    relativeLinkResolution: 'legacy'|'corrected'): MonoTypeOperatorFunction<NavigationTransition> {\n  return mergeMap(\n      t => recognizeFn(\n               rootComponentType, config, t.urlAfterRedirects!, serializer(t.urlAfterRedirects!),\n               paramsInheritanceStrategy, relativeLinkResolution)\n               .pipe(map(targetSnapshot => ({...t, targetSnapshot}))));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {concat, defer, from, MonoTypeOperatorFunction, Observable, of} from 'rxjs';\nimport {concatMap, first, map, mergeMap} from 'rxjs/operators';\n\nimport {ActivationStart, ChildActivationStart, Event} from '../events';\nimport {CanActivateChildFn, CanActivateFn, CanDeactivateFn} from '../interfaces';\nimport {NavigationTransition} from '../router';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from '../router_state';\nimport {UrlTree} from '../url_tree';\nimport {wrapIntoObservable} from '../utils/collection';\nimport {CanActivate, CanDeactivate, getCanActivateChild, getToken} from '../utils/preactivation';\nimport {isBoolean, isCanActivate, isCanActivateChild, isCanDeactivate, isFunction} from '../utils/type_guards';\n\nimport {prioritizedGuardValue} from './prioritized_guard_value';\n\nexport function checkGuards(moduleInjector: Injector, forwardEvent?: (evt: Event) => void):\n    MonoTypeOperatorFunction<NavigationTransition> {\n  return mergeMap(t => {\n    const {targetSnapshot, currentSnapshot, guards: {canActivateChecks, canDeactivateChecks}} = t;\n    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n      return of({...t, guardsResult: true});\n    }\n\n    return runCanDeactivateChecks(\n               canDeactivateChecks, targetSnapshot!, currentSnapshot, moduleInjector)\n        .pipe(\n            mergeMap(canDeactivate => {\n              return canDeactivate && isBoolean(canDeactivate) ?\n                  runCanActivateChecks(\n                      targetSnapshot!, canActivateChecks, moduleInjector, forwardEvent) :\n                  of(canDeactivate);\n            }),\n            map(guardsResult => ({...t, guardsResult})));\n  });\n}\n\nfunction runCanDeactivateChecks(\n    checks: CanDeactivate[], futureRSS: RouterStateSnapshot, currRSS: RouterStateSnapshot,\n    moduleInjector: Injector) {\n  return from(checks).pipe(\n      mergeMap(\n          check =>\n              runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector)),\n      first(result => {\n        return result !== true;\n      }, true as boolean | UrlTree));\n}\n\nfunction runCanActivateChecks(\n    futureSnapshot: RouterStateSnapshot, checks: CanActivate[], moduleInjector: Injector,\n    forwardEvent?: (evt: Event) => void) {\n  return from(checks).pipe(\n      concatMap((check: CanActivate) => {\n        return concat(\n            fireChildActivationStart(check.route.parent, forwardEvent),\n            fireActivationStart(check.route, forwardEvent),\n            runCanActivateChild(futureSnapshot, check.path, moduleInjector),\n            runCanActivate(futureSnapshot, check.route, moduleInjector));\n      }),\n      first(result => {\n        return result !== true;\n      }, true as boolean | UrlTree));\n}\n\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireActivationStart(\n    snapshot: ActivatedRouteSnapshot|null,\n    forwardEvent?: (evt: Event) => void): Observable<boolean> {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ActivationStart(snapshot));\n  }\n  return of(true);\n}\n\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireChildActivationStart(\n    snapshot: ActivatedRouteSnapshot|null,\n    forwardEvent?: (evt: Event) => void): Observable<boolean> {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ChildActivationStart(snapshot));\n  }\n  return of(true);\n}\n\nfunction runCanActivate(\n    futureRSS: RouterStateSnapshot, futureARS: ActivatedRouteSnapshot,\n    moduleInjector: Injector): Observable<boolean|UrlTree> {\n  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n  if (!canActivate || canActivate.length === 0) return of(true);\n\n  const canActivateObservables = canActivate.map((c: any) => {\n    return defer(() => {\n      const guard = getToken(c, futureARS, moduleInjector);\n      let observable;\n      if (isCanActivate(guard)) {\n        observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));\n      } else if (isFunction<CanActivateFn>(guard)) {\n        observable = wrapIntoObservable(guard(futureARS, futureRSS));\n      } else {\n        throw new Error('Invalid CanActivate guard');\n      }\n      return observable.pipe(first());\n    });\n  });\n  return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\n\nfunction runCanActivateChild(\n    futureRSS: RouterStateSnapshot, path: ActivatedRouteSnapshot[],\n    moduleInjector: Injector): Observable<boolean|UrlTree> {\n  const futureARS = path[path.length - 1];\n\n  const canActivateChildGuards = path.slice(0, path.length - 1)\n                                     .reverse()\n                                     .map(p => getCanActivateChild(p))\n                                     .filter(_ => _ !== null);\n\n  const canActivateChildGuardsMapped = canActivateChildGuards.map((d: any) => {\n    return defer(() => {\n      const guardsMapped = d.guards.map((c: any) => {\n        const guard = getToken(c, d.node, moduleInjector);\n        let observable;\n        if (isCanActivateChild(guard)) {\n          observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));\n        } else if (isFunction<CanActivateChildFn>(guard)) {\n          observable = wrapIntoObservable(guard(futureARS, futureRSS));\n        } else {\n          throw new Error('Invalid CanActivateChild guard');\n        }\n        return observable.pipe(first());\n      });\n      return of(guardsMapped).pipe(prioritizedGuardValue());\n    });\n  });\n  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\n\nfunction runCanDeactivate(\n    component: Object|null, currARS: ActivatedRouteSnapshot, currRSS: RouterStateSnapshot,\n    futureRSS: RouterStateSnapshot, moduleInjector: Injector): Observable<boolean|UrlTree> {\n  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n  if (!canDeactivate || canDeactivate.length === 0) return of(true);\n  const canDeactivateObservables = canDeactivate.map((c: any) => {\n    const guard = getToken(c, currARS, moduleInjector);\n    let observable;\n    if (isCanDeactivate(guard)) {\n      observable = wrapIntoObservable(guard.canDeactivate(component!, currARS, currRSS, futureRSS));\n    } else if (isFunction<CanDeactivateFn<any>>(guard)) {\n      observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));\n    } else {\n      throw new Error('Invalid CanDeactivate guard');\n    }\n    return observable.pipe(first());\n  });\n  return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {EMPTY, from, MonoTypeOperatorFunction, Observable, of} from 'rxjs';\nimport {concatMap, map, mergeMap, takeLast, tap} from 'rxjs/operators';\n\nimport {ResolveData} from '../config';\nimport {NavigationTransition} from '../router';\nimport {ActivatedRouteSnapshot, inheritedParamsDataResolve, RouterStateSnapshot} from '../router_state';\nimport {wrapIntoObservable} from '../utils/collection';\nimport {getToken} from '../utils/preactivation';\n\nexport function resolveData(\n    paramsInheritanceStrategy: 'emptyOnly'|'always',\n    moduleInjector: Injector): MonoTypeOperatorFunction<NavigationTransition> {\n  return mergeMap(t => {\n    const {targetSnapshot, guards: {canActivateChecks}} = t;\n\n    if (!canActivateChecks.length) {\n      return of(t);\n    }\n    let canActivateChecksResolved = 0;\n    return from(canActivateChecks)\n        .pipe(\n            concatMap(\n                check => runResolve(\n                    check.route, targetSnapshot!, paramsInheritanceStrategy, moduleInjector)),\n            tap(() => canActivateChecksResolved++),\n            takeLast(1),\n            mergeMap(_ => canActivateChecksResolved === canActivateChecks.length ? of(t) : EMPTY),\n        );\n  });\n}\n\nfunction runResolve(\n    futureARS: ActivatedRouteSnapshot, futureRSS: RouterStateSnapshot,\n    paramsInheritanceStrategy: 'emptyOnly'|'always', moduleInjector: Injector) {\n  const resolve = futureARS._resolve;\n  return resolveNode(resolve, futureARS, futureRSS, moduleInjector)\n      .pipe(map((resolvedData: any) => {\n        futureARS._resolvedData = resolvedData;\n        futureARS.data = {\n          ...futureARS.data,\n          ...inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve\n        };\n        return null;\n      }));\n}\n\nfunction resolveNode(\n    resolve: ResolveData, futureARS: ActivatedRouteSnapshot, futureRSS: RouterStateSnapshot,\n    moduleInjector: Injector): Observable<any> {\n  const keys = Object.keys(resolve);\n  if (keys.length === 0) {\n    return of({});\n  }\n  const data: {[k: string]: any} = {};\n  return from(keys).pipe(\n      mergeMap(\n          (key: string) => getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n                               .pipe(tap((value: any) => {\n                                 data[key] = value;\n                               }))),\n      takeLast(1),\n      mergeMap(() => {\n        // Ensure all resolvers returned values, otherwise don't emit any \"next\" and just complete\n        // the chain which will cancel navigation\n        if (Object.keys(data).length === keys.length) {\n          return of(data);\n        }\n        return EMPTY;\n      }),\n  );\n}\n\nfunction getResolver(\n    injectionToken: any, futureARS: ActivatedRouteSnapshot, futureRSS: RouterStateSnapshot,\n    moduleInjector: Injector): Observable<any> {\n  const resolver = getToken(injectionToken, futureARS, moduleInjector);\n  return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) :\n                            wrapIntoObservable(resolver(futureARS, futureRSS));\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * The specified function will also be called when the subscriber explicitly unsubscribes.\n *\n * ## Examples\n * Execute callback function when the observable completes\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { take, finalize } from 'rxjs/operators';\n *\n * // emit value in sequence every 1 second\n * const source = interval(1000);\n * const example = source.pipe(\n *   take(5), //take only the first 5 values\n *   finalize(() => console.log('Sequence complete')) // Execute when the observable completes\n * )\n * const subscribe = example.subscribe(val => console.log(val));\n *\n * // results:\n * //   0\n * //   1\n * //   2\n * //   3\n * //   4\n * //   'Sequence complete'\n * ```\n *\n * Execute callback function when the subscriber explicitly unsubscribes\n *\n * ```ts\n * import { interval, timer, noop } from 'rxjs';\n * import { finalize, tap } from 'rxjs/operators';\n *\n * const source = interval(100).pipe(\n *   finalize(() => console.log('[finalize] Called')),\n *   tap({\n *     next: () => console.log('[next] Called'),\n *     error: () => console.log('[error] Not called'),\n *     complete: () => console.log('[tap complete] Not called')\n *   })\n * );\n *\n * const sub = source.subscribe({\n *   next: x => console.log(x),\n *   error: noop,\n *   complete: () => console.log('[complete] Not called')\n * });\n *\n * timer(150).subscribe(() => sub.unsubscribe());\n *\n * // results:\n * //   '[next] Called'\n * //   0\n * //   '[finalize] Called'\n * ```\n *\n * @param {function} callback Function to be called when source terminates.\n * @return A function that returns an Observable that mirrors the source, but\n * will call the specified function on termination.\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.\n    // REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, Injectable, Injector, NgModuleRef, OnDestroy} from '@angular/core';\nimport {from, Observable, of, Subscription} from 'rxjs';\nimport {catchError, concatMap, filter, map, mergeAll, mergeMap} from 'rxjs/operators';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {Event, NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart} from './events';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nexport abstract class PreloadingStrategy {\n  abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return fn().pipe(catchError(() => of(null)));\n  }\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\nexport class NoPreloading implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return of(null);\n  }\n}\n\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\n@Injectable()\nexport class RouterPreloader implements OnDestroy {\n  private loader: RouterConfigLoader;\n  private subscription?: Subscription;\n\n  constructor(\n      private router: Router, compiler: Compiler, private injector: Injector,\n      private preloadingStrategy: PreloadingStrategy) {\n    const onStartLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadStart(r));\n    const onEndLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.loader = new RouterConfigLoader(injector, compiler, onStartLoad, onEndLoad);\n  }\n\n  setUpPreloading(): void {\n    this.subscription =\n        this.router.events\n            .pipe(filter((e: Event) => e instanceof NavigationEnd), concatMap(() => this.preload()))\n            .subscribe(() => {});\n  }\n\n  preload(): Observable<any> {\n    const ngModule = this.injector.get(NgModuleRef);\n    return this.processRoutes(ngModule, this.router.config);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private processRoutes(ngModule: NgModuleRef<any>, routes: Routes): Observable<void> {\n    const res: Observable<any>[] = [];\n    for (const route of routes) {\n      // we already have the config loaded, just recurse\n      if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n        const childConfig = route._loadedConfig;\n        res.push(this.processRoutes(childConfig.module, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (route.loadChildren && !route.canLoad) {\n        res.push(this.preloadConfig(ngModule, route));\n\n        // recurse into children\n      } else if (route.children) {\n        res.push(this.processRoutes(ngModule, route.children));\n      }\n    }\n    return from(res).pipe(mergeAll(), map((_) => void 0));\n  }\n\n  private preloadConfig(ngModule: NgModuleRef<any>, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const loaded$ = route._loadedConfig ? of(route._loadedConfig) :\n                                            this.loader.load(ngModule.injector, route);\n      return loaded$.pipe(mergeMap((config: LoadedRouterConfig) => {\n        route._loadedConfig = config;\n        return this.processRoutes(config.module, config.routes);\n      }));\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportScroller} from '@angular/common';\nimport {Injectable, OnDestroy} from '@angular/core';\nimport {Unsubscribable} from 'rxjs';\n\nimport {NavigationEnd, NavigationStart, Scroll} from './events';\nimport {Router} from './router';\n\n@Injectable()\nexport class RouterScroller implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  private routerEventsSubscription!: Unsubscribable;\n  // TODO(issue/24571): remove '!'.\n  private scrollEventsSubscription!: Unsubscribable;\n\n  private lastId = 0;\n  private lastSource: 'imperative'|'popstate'|'hashchange'|undefined = 'imperative';\n  private restoredId = 0;\n  private store: {[key: string]: [number, number]} = {};\n\n  constructor(\n      private router: Router,\n      /** @docsNotRequired */ public readonly viewportScroller: ViewportScroller, private options: {\n        scrollPositionRestoration?: 'disabled'|'enabled'|'top',\n        anchorScrolling?: 'disabled'|'enabled'\n      } = {}) {\n    // Default both options to 'disabled'\n    options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';\n    options.anchorScrolling = options.anchorScrolling || 'disabled';\n  }\n\n  init(): void {\n    // we want to disable the automatic scrolling because having two places\n    // responsible for scrolling results race conditions, especially given\n    // that browser don't implement this behavior consistently\n    if (this.options.scrollPositionRestoration !== 'disabled') {\n      this.viewportScroller.setHistoryScrollRestoration('manual');\n    }\n    this.routerEventsSubscription = this.createScrollEvents();\n    this.scrollEventsSubscription = this.consumeScrollEvents();\n  }\n\n  private createScrollEvents() {\n    return this.router.events.subscribe(e => {\n      if (e instanceof NavigationStart) {\n        // store the scroll position of the current stable navigations.\n        this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n        this.lastSource = e.navigationTrigger;\n        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n      } else if (e instanceof NavigationEnd) {\n        this.lastId = e.id;\n        this.scheduleScrollEvent(e, this.router.parseUrl(e.urlAfterRedirects).fragment);\n      }\n    });\n  }\n\n  private consumeScrollEvents() {\n    return this.router.events.subscribe(e => {\n      if (!(e instanceof Scroll)) return;\n      // a popstate event. The pop state event will always ignore anchor scrolling.\n      if (e.position) {\n        if (this.options.scrollPositionRestoration === 'top') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        } else if (this.options.scrollPositionRestoration === 'enabled') {\n          this.viewportScroller.scrollToPosition(e.position);\n        }\n        // imperative navigation \"forward\"\n      } else {\n        if (e.anchor && this.options.anchorScrolling === 'enabled') {\n          this.viewportScroller.scrollToAnchor(e.anchor);\n        } else if (this.options.scrollPositionRestoration !== 'disabled') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        }\n      }\n    });\n  }\n\n  private scheduleScrollEvent(routerEvent: NavigationEnd, anchor: string|null): void {\n    this.router.triggerEvent(new Scroll(\n        routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n  }\n\n  /** @nodoc */\n  ngOnDestroy() {\n    if (this.routerEventsSubscription) {\n      this.routerEventsSubscription.unsubscribe();\n    }\n    if (this.scrollEventsSubscription) {\n      this.scrollEventsSubscription.unsubscribe();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BASE_HREF, HashLocationStrategy, Location, LOCATION_INITIALIZED, LocationStrategy, PathLocationStrategy, PlatformLocation, ViewportScroller} from '@angular/common';\nimport {ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Compiler, ComponentRef, Inject, Injectable, InjectionToken, Injector, ModuleWithProviders, NgModule, NgProbeToken, OnDestroy, Optional, Provider, SkipSelf} from '@angular/core';\nimport {of, Subject} from 'rxjs';\n\nimport {EmptyOutletComponent} from './components/empty_outlet';\nimport {Route, Routes} from './config';\nimport {RouterLink, RouterLinkWithHref} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {Event} from './events';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ErrorHandler, Router} from './router';\nimport {ROUTES} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {RouterScroller} from './router_scroller';\nimport {ActivatedRoute} from './router_state';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {DefaultUrlSerializer, UrlSerializer, UrlTree} from './url_tree';\nimport {flatten} from './utils/collection';\n\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES =\n    [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, EmptyOutletComponent];\n\n/**\n * A [DI token](guide/glossary/#di-token) for the router service.\n *\n * @publicApi\n */\nexport const ROUTER_CONFIGURATION = new InjectionToken<ExtraOptions>('ROUTER_CONFIGURATION');\n\n/**\n * @docsNotRequired\n */\nexport const ROUTER_FORROOT_GUARD = new InjectionToken<void>('ROUTER_FORROOT_GUARD');\n\nexport const ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  {\n    provide: Router,\n    useFactory: setupRouter,\n    deps: [\n      UrlSerializer, ChildrenOutletContexts, Location, Injector, Compiler, ROUTES,\n      ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],\n      [RouteReuseStrategy, new Optional()]\n    ]\n  },\n  ChildrenOutletContexts,\n  {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n  RouterPreloader,\n  NoPreloading,\n  PreloadAllModules,\n  {provide: ROUTER_CONFIGURATION, useValue: {enableTracing: false}},\n];\n\nexport function routerNgProbeToken() {\n  return new NgProbeToken('Router', Router);\n}\n\n/**\n * @description\n *\n * Adds directives and providers for in-app navigation among views defined in an application.\n * Use the Angular `Router` service to declaratively specify application states and manage state\n * transitions.\n *\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\n * However, only one `Router` service can be active.\n * To ensure this, there are two ways to register routes when importing this module:\n *\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\n * routes, and the `Router` service itself.\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\n * routes, but does not include the `Router` service.\n *\n * @see [Routing and Navigation guide](guide/router) for an\n * overview of how the `Router` service should be used.\n *\n * @publicApi\n */\n@NgModule({\n  declarations: ROUTER_DIRECTIVES,\n  exports: ROUTER_DIRECTIVES,\n})\nexport class RouterModule {\n  // Note: We are injecting the Router so it gets created eagerly...\n  constructor(@Optional() @Inject(ROUTER_FORROOT_GUARD) guard: any, @Optional() router: Router) {}\n\n  /**\n   * Creates and configures a module with all the router providers and directives.\n   * Optionally sets up an application listener to perform an initial navigation.\n   *\n   * When registering the NgModule at the root, import as follows:\n   *\n   * ```\n   * @NgModule({\n   *   imports: [RouterModule.forRoot(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the application.\n   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n   * @return The new `NgModule`.\n   *\n   */\n  static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        provideRoutes(routes),\n        {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        },\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        {\n          provide: LocationStrategy,\n          useFactory: provideLocationStrategy,\n          deps:\n              [PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION]\n        },\n        {\n          provide: RouterScroller,\n          useFactory: createRouterScroller,\n          deps: [Router, ViewportScroller, ROUTER_CONFIGURATION]\n        },\n        {\n          provide: PreloadingStrategy,\n          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                                                             NoPreloading\n        },\n        {provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken},\n        provideRouterInitializer(),\n      ],\n    };\n  }\n\n  /**\n   * Creates a module with all the router directives and a provider registering routes,\n   * without creating a new Router service.\n   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\n   *\n   * ```\n   * @NgModule({\n   *   imports: [RouterModule.forChild(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the submodule.\n   * @return The new NgModule.\n   *\n   */\n  static forChild(routes: Routes): ModuleWithProviders<RouterModule> {\n    return {ngModule: RouterModule, providers: [provideRoutes(routes)]};\n  }\n}\n\nexport function createRouterScroller(\n    router: Router, viewportScroller: ViewportScroller, config: ExtraOptions): RouterScroller {\n  if (config.scrollOffset) {\n    viewportScroller.setOffset(config.scrollOffset);\n  }\n  return new RouterScroller(router, viewportScroller, config);\n}\n\nexport function provideLocationStrategy(\n    platformLocationStrategy: PlatformLocation, baseHref: string, options: ExtraOptions = {}) {\n  return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n                           new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n\nexport function provideForRootGuard(router: Router): any {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && router) {\n    throw new Error(\n        `RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n\n/**\n * Registers a [DI provider](guide/glossary#provider) for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @publicApi\n */\nexport function provideRoutes(routes: Routes): any {\n  return [\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes},\n    {provide: ROUTES, multi: true, useValue: routes},\n  ];\n}\n\n/**\n * Allowed values in an `ExtraOptions` object that configure\n * when the router performs the initial navigation operation.\n *\n * * 'enabledNonBlocking' - (default) The initial navigation starts after the\n * root component has been created. The bootstrap is not blocked on the completion of the initial\n * navigation.\n * * 'enabledBlocking' - The initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete. This value is required\n * for [server-side rendering](guide/universal) to work.\n * * 'disabled' - The initial navigation is not performed. The location listener is set up before\n * the root component gets created. Use if there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic.\n *\n * The following values have been [deprecated](guide/releases#deprecation-practices) since v11,\n * and should not be used for new applications.\n *\n * * 'enabled' - This option is 1:1 replaceable with `enabledBlocking`.\n *\n * @see `forRoot()`\n *\n * @publicApi\n */\nexport type InitialNavigation = 'disabled'|'enabled'|'enabledBlocking'|'enabledNonBlocking';\n\n/**\n * A set of configuration options for a router module, provided in the\n * `forRoot()` method.\n *\n * @see `forRoot()`\n *\n *\n * @publicApi\n */\nexport interface ExtraOptions {\n  /**\n   * When true, log all internal navigation events to the console.\n   * Use for debugging.\n   */\n  enableTracing?: boolean;\n\n  /**\n   * When true, enable the location strategy that uses the URL fragment\n   * instead of the history API.\n   */\n  useHash?: boolean;\n\n  /**\n   * One of `enabled`, `enabledBlocking`, `enabledNonBlocking` or `disabled`.\n   * When set to `enabled` or `enabledBlocking`, the initial navigation starts before the root\n   * component is created. The bootstrap is blocked until the initial navigation is complete. This\n   * value is required for [server-side rendering](guide/universal) to work. When set to\n   * `enabledNonBlocking`, the initial navigation starts after the root component has been created.\n   * The bootstrap is not blocked on the completion of the initial navigation. When set to\n   * `disabled`, the initial navigation is not performed. The location listener is set up before the\n   * root component gets created. Use if there is a reason to have more control over when the router\n   * starts its initial navigation due to some complex initialization logic.\n   */\n  initialNavigation?: InitialNavigation;\n\n  /**\n   * A custom error handler for failed navigations.\n   * If the handler returns a value, the navigation Promise is resolved with this value.\n   * If the handler throws an exception, the navigation Promise is rejected with the exception.\n   *\n   */\n  errorHandler?: ErrorHandler;\n\n  /**\n   * Configures a preloading strategy.\n   * One of `PreloadAllModules` or `NoPreloading` (the default).\n   */\n  preloadingStrategy?: any;\n\n  /**\n   * Define what the router should do if it receives a navigation request to the current URL.\n   * Default is `ignore`, which causes the router ignores the navigation.\n   * This can disable features such as a \"refresh\" button.\n   * Use this option to configure the behavior when navigating to the\n   * current URL. Default is 'ignore'.\n   */\n  onSameUrlNavigation?: 'reload'|'ignore';\n\n  /**\n   * Configures if the scroll position needs to be restored when navigating back.\n   *\n   * * 'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.\n   * * 'top'- Sets the scroll position to x = 0, y = 0 on all navigation.\n   * * 'enabled'- Restores the previous scroll position on backward navigation, else sets the\n   * position to the anchor if one is provided, or sets the scroll position to [0, 0] (forward\n   * navigation). This option will be the default in the future.\n   *\n   * You can implement custom scroll restoration behavior by adapting the enabled behavior as\n   * in the following example.\n   *\n   * ```typescript\n   * class AppModule {\n   *   constructor(router: Router, viewportScroller: ViewportScroller) {\n   *     router.events.pipe(\n   *       filter((e: Event): e is Scroll => e instanceof Scroll)\n   *     ).subscribe(e => {\n   *       if (e.position) {\n   *         // backward navigation\n   *         viewportScroller.scrollToPosition(e.position);\n   *       } else if (e.anchor) {\n   *         // anchor navigation\n   *         viewportScroller.scrollToAnchor(e.anchor);\n   *       } else {\n   *         // forward navigation\n   *         viewportScroller.scrollToPosition([0, 0]);\n   *       }\n   *     });\n   *   }\n   * }\n   * ```\n   */\n  scrollPositionRestoration?: 'disabled'|'enabled'|'top';\n\n  /**\n   * When set to 'enabled', scrolls to the anchor element when the URL has a fragment.\n   * Anchor scrolling is disabled by default.\n   *\n   * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n   * that we stored or scroll to the top.\n   */\n  anchorScrolling?: 'disabled'|'enabled';\n\n  /**\n   * Configures the scroll offset the router will use when scrolling to an element.\n   *\n   * When given a tuple with x and y position value,\n   * the router uses that offset each time it scrolls.\n   * When given a function, the router invokes the function every time\n   * it restores scroll position.\n   */\n  scrollOffset?: [number, number]|(() => [number, number]);\n\n  /**\n   * Defines how the router merges parameters, data, and resolved data from parent to child\n   * routes. By default ('emptyOnly'), inherits parent parameters only for\n   * path-less or component-less routes.\n   *\n   * Set to 'always' to enable unconditional inheritance of parent parameters.\n   *\n   * Note that when dealing with matrix parameters, \"parent\" refers to the parent `Route`\n   * config which does not necessarily mean the \"URL segment to the left\". When the `Route` `path`\n   * contains multiple segments, the matrix parameters must appear on the last segment. For example,\n   * matrix parameters for `{path: 'a/b', component: MyComp}` should appear as `a/b;foo=bar` and not\n   * `a;foo=bar/b`.\n   *\n   */\n  paramsInheritanceStrategy?: 'emptyOnly'|'always';\n\n  /**\n   * A custom handler for malformed URI errors. The handler is invoked when `encodedURI` contains\n   * invalid character sequences.\n   * The default implementation is to redirect to the root URL, dropping\n   * any path or parameter information. The function takes three parameters:\n   *\n   * - `'URIError'` - Error thrown when parsing a bad URL.\n   * - `'UrlSerializer'` - UrlSerializer that’s configured with the router.\n   * - `'url'` -  The malformed URL that caused the URIError\n   * */\n  malformedUriErrorHandler?:\n      (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree;\n\n  /**\n   * Defines when the router updates the browser URL. By default ('deferred'),\n   * update after successful navigation.\n   * Set to 'eager' if prefer to update the URL at the beginning of navigation.\n   * Updating the URL early allows you to handle a failure of navigation by\n   * showing an error message with the URL that failed.\n   */\n  urlUpdateStrategy?: 'deferred'|'eager';\n\n  /**\n   * Enables a bug fix that corrects relative link resolution in components with empty paths.\n   * Example:\n   *\n   * ```\n   * const routes = [\n   *   {\n   *     path: '',\n   *     component: ContainerComponent,\n   *     children: [\n   *       { path: 'a', component: AComponent },\n   *       { path: 'b', component: BComponent },\n   *     ]\n   *   }\n   * ];\n   * ```\n   *\n   * From the `ContainerComponent`, you should be able to navigate to `AComponent` using\n   * the following `routerLink`, but it will not work if `relativeLinkResolution` is set\n   * to `'legacy'`:\n   *\n   * `<a [routerLink]=\"['./a']\">Link to A</a>`\n   *\n   * However, this will work:\n   *\n   * `<a [routerLink]=\"['../a']\">Link to A</a>`\n   *\n   * In other words, you're required to use `../` rather than `./` when the relative link\n   * resolution is set to `'legacy'`.\n   *\n   * The default in v11 is `corrected`.\n   */\n  relativeLinkResolution?: 'legacy'|'corrected';\n\n  /**\n   * Configures how the Router attempts to restore state when a navigation is cancelled.\n   *\n   * 'replace' - Always uses `location.replaceState` to set the browser state to the state of the\n   * router before the navigation started. This means that if the URL of the browser is updated\n   * _before_ the navigation is canceled, the Router will simply replace the item in history rather\n   * than trying to restore to the previous location in the session history. This happens most\n   * frequently with `urlUpdateStrategy: 'eager'` and navigations with the browser back/forward\n   * buttons.\n   *\n   * 'computed' - Will attempt to return to the same index in the session history that corresponds\n   * to the Angular route when the navigation gets cancelled. For example, if the browser back\n   * button is clicked and the navigation is cancelled, the Router will trigger a forward navigation\n   * and vice versa.\n   *\n   * Note: the 'computed' option is incompatible with any `UrlHandlingStrategy` which only\n   * handles a portion of the URL because the history restoration navigates to the previous place in\n   * the browser history rather than simply resetting a portion of the URL.\n   *\n   * The default value is `replace` when not set.\n   */\n  canceledNavigationResolution?: 'replace'|'computed';\n}\n\nexport function setupRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    injector: Injector, compiler: Compiler, config: Route[][], opts: ExtraOptions = {},\n    urlHandlingStrategy?: UrlHandlingStrategy, routeReuseStrategy?: RouteReuseStrategy) {\n  const router =\n      new Router(null, urlSerializer, contexts, location, injector, compiler, flatten(config));\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  assignExtraOptionsToRouter(opts, router);\n\n  if (opts.enableTracing) {\n    router.events.subscribe((e: Event) => {\n      // tslint:disable:no-console\n      console.group?.(`Router Event: ${(<any>e.constructor).name}`);\n      console.log(e.toString());\n      console.log(e);\n      console.groupEnd?.();\n      // tslint:enable:no-console\n    });\n  }\n\n  return router;\n}\n\nexport function assignExtraOptionsToRouter(opts: ExtraOptions, router: Router): void {\n  if (opts.errorHandler) {\n    router.errorHandler = opts.errorHandler;\n  }\n\n  if (opts.malformedUriErrorHandler) {\n    router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n  }\n\n  if (opts.onSameUrlNavigation) {\n    router.onSameUrlNavigation = opts.onSameUrlNavigation;\n  }\n\n  if (opts.paramsInheritanceStrategy) {\n    router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n  }\n\n  if (opts.relativeLinkResolution) {\n    router.relativeLinkResolution = opts.relativeLinkResolution;\n  }\n\n  if (opts.urlUpdateStrategy) {\n    router.urlUpdateStrategy = opts.urlUpdateStrategy;\n  }\n\n  if (opts.canceledNavigationResolution) {\n    router.canceledNavigationResolution = opts.canceledNavigationResolution;\n  }\n}\n\nexport function rootRoute(router: Router): ActivatedRoute {\n  return router.routerState.root;\n}\n\n/**\n * Router initialization requires two steps:\n *\n * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if\n * a resolver or a guard executes asynchronously.\n *\n * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the\n * `afterPreactivation` hook provided by the router.\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\n@Injectable()\nexport class RouterInitializer implements OnDestroy {\n  private initNavigation = false;\n  private destroyed = false;\n  private resultOfPreactivationDone = new Subject<void>();\n\n  constructor(private injector: Injector) {}\n\n  appInitializer(): Promise<any> {\n    const p: Promise<any> = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    return p.then(() => {\n      // If the injector was destroyed, the DI lookups below will fail.\n      if (this.destroyed) {\n        return Promise.resolve(true);\n      }\n\n      let resolve: Function = null!;\n      const res = new Promise(r => resolve = r);\n      const router = this.injector.get(Router);\n      const opts = this.injector.get(ROUTER_CONFIGURATION);\n\n      if (opts.initialNavigation === 'disabled') {\n        router.setUpLocationChangeListener();\n        resolve(true);\n      } else if (\n          // TODO: enabled is deprecated as of v11, can be removed in v13\n          opts.initialNavigation === 'enabled' || opts.initialNavigation === 'enabledBlocking') {\n        router.hooks.afterPreactivation = () => {\n          // only the initial navigation should be delayed\n          if (!this.initNavigation) {\n            this.initNavigation = true;\n            resolve(true);\n            return this.resultOfPreactivationDone;\n\n            // subsequent navigations should not be delayed\n          } else {\n            return of(null) as any;\n          }\n        };\n        router.initialNavigation();\n      } else {\n        resolve(true);\n      }\n\n      return res;\n    });\n  }\n\n  bootstrapListener(bootstrappedComponentRef: ComponentRef<any>): void {\n    const opts = this.injector.get(ROUTER_CONFIGURATION);\n    const preloader = this.injector.get(RouterPreloader);\n    const routerScroller = this.injector.get(RouterScroller);\n    const router = this.injector.get(Router);\n    const ref = this.injector.get<ApplicationRef>(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    // Default case\n    if (opts.initialNavigation === 'enabledNonBlocking' || opts.initialNavigation === undefined) {\n      router.initialNavigation();\n    }\n\n    preloader.setUpPreloading();\n    routerScroller.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    this.resultOfPreactivationDone.next(null!);\n    this.resultOfPreactivationDone.complete();\n  }\n\n  ngOnDestroy() {\n    this.destroyed = true;\n  }\n}\n\nexport function getAppInitializer(r: RouterInitializer) {\n  return r.appInitializer.bind(r);\n}\n\nexport function getBootstrapListener(r: RouterInitializer) {\n  return r.bootstrapListener.bind(r);\n}\n\n/**\n * A [DI token](guide/glossary/#di-token) for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nexport const ROUTER_INITIALIZER =\n    new InjectionToken<(compRef: ComponentRef<any>) => void>('Router Initializer');\n\nexport function provideRouterInitializer(): ReadonlyArray<Provider> {\n  return [\n    RouterInitializer,\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: getAppInitializer,\n      deps: [RouterInitializer]\n    },\n    {provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer]},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'sentry';\n  a: any = {};\n\n  constructor() {\n    throw new Error('test');\n  }\n\n  sendError() {\n    const f = (a: any) => a.b;\n    f(this.a.b.c);\n  }\n}\n","<button (click)=\"sendError()\">Send error</button>\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers!: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders|Function|null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | string[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key)!.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        Object.keys(headers).forEach(name => {\n          let values: string|string[] = headers[name];\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or overide for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key)!, this.headers.get(key)!));\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  Extra,\n  Extras,\n  Primitive,\n  Severity,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    captureContext,\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n    ...context,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  return callOnHub('startTransaction', { ...context }, customSamplingContext);\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n\n  /** @deprecated use {@link InboundFiltersOptions.allowUrls} instead. */\n  whitelistUrls: Array<string | RegExp>;\n  /** @deprecated use {@link InboundFiltersOptions.denyUrls} instead. */\n  blacklistUrls: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        // This checks prevents most of the occurrences of the bug linked below:\n        // https://github.com/getsentry/sentry-javascript/issues/2622\n        // The bug is caused by multiple SDK instances, where one is minified and one is using non-mangled code.\n        // Unfortunatelly we cannot fix it reliably (thus reserved property in rollup's terser config),\n        // as we cannot force people using multiple instances in their apps to sync SDK versions.\n        const options = typeof self._mergeOptions === 'function' ? self._mergeOptions(clientOptions) : {};\n        if (typeof self._shouldDropEvent !== 'function') {\n          return event;\n        }\n        return self._shouldDropEvent(event, options) ? null : event;\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (this._isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this._isDeniedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this._isAllowedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      return (\n        (event &&\n          event.exception &&\n          event.exception.values &&\n          event.exception.values[0] &&\n          event.exception.values[0].type === 'SentryError') ||\n        false\n      );\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isDeniedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.denyUrls || !options.denyUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.denyUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isAllowedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.allowUrls || !options.allowUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.allowUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: Partial<InboundFiltersOptions> = {}): Partial<InboundFiltersOptions> {\n    return {\n      allowUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.whitelistUrls || []),\n        ...(this._options.allowUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.whitelistUrls || []),\n        ...(clientOptions.allowUrls || []),\n      ],\n      denyUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.blacklistUrls || []),\n        ...(this._options.denyUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.blacklistUrls || []),\n        ...(clientOptions.denyUrls || []),\n      ],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getLastValidUrl(frames: StackFrame[] = []): string | null {\n    for (let i = frames.length - 1; i >= 0; i--) {\n      const frame = frames[i];\n\n      if (frame?.filename !== '<anonymous>' && frame?.filename !== '[native code]') {\n        return frame.filename || null;\n      }\n    }\n\n    return null;\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        const frames = event.stacktrace.frames;\n        return this._getLastValidUrl(frames);\n      }\n      if (event.exception) {\n        const frames =\n          event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n        return this._getLastValidUrl(frames);\n      }\n      return null;\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","export const SDK_VERSION = '6.16.1';\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore __proto__ does not exist on obj\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {\n      // @ts-ignore typescript complains about indexing so we remove\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key (deprecated, renamed to publicKey). */\n  public user!: string;\n  /** Public authorization key. */\n  public publicKey!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, publicKey } = this;\n    return (\n      `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    // TODO this is for backwards compatibility, and can be removed in a future version\n    if ('user' in components && !('publicKey' in components)) {\n      components.publicKey = components.user;\n    }\n    this.user = components.publicKey || '';\n\n    this.protocol = components.protocol;\n    this.publicKey = components.publicKey || '';\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'publicKey', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n} & { initialized?: boolean };\n\n/**\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  return integrations.reduce((acc, integrations) => {\n    if (acc.every(accIntegration => integrations.name !== accIntegration.name)) {\n      acc.push(integrations);\n    }\n    return acc;\n  }, [] as Integration[]);\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n\n  let integrations: Integration[] = [...filterDuplicates(defaultIntegrations)];\n\n  if (Array.isArray(userIntegrations)) {\n    // Filter out integrations that are also included in user options\n    integrations = [\n      ...integrations.filter(integrations =>\n        userIntegrations.every(userIntegration => userIntegration.name !== integrations.name),\n      ),\n      // And filter out duplicated user options integrations\n      ...filterDuplicates(userIntegrations),\n    ];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(integrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  // set the `initialized` flag so we don't run through the process again unecessarily; use `Object.defineProperty`\n  // because by default it creates a property which is nonenumerable, which we want since `initialized` shouldn't be\n  // considered a member of the index the way the actual integrations are\n  Object.defineProperty(integrations, 'initialized', { value: true });\n  return integrations;\n}\n","/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  Outcome,\n  SessionStatus,\n  Severity,\n  Transport,\n} from '@sentry/types';\nimport {\n  checkOrSetAlreadyCaught,\n  dateTimestampInSeconds,\n  Dsn,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint?.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.update({ init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._getBackend().getTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientDoneProcessing(timeout).then(clientFinished => {\n      return this.getTransport()\n        .close(timeout)\n        .then(transportFlushed => clientFinished && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrations.initialized) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === SessionStatus.Ok;\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      session.update({\n        ...(crashed && { status: SessionStatus.Crashed }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n\n    const { _experiments = {} } = this.getOptions();\n    if (_experiments.ensureNoCircularStructures) {\n      return normalize(normalized);\n    }\n\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (integrationsArray.length > 0) {\n      event.sdk = event.sdk || {};\n      event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationsArray];\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n    const transport = this.getTransport();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not capture event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      transport.recordLostEvent?.(Outcome.SampleRate, 'event');\n      return SyncPromise.reject(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          transport.recordLostEvent?.(Outcome.EventProcessor, event.type || 'event');\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        return this._ensureBeforeSendRv(beforeSendResult);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          transport.recordLostEvent?.(Outcome.BeforeSend, event.type || 'event');\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing += 1;\n    void promise.then(\n      value => {\n        this._numProcessing -= 1;\n        return value;\n      },\n      reason => {\n        this._numProcessing -= 1;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Verifies that return value of configured `beforeSend` is of expected type.\n   */\n  protected _ensureBeforeSendRv(\n    rv: PromiseLike<Event | null> | Event | null,\n  ): PromiseLike<Event | null> | Event | null {\n    const nullErr = '`beforeSend` method has to return `null` or a valid event.';\n    if (isThenable(rv)) {\n      return (rv as PromiseLike<Event | null>).then(\n        event => {\n          if (!(isPlainObject(event) || event === null)) {\n            throw new SentryError(nullErr);\n          }\n          return event;\n        },\n        e => {\n          throw new SentryError(`beforeSend rejected with ${e}`);\n        },\n      );\n    } else if (!(isPlainObject(rv) || rv === null)) {\n      throw new SentryError(nullErr);\n    }\n    return rv;\n  }\n}\n","/** The status of an event. */\n// eslint-disable-next-line import/export\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error occurred during submission. */\n  Failed = 'failed',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","import { Event, Response, Status, Transport } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return SyncPromise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return SyncPromise.resolve(true);\n  }\n}\n","import { Event, EventHint, Options, Session, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instantiate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /** Submits the session to Sentry */\n  sendSession(session: Session): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instantiate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    void this._transport.sendEvent(event).then(null, reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): void {\n    if (!this._transport.sendSession) {\n      logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n      return;\n    }\n\n    void this._transport.sendSession(session).then(null, reason => {\n      logger.error(`Error while sending session: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n","/** JSDoc */\n// eslint-disable-next-line import/export\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access, max-lines */\n\n/**\n * An object representing a single stack frame.\n * {Object} StackFrame\n * {string} url The JavaScript or HTML file URL.\n * {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * {string[]?} args The arguments passed to the function, if known.\n * {number=} line The line number, if known.\n * {number=} column The column number, if known.\n * {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number | null;\n  column: number | null;\n}\n\n/**\n * An object representing a JavaScript stack trace.\n * {Object} StackTrace\n * {string} name The name of the thrown exception.\n * {string} message The exception error message.\n * {TraceKit.StackFrame[]} stack An array of stack frames.\n */\nexport interface StackTrace {\n  name: string;\n  message: string;\n  mechanism?: string;\n  stack: StackFrame[];\n  failed?: boolean;\n}\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nconst geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nconst chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function computeStackTrace(ex: any): StackTrace {\n  let stack = null;\n  let popSize = 0;\n\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      popSize = ex.framesToPop;\n    } else if (reactMinifiedRegexp.test(ex.message)) {\n      popSize = 1;\n    }\n  }\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity\nfunction computeStackTraceFromStackProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  const stack = [];\n  const lines = ex.stack.split('\\n');\n  let isEval;\n  let submatch;\n  let parts;\n  let element;\n\n  for (let i = 0; i < lines.length; ++i) {\n    if ((parts = chrome.exec(lines[i]))) {\n      const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n        parts[3] = submatch[2]; // line\n        parts[4] = submatch[3]; // column\n      }\n\n      // Arpad: Working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n      // prefix here seems like the quickest solution for now.\n      let url = parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2];\n      // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n      // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n      let func = parts[1] || UNKNOWN_FUNCTION;\n      [func, url] = extractSafariExtensionDetails(func, url);\n\n      element = {\n        url,\n        func,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = winjs.exec(lines[i]))) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = gecko.exec(lines[i]))) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || `eval`;\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = (ex.columnNumber as number) + 1;\n      }\n\n      let url = parts[3];\n      let func = parts[1] || UNKNOWN_FUNCTION;\n      [func, url] = extractSafariExtensionDetails(func, url);\n\n      element = {\n        url,\n        func,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null,\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction computeStackTraceFromStacktraceProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  }\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace;\n  const opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  const opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  const lines = stacktrace.split('\\n');\n  const stack = [];\n  let parts;\n\n  for (let line = 0; line < lines.length; line += 2) {\n    let element = null;\n    if ((parts = opera10Regex.exec(lines[line]))) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null,\n      };\n    } else if ((parts = opera11Regex.exec(lines[line]))) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2],\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunatelly \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, url: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${url}` : `safari-web-extension:${url}`,\n      ]\n    : [func, url];\n};\n\n/** Remove N number of frames from the stack */\nfunction popFrames(stacktrace: StackTrace, popSize: number): StackTrace {\n  try {\n    return {\n      ...stacktrace,\n      stack: stacktrace.stack.slice(popSize),\n    };\n  } catch (e) {\n    return stacktrace;\n  }\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractMessage(ex: any): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n","import { Event, Exception, StackFrame } from '@sentry/types';\nimport { extractExceptionKeysForMessage, isEvent, normalizeToSize } from '@sentry/utils';\n\nimport { computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): Exception {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: Exception = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  rejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            rejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): Event {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column === null ? undefined : frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line === null ? undefined : frame.line,\n      }),\n    )\n    .reverse();\n}\n","import { Event, EventHint, Options, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { computeStackTrace } from './tracekit';\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromException(options: Options, exception: unknown, hint?: EventHint): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  options: Options,\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  options: {\n    rejection?: boolean;\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    // eslint-disable-next-line no-param-reassign\n    exception = errorEvent.error;\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromStacktrace(computeStackTrace(exception as Error));\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(message, syntheticException, options);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception as Error)) {\n    // we have a real Error object, do nothing\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it is plain Object or Event, serialize it manually and extract options\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, options.rejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, options);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  input: string,\n  syntheticException?: Error,\n  options: {\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (options.attachStacktrace && syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n","import { Event, SdkInfo, SentryRequest, SentryRequestType, Session, SessionAggregates } from '@sentry/types';\n\nimport { API } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: API): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: API): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = JSON.stringify({\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(api.forceEnvelope() && { dsn: api.getDsn().toString() }),\n  });\n  // I know this is hacky but we don't want to add `session` to request type since it's never rate limited\n  const type: SentryRequestType = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n  const itemHeaders = JSON.stringify({\n    type,\n  });\n\n  return {\n    body: `${envelopeHeaders}\\n${itemHeaders}\\n${JSON.stringify(session)}`,\n    type,\n    url: api.getEnvelopeEndpointWithUrlEncodedAuth(),\n  };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: API): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || api.forceEnvelope();\n\n  const { transactionSampling, ...metadata } = event.debug_meta || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n  if (Object.keys(metadata).length === 0) {\n    delete event.debug_meta;\n  } else {\n    event.debug_meta = metadata;\n  }\n\n  const req: SentryRequest = {\n    body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    type: eventType,\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(api.forceEnvelope() && { dsn: api.getDsn().toString() }),\n    });\n    const itemHeaders = JSON.stringify({\n      type: eventType,\n\n      // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n      // explicitly-set sampling decisions). Are we good with that?\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n\n      // The content-type is assumed to be 'application/json' and not part of\n      // the current spec for transaction items, so we don't bloat the request\n      // body with it.\n      //\n      // content_type: 'application/json',\n      //\n      // The length is optional. It must be the number of bytes in req.Body\n      // encoded as UTF-8. Since the server can figure this out and would\n      // otherwise refuse events that report the length incorrectly, we decided\n      // not to send the length to avoid problems related to reporting the wrong\n      // size and to reduce request body size.\n      //\n      // length: new TextEncoder().encode(req.body).length,\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}`;\n    req.body = envelope;\n  }\n\n  return req;\n}\n","import { DsnLike, SdkMetadata } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n\n  /** The envelope tunnel to use. */\n  private readonly _tunnel?: string;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}, tunnel?: string) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Does this transport force envelopes? */\n  public forceEnvelope(): boolean {\n    return !!this._tunnel;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this.getDsn();\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    if (this.forceEnvelope()) {\n      return this._tunnel as string;\n    }\n\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this.getDsn();\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n    const dsn = this.getDsn();\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.publicKey}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this.getDsn();\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    if (this._tunnel) {\n      return this._tunnel;\n    }\n    const base = this.getBaseApiEndpoint();\n    const dsn = this.getDsn();\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this.getDsn();\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.publicKey,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n","import { forget, getGlobalObject, isNativeFetch, logger, supportsFetch } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\nlet cachedFetchImpl: FetchImpl;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(global.fetch)) {\n    return (cachedFetchImpl = global.fetch.bind(global));\n  }\n\n  const document = global.document;\n  let fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (typeof document?.createElement === `function`) {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      if (sandbox.contentWindow?.fetch) {\n        fetchImpl = sandbox.contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(global));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/**\n * Sends sdk client report using sendBeacon or fetch as a fallback if available\n *\n * @param url report endpoint\n * @param body report payload\n */\nexport function sendReport(url: string, body: string): void {\n  const isRealNavigator = Object.prototype.toString.call(global && global.navigator) === '[object Navigator]';\n  const hasSendBeacon = isRealNavigator && typeof global.navigator.sendBeacon === 'function';\n\n  if (hasSendBeacon) {\n    // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n    const sendBeacon = global.navigator.sendBeacon.bind(global.navigator);\n    return sendBeacon(url, body);\n  }\n\n  if (supportsFetch()) {\n    const fetch = getNativeFetchImplementation();\n    return forget(\n      fetch(url, {\n        body,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true,\n      }),\n    );\n  }\n}\n","import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  public add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    void task\n      .then(() => this.remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add another catch here because `this.remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      void SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { API } from '@sentry/core';\nimport {\n  Event,\n  Outcome,\n  Response as SentryResponse,\n  SentryRequestType,\n  Status,\n  Transport,\n  TransportOptions,\n} from '@sentry/types';\nimport {\n  dateTimestampInSeconds,\n  getGlobalObject,\n  logger,\n  parseRetryAfterHeader,\n  PromiseBuffer,\n  SentryError,\n} from '@sentry/utils';\n\nimport { sendReport } from './utils';\n\nconst CATEGORY_MAPPING: {\n  [key in SentryRequestType]: string;\n} = {\n  event: 'error',\n  transaction: 'transaction',\n  session: 'session',\n  attachment: 'attachment',\n};\n\nconst global = getGlobalObject<Window>();\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: API;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<SentryResponse> = new PromiseBuffer(30);\n\n  /** Locks transport after receiving rate limits in a response */\n  protected readonly _rateLimits: Record<string, Date> = {};\n\n  protected _outcomes: { [key: string]: number } = {};\n\n  public constructor(public options: TransportOptions) {\n    this._api = new API(options.dsn, options._metadata, options.tunnel);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n\n    if (this.options.sendClientReports && global.document) {\n      global.document.addEventListener('visibilitychange', () => {\n        if (global.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<SentryResponse> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordLostEvent(reason: Outcome, category: SentryRequestType): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n    // We want to track each category (event, transaction, session) separately\n    // but still keep the distinction between different type of outcomes.\n    // We could use nested maps, but it's much easier to read and type this way.\n    // A correct type for map-based implementation if we want to go that route\n    // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n    const key = `${CATEGORY_MAPPING[category]}:${reason}`;\n    logger.log(`Adding outcome: ${key}`);\n    this._outcomes[key] = (this._outcomes[key] ?? 0) + 1;\n  }\n\n  /**\n   * Send outcomes as an envelope\n   */\n  protected _flushOutcomes(): void {\n    if (!this.options.sendClientReports) {\n      return;\n    }\n\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n\n    // Nothing to send\n    if (!Object.keys(outcomes).length) {\n      logger.log('No outcomes to flush');\n      return;\n    }\n\n    logger.log(`Flushing outcomes:\\n${JSON.stringify(outcomes, null, 2)}`);\n\n    const url = this._api.getEnvelopeEndpointWithUrlEncodedAuth();\n    // Envelope header is required to be at least an empty object\n    const envelopeHeader = JSON.stringify({ ...(this.options.tunnel && { dsn: this._api.getDsn().toString() }) });\n    const itemHeaders = JSON.stringify({\n      type: 'client_report',\n    });\n    const item = JSON.stringify({\n      timestamp: dateTimestampInSeconds(),\n      discarded_events: Object.keys(outcomes).map(key => {\n        const [category, reason] = key.split(':');\n        return {\n          reason,\n          category,\n          quantity: outcomes[key],\n        };\n      }),\n    });\n    const envelope = `${envelopeHeader}\\n${itemHeaders}\\n${item}`;\n\n    try {\n      sendReport(url, envelope);\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n\n  /**\n   * Handle Sentry repsonse for promise-based transports.\n   */\n  protected _handleResponse({\n    requestType,\n    response,\n    headers,\n    resolve,\n    reject,\n  }: {\n    requestType: SentryRequestType;\n    response: Response | XMLHttpRequest;\n    headers: Record<string, string | null>;\n    resolve: (value?: SentryResponse | PromiseLike<SentryResponse> | null | undefined) => void;\n    reject: (reason?: unknown) => void;\n  }): void {\n    const status = Status.fromHttpCode(response.status);\n    /**\n     * \"The name is case-insensitive.\"\n     * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n     */\n    const limited = this._handleRateLimit(headers);\n    if (limited)\n      logger.warn(`Too many ${requestType} requests, backing off until: ${this._disabledUntil(requestType)}`);\n\n    if (status === Status.Success) {\n      resolve({ status });\n      return;\n    }\n\n    reject(response);\n  }\n\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   */\n  protected _disabledUntil(requestType: SentryRequestType): Date {\n    const category = CATEGORY_MAPPING[requestType];\n    return this._rateLimits[category] || this._rateLimits.all;\n  }\n\n  /**\n   * Checks if a category is rate limited\n   */\n  protected _isRateLimited(requestType: SentryRequestType): boolean {\n    return this._disabledUntil(requestType) > new Date(Date.now());\n  }\n\n  /**\n   * Sets internal _rateLimits from incoming headers. Returns true if headers contains a non-empty rate limiting header.\n   */\n  protected _handleRateLimit(headers: Record<string, string | null>): boolean {\n    const now = Date.now();\n    const rlHeader = headers['x-sentry-rate-limits'];\n    const raHeader = headers['retry-after'];\n\n    if (rlHeader) {\n      // rate limit headers are of the form\n      //     <header>,<header>,..\n      // where each <header> is of the form\n      //     <retry_after>: <categories>: <scope>: <reason_code>\n      // where\n      //     <retry_after> is a delay in ms\n      //     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n      //         <category>;<category>;...\n      //     <scope> is what's being limited (org, project, or key) - ignored by SDK\n      //     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n      for (const limit of rlHeader.trim().split(',')) {\n        const parameters = limit.split(':', 2);\n        const headerDelay = parseInt(parameters[0], 10);\n        const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        for (const category of parameters[1].split(';')) {\n          this._rateLimits[category || 'all'] = new Date(now + delay);\n        }\n      }\n      return true;\n    } else if (raHeader) {\n      this._rateLimits.all = new Date(now + parseRetryAfterHeader(now, raHeader));\n      return true;\n    }\n    return false;\n  }\n}\n","/**\n * Consumes the promise and logs the error when it rejects.\n * @param promise A promise to forget.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function forget(promise: PromiseLike<any>): void {\n  void promise.then(null, e => {\n    // TODO: Use a better logging mechanism\n    // eslint-disable-next-line no-console\n    console.error(e);\n  });\n}\n","import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Outcome, Response, SentryRequest, Session, TransportOptions } from '@sentry/types';\nimport { SentryError, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * Fetch API reference which always points to native browser implementation.\n   */\n  private _fetch: typeof fetch;\n\n  public constructor(options: TransportOptions, fetchImpl: FetchImpl = getNativeFetchImplementation()) {\n    super(options);\n    this._fetch = fetchImpl;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent(Outcome.RateLimitBackoff, sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            void this._fetch(sentryRequest.url, options)\n              .then(response => {\n                const headers = {\n                  'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n                  'retry-after': response.headers.get('Retry-After'),\n                };\n                this._handleResponse({\n                  requestType: sentryRequest.type,\n                  response,\n                  headers,\n                  resolve,\n                  reject,\n                });\n              })\n              .catch(reject);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent(Outcome.QueueOverflow, sentryRequest.type);\n        } else {\n          this.recordLostEvent(Outcome.NetworkError, sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n","import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Outcome, Response, SentryRequest, Session } from '@sentry/types';\nimport { SentryError, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      this.recordLostEvent(Outcome.RateLimitBackoff, sentryRequest.type);\n\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer\n      .add(\n        () =>\n          new SyncPromise<Response>((resolve, reject) => {\n            const request = new XMLHttpRequest();\n\n            request.onreadystatechange = (): void => {\n              if (request.readyState === 4) {\n                const headers = {\n                  'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n                  'retry-after': request.getResponseHeader('Retry-After'),\n                };\n                this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n              }\n            };\n\n            request.open('POST', sentryRequest.url);\n            for (const header in this.options.headers) {\n              if (Object.prototype.hasOwnProperty.call(this.options.headers, header)) {\n                request.setRequestHeader(header, this.options.headers[header]);\n              }\n            }\n            request.send(sentryRequest.body);\n          }),\n      )\n      .then(undefined, reason => {\n        // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.\n        if (reason instanceof SentryError) {\n          this.recordLostEvent(Outcome.QueueOverflow, sentryRequest.type);\n        } else {\n          this.recordLostEvent(Outcome.NetworkError, sentryRequest.type);\n        }\n        throw reason;\n      });\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n      tunnel: this._options.tunnel,\n      sendClientReports: this._options.sendClientReports,\n      _metadata: this._options._metadata,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n","import { API, captureException, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue, getGlobalObject, logger } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: args,\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * Injects the Report Dialog script\n * @hidden\n */\nexport function injectReportDialog(options: ReportDialogOptions = {}): void {\n  if (!global.document) {\n    return;\n  }\n\n  if (!options.eventId) {\n    logger.error(`Missing eventId option in showReportDialog call`);\n    return;\n  }\n\n  if (!options.dsn) {\n    logger.error(`Missing dsn option in showReportDialog call`);\n    return;\n  }\n\n  const script = global.document.createElement('script');\n  script.async = true;\n  script.src = new API(options.dsn).getReportDialogEndpoint(options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  const injectionPoint = global.document.head || global.document.body;\n\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof this._options.dom === 'object' ? this._options.dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString((handlerData.event as unknown) as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: {\n            method,\n            url,\n            status_code,\n          },\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n          input: body,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n}\n","import { BaseClient, Scope, SDK_VERSION } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));\n    }\n\n    if (this._options.eventTarget) {\n      const eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(this._wrapEventTarget.bind(this));\n    }\n  }\n\n  /** JSDoc */\n  private _wrapTimeFunction(original: () => void): () => number {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _wrapRAF(original: any): (callback: () => void) => any {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, callback: () => void): () => void {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return original.call(\n        this,\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private _wrapEventTarget(target: string): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const global = getGlobalObject() as { [key: string]: any };\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = global[target] && global[target].prototype;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          if (typeof fn.handleEvent === 'function') {\n            fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n              mechanism: {\n                data: {\n                  function: 'handleEvent',\n                  handler: getFunctionName(fn),\n                  target,\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            });\n          }\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(\n          this,\n          eventName,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          wrap((fn as any) as WrappedFunction, {\n            mechanism: {\n              data: {\n                function: 'addEventListener',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = (fn as unknown) as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler?.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    });\n  }\n\n  /** JSDoc */\n  private _wrapXHR(originalSend: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: XMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n      xmlHttpRequestProps.forEach(prop => {\n        if (prop in xhr && typeof xhr[prop] === 'function') {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fill(xhr, prop, function(original: WrappedFunction): () => any {\n            const wrapOptions = {\n              mechanism: {\n                data: {\n                  function: prop,\n                  handler: getFunctionName(original),\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            };\n\n            // If Instrument integration has been called before TryCatch, get the name of original function\n            if (original.__sentry_original__) {\n              wrapOptions.mechanism.data.handler = getFunctionName(original.__sentry_original__);\n            }\n\n            // Otherwise wrap directly\n            return wrap(original, wrapOptions);\n          });\n        }\n      });\n\n      return originalSend.apply(this, args);\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n        const error = data.error;\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        const client = currentHub.getClient();\n        const event =\n          error === undefined && isString(data.msg)\n            ? this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n            : this._enhanceEventWithInitialFrame(\n                eventFromUnknownInput(error || data.msg, undefined, {\n                  attachStacktrace: client && client.getOptions().attachStacktrace,\n                  rejection: false,\n                }),\n                data.url,\n                data.line,\n                data.column,\n              );\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n      },\n      type: 'error',\n    });\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (e: any) => {\n        let error = e;\n\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromRejectionWithPrimitive(error)\n          : eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: true,\n            });\n\n        event.level = Severity.Error;\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n\n        return;\n      },\n      type: 'unhandledrejection',\n    });\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    const groups = message.match(ERROR_TYPES_RE);\n    if (groups) {\n      name = groups[1];\n      message = groups[2];\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * Create an event from a promise rejection where the `reason` is a primitive.\n   *\n   * @param reason: The `reason` property of the promise rejection\n   * @returns An Event object with an appropriate `exception` value\n   */\n  private _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n            value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        const handler = self._handler && self._handler.bind(self);\n        return typeof handler === 'function' ? handler(event, hint) : event;\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((currentEvent: Event) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (self._shouldDropEvent(currentEvent, self._previousEvent)) {\n            logger.warn(`Event dropped due to being a duplicate of previously captured event.`);\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n    if (!previousEvent) {\n      return false;\n    }\n\n    if (this._isSameMessageEvent(currentEvent, previousEvent)) {\n      return true;\n    }\n\n    if (this._isSameExceptionEvent(currentEvent, previousEvent)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n    const currentMessage = currentEvent.message;\n    const previousMessage = previousEvent.message;\n\n    // If neither event has a message property, they were both exceptions, so bail out\n    if (!currentMessage && !previousMessage) {\n      return false;\n    }\n\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n      return false;\n    }\n\n    if (currentMessage !== previousMessage) {\n      return false;\n    }\n\n    if (!this._isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this._isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n    const exception = event.exception;\n\n    if (exception) {\n      try {\n        // @ts-ignore Object could be undefined\n        return exception.values[0].stacktrace.frames;\n      } catch (_oO) {\n        return undefined;\n      }\n    } else if (event.stacktrace) {\n      return event.stacktrace.frames;\n    }\n    return undefined;\n  }\n\n  /** JSDoc */\n  private _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n    let currentFrames = this._getFramesFromEvent(currentEvent);\n    let previousFrames = this._getFramesFromEvent(previousEvent);\n\n    // If neither event has a stacktrace, they are assumed to be the same\n    if (!currentFrames && !previousFrames) {\n      return true;\n    }\n\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n      return false;\n    }\n\n    currentFrames = currentFrames as StackFrame[];\n    previousFrames = previousFrames as StackFrame[];\n\n    // If number of frames differ, they are not the same\n    if (previousFrames.length !== currentFrames.length) {\n      return false;\n    }\n\n    // Otherwise, compare the two\n    for (let i = 0; i < previousFrames.length; i++) {\n      const frameA = previousFrames[i];\n      const frameB = currentFrames[i];\n\n      if (\n        frameA.filename !== frameB.filename ||\n        frameA.lineno !== frameB.lineno ||\n        frameA.colno !== frameB.colno ||\n        frameA.function !== frameB.function\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private _getExceptionFromEvent(event: Event): Exception | undefined {\n    return event.exception && event.exception.values && event.exception.values[0];\n  }\n\n  /** JSDoc */\n  private _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n    const previousException = this._getExceptionFromEvent(previousEvent);\n    const currentException = this._getExceptionFromEvent(currentEvent);\n\n    if (!previousException || !currentException) {\n      return false;\n    }\n\n    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n      return false;\n    }\n\n    if (!this._isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this._isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n    let currentFingerprint = currentEvent.fingerprint;\n    let previousFingerprint = previousEvent.fingerprint;\n\n    // If neither event has a fingerprint, they are assumed to be the same\n    if (!currentFingerprint && !previousFingerprint) {\n      return true;\n    }\n\n    // If only one event has a fingerprint, but not the other one, they are not the same\n    if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n      return false;\n    }\n\n    currentFingerprint = currentFingerprint as string[];\n    previousFingerprint = previousFingerprint as string[];\n\n    // Otherwise, compare the two\n    try {\n      return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n    } catch (_oO) {\n      return false;\n    }\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = event.request?.url || global.location?.href;\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...event.request?.headers,\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { addInstrumentationHandler, getGlobalObject, logger, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, Dedupe, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new Dedupe(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    options.eventId = hub.lastEventId();\n  }\n  const client = hub.getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  logger.warn('Cannot flush events. No client defined.');\n  return SyncPromise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return SyncPromise.resolve(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n  // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n  // pinned at the same version in package.json, but there are edge cases where it's possible. See\n  // https://github.com/getsentry/sentry-javascript/issues/3207 and\n  // https://github.com/getsentry/sentry-javascript/issues/3234 and\n  // https://github.com/getsentry/sentry-javascript/issues/3278.\n  if (typeof hub.startSession !== 'function' || typeof hub.captureSession !== 'function') {\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  hub.startSession({ ignoreDuration: true });\n  hub.captureSession();\n\n  // We want to create a session for every navigation as well\n  addInstrumentationHandler({\n    callback: ({ from, to }) => {\n      // Don't create an additional session for the initial route or if the location did not change\n      if (from === undefined || from === to) {\n        return;\n      }\n      hub.startSession({ ignoreDuration: true });\n      hub.captureSession();\n    },\n    type: 'history',\n  });\n}\n","// That's the `global.Zone` exposed when the `zone.js` package is used.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Zone: any;\n\n// There're 2 types of Angular applications:\n// 1) zone-full (by default)\n// 2) zone-less\n// The developer can avoid importing the `zone.js` package and tells Angular that\n// he is responsible for running the change detection by himself. This is done by\n// \"nooping\" the zone through `CompilerOptions` when bootstrapping the root module.\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst isNgZoneEnabled = typeof Zone !== 'undefined' && !!Zone.current;\n\n/**\n * The function that does the same job as `NgZone.runOutsideAngular`.\n */\nexport function runOutsideAngular<T>(callback: () => T): T {\n  // The `Zone.root.run` basically will run the `callback` in the most parent zone.\n  // Any asynchronous API used inside the `callback` won't catch Angular's zone\n  // since `Zone.current` will reference `Zone.root`.\n  // The Angular's zone is forked from the `Zone.root`. In this case, `zone.js` won't\n  // trigger change detection, and `ApplicationRef.tick()` will not be run.\n  // Caretaker note: we're using `Zone.root` except `NgZone.runOutsideAngular` since this\n  // will require injecting the `NgZone` facade. That will create a breaking change for\n  // projects already using the `@sentry/angular`.\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return isNgZoneEnabled ? Zone.root.run(callback) : callback();\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler as AngularErrorHandler, Injectable } from '@angular/core';\nimport * as Sentry from '@sentry/browser';\n\nimport { runOutsideAngular } from './zone';\n\n/**\n * Options used to configure the behavior of the Angular ErrorHandler.\n */\nexport interface ErrorHandlerOptions {\n  logErrors?: boolean;\n  showDialog?: boolean;\n  dialogOptions?: Sentry.ReportDialogOptions;\n  /**\n   * Custom implementation of error extraction from the raw value captured by the Angular.\n   * @param error Value captured by Angular's ErrorHandler provider\n   * @param defaultExtractor Default implementation that can be used as the fallback in case of custom implementation\n   */\n  extractor?(error: unknown, defaultExtractor: (error: unknown) => unknown): unknown;\n}\n\n/**\n * Implementation of Angular's ErrorHandler provider that can be used as a drop-in replacement for the stock one.\n */\n@Injectable({ providedIn: 'root' })\nclass SentryErrorHandler implements AngularErrorHandler {\n  protected readonly _options: ErrorHandlerOptions;\n\n  public constructor(options?: ErrorHandlerOptions) {\n    this._options = {\n      logErrors: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Method called for every value captured through the ErrorHandler\n   */\n  public handleError(error: unknown): void {\n    const extractedError = this._extractError(error) || 'Handled unknown error';\n\n    // Capture handled exception and send it to Sentry.\n    const eventId = runOutsideAngular(() => Sentry.captureException(extractedError));\n\n    // When in development mode, log the error to console for immediate feedback.\n    if (this._options.logErrors) {\n      // eslint-disable-next-line no-console\n      console.error(extractedError);\n    }\n\n    // Optionally show user dialog to provide details on what happened.\n    if (this._options.showDialog) {\n      Sentry.showReportDialog({ ...this._options.dialogOptions, eventId });\n    }\n  }\n\n  /**\n   * Used to pull a desired value that will be used to capture an event out of the raw value captured by ErrorHandler.\n   */\n  protected _extractError(error: unknown): unknown {\n    // Allow custom overrides of extracting function\n    if (this._options.extractor) {\n      const defaultExtractor = this._defaultExtractor.bind(this);\n      return this._options.extractor(error, defaultExtractor);\n    }\n\n    return this._defaultExtractor(error);\n  }\n\n  /**\n   * Default implementation of error extraction that handles default error wrapping, HTTP responses, ErrorEvent and few other known cases.\n   */\n  protected _defaultExtractor(errorCandidate: unknown): unknown {\n    let error = errorCandidate;\n\n    // Try to unwrap zone.js error.\n    // https://github.com/angular/angular/blob/master/packages/core/src/util/errors.ts\n    if (error && (error as { ngOriginalError: Error }).ngOriginalError) {\n      error = (error as { ngOriginalError: Error }).ngOriginalError;\n    }\n\n    // We can handle messages and Error objects directly.\n    if (typeof error === 'string' || error instanceof Error) {\n      return error;\n    }\n\n    // If it's http module error, extract as much information from it as we can.\n    if (error instanceof HttpErrorResponse) {\n      // The `error` property of http exception can be either an `Error` object, which we can use directly...\n      if (error.error instanceof Error) {\n        return error.error;\n      }\n\n      // ... or an`ErrorEvent`, which can provide us with the message but no stack...\n      if (error.error instanceof ErrorEvent && error.error.message) {\n        return error.error.message;\n      }\n\n      // ...or the request body itself, which we can use as a message instead.\n      if (typeof error.error === 'string') {\n        return `Server returned code ${error.status} with body \"${error.error}\"`;\n      }\n\n      // If we don't have any detailed information, fallback to the request message itself.\n      return error.message;\n    }\n\n    // Nothing was extracted, fallback to default error message.\n    return null;\n  }\n}\n\n/**\n * Factory function that creates an instance of a preconfigured ErrorHandler provider.\n */\nfunction createErrorHandler(config?: ErrorHandlerOptions): SentryErrorHandler {\n  return new SentryErrorHandler(config);\n}\n\nexport { createErrorHandler, SentryErrorHandler };\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent|HttpHeaderResponse|HttpResponse<T>|HttpProgressEvent|HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type!: HttpEventType.Response|HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = HttpStatusCode.Ok, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any|null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n          init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport const enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = 200,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = 204,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511\n}\n","export const isArray = (() => Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number'))();\n","export function isObject(x: any): x is Object {\n  return x !== null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nconst UnsubscriptionErrorImpl = (() => {\n  function UnsubscriptionErrorImpl(this: any, errors: any[]) {\n    Error.call(this);\n    this.message = errors ?\n      `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n  }\n\n  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n  return UnsubscriptionErrorImpl;\n})();\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (this as any)._ctorUnsubscribe = true;\n      (this as any)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      // It's only possible to null _unsubscribe - to release the reference to\n      // any teardown function passed in the constructor - if the property was\n      // actually assigned in the constructor, as there are some classes that\n      // are derived from Subscriber (which derives from Subscription) that\n      // implement an _unsubscribe method as a mechanism for obtaining\n      // unsubscription notifications and some of those subscribers are\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\n      // from a prototype method to an instance property - see notifyNext in\n      // RetryWhenSubscriber.\n      if (_ctorUnsubscribe) {\n        (this as any)._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; }, 0);\n}","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber = (() =>\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random())();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { filter } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, TeardownLogic } from '../types';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Use an observer instead of a complete callback */\nexport function tap<T>(next: null | undefined, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Use an observer instead of an error callback */\nexport function tap<T>(next: null | undefined, error: (error: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Use an observer instead of a complete callback */\nexport function tap<T>(next: (value: T) => void, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * ![](do.png)\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `tap` is not subscribed, the side effects specified by the\n * Observer will never happen. `tap` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * ## Example\n * Map every click to the clientX position of that click, while also logging the click event\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { tap, map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(\n *   tap(ev => console.log(ev)),\n *   map(ev => ev.clientX),\n * );\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n * @see {@link Observable#subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nclass TapSubscriber<T> extends Subscriber<T> {\n  private _context: any;\n\n  private _tapNext: ((value: T) => void) = noop;\n\n  private _tapError: ((err: any) => void) = noop;\n\n  private _tapComplete: (() => void) = noop;\n\n  constructor(destination: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n      super(destination);\n      this._tapError = error || noop;\n      this._tapComplete = complete || noop;\n      if (isFunction(observerOrNext)) {\n        this._context = this;\n        this._tapNext = observerOrNext;\n      } else if (observerOrNext) {\n        this._context = observerOrNext;\n        this._tapNext = observerOrNext.next || noop;\n        this._tapError = observerOrNext.error || noop;\n        this._tapComplete = observerOrNext.complete || noop;\n      }\n    }\n\n  _next(value: T) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(value);\n  }\n\n  _error(err: any) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.error(err);\n  }\n\n  _complete() {\n    try {\n      this._tapComplete.call(this._context, );\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    return this.destination.complete();\n  }\n}\n","export const ANGULAR_ROUTING_OP = 'ui.angular.routing';\n\nexport const ANGULAR_INIT_OP = 'ui.angular.init';\n\nexport const ANGULAR_OP = 'ui.angular';\n","import { AfterViewInit, Directive, Injectable, Input, NgModule, OnDestroy, OnInit } from '@angular/core';\nimport { Event, NavigationEnd, NavigationStart, Router } from '@angular/router';\nimport { getCurrentHub } from '@sentry/browser';\nimport { Span, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject, logger, stripUrlQueryAndFragment, timestampWithMs } from '@sentry/utils';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { ANGULAR_INIT_OP, ANGULAR_OP, ANGULAR_ROUTING_OP } from './constants';\nimport { runOutsideAngular } from './zone';\n\nlet instrumentationInitialized: boolean;\nlet stashedStartTransaction: (context: TransactionContext) => Transaction | undefined;\nlet stashedStartTransactionOnLocationChange: boolean;\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Creates routing instrumentation for Angular Router.\n */\nexport function routingInstrumentation(\n  customStartTransaction: (context: TransactionContext) => Transaction | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  instrumentationInitialized = true;\n  stashedStartTransaction = customStartTransaction;\n  stashedStartTransactionOnLocationChange = startTransactionOnLocationChange;\n\n  if (startTransactionOnPageLoad) {\n    customStartTransaction({\n      name: global.location.pathname,\n      op: 'pageload',\n    });\n  }\n}\n\nexport const instrumentAngularRouting = routingInstrumentation;\n\n/**\n * Grabs active transaction off scope\n */\nexport function getActiveTransaction(): Transaction | undefined {\n  const currentHub = getCurrentHub();\n\n  if (currentHub) {\n    const scope = currentHub.getScope();\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Angular's Service responsible for hooking into Angular Router and tracking current navigation process.\n * Creates a new transaction for every route change and measures a duration of routing process.\n */\n@Injectable({ providedIn: 'root' })\nexport class TraceService implements OnDestroy {\n  public navStart$: Observable<Event> = this._router.events.pipe(\n    filter(event => event instanceof NavigationStart),\n    tap(event => {\n      if (!instrumentationInitialized) {\n        logger.error('Angular integration has tracing enabled, but Tracing integration is not configured');\n        return;\n      }\n\n      const navigationEvent = event as NavigationStart;\n      const strippedUrl = stripUrlQueryAndFragment(navigationEvent.url);\n      let activeTransaction = getActiveTransaction();\n\n      if (!activeTransaction && stashedStartTransactionOnLocationChange) {\n        activeTransaction = stashedStartTransaction({\n          name: strippedUrl,\n          op: 'navigation',\n        });\n      }\n\n      if (activeTransaction) {\n        if (this._routingSpan) {\n          this._routingSpan.finish();\n        }\n        this._routingSpan = activeTransaction.startChild({\n          description: `${navigationEvent.url}`,\n          op: ANGULAR_ROUTING_OP,\n          tags: {\n            'routing.instrumentation': '@sentry/angular',\n            url: strippedUrl,\n            ...(navigationEvent.navigationTrigger && {\n              navigationTrigger: navigationEvent.navigationTrigger,\n            }),\n          },\n        });\n      }\n    }),\n  );\n\n  public navEnd$: Observable<Event> = this._router.events.pipe(\n    filter(event => event instanceof NavigationEnd),\n    tap(() => {\n      if (this._routingSpan) {\n        runOutsideAngular(() => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          this._routingSpan!.finish();\n        });\n        this._routingSpan = null;\n      }\n    }),\n  );\n\n  private _routingSpan: Span | null = null;\n  private _subscription: Subscription = new Subscription();\n\n  public constructor(private readonly _router: Router) {\n    this._subscription.add(this.navStart$.subscribe());\n    this._subscription.add(this.navEnd$.subscribe());\n  }\n\n  /**\n   * This is used to prevent memory leaks when the root view is created and destroyed multiple times,\n   * since `subscribe` callbacks capture `this` and prevent many resources from being GC'd.\n   */\n  public ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n}\n\nconst UNKNOWN_COMPONENT = 'unknown';\n\n/**\n * A directive that can be used to capture initialization lifecycle of the whole component.\n */\n@Directive({ selector: '[trace]' })\nexport class TraceDirective implements OnInit, AfterViewInit {\n  @Input('trace') public componentName: string = UNKNOWN_COMPONENT;\n\n  private _tracingSpan?: Span;\n\n  /**\n   * Implementation of OnInit lifecycle method\n   * @inheritdoc\n   */\n  public ngOnInit(): void {\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      this._tracingSpan = activeTransaction.startChild({\n        description: `<${this.componentName}>`,\n        op: ANGULAR_INIT_OP,\n      });\n    }\n  }\n\n  /**\n   * Implementation of AfterViewInit lifecycle method\n   * @inheritdoc\n   */\n  public ngAfterViewInit(): void {\n    if (this._tracingSpan) {\n      this._tracingSpan.finish();\n    }\n  }\n}\n\n/**\n * A module serves as a single compilation unit for the `TraceDirective` and can be re-used by any other module.\n */\n@NgModule({\n  declarations: [TraceDirective],\n  exports: [TraceDirective],\n})\nexport class TraceModule {}\n\n/**\n * Decorator function that can be used to capture initialization lifecycle of the whole component.\n */\nexport function TraceClassDecorator(): ClassDecorator {\n  let tracingSpan: Span;\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  return target => {\n    const originalOnInit = target.prototype.ngOnInit;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    target.prototype.ngOnInit = function(...args: any[]): ReturnType<typeof originalOnInit> {\n      const activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        tracingSpan = activeTransaction.startChild({\n          description: `<${target.name}>`,\n          op: ANGULAR_INIT_OP,\n        });\n      }\n      if (originalOnInit) {\n        return originalOnInit.apply(this, args);\n      }\n    };\n\n    const originalAfterViewInit = target.prototype.ngAfterViewInit;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    target.prototype.ngAfterViewInit = function(...args: any[]): ReturnType<typeof originalAfterViewInit> {\n      if (tracingSpan) {\n        tracingSpan.finish();\n      }\n      if (originalAfterViewInit) {\n        return originalAfterViewInit.apply(this, args);\n      }\n    };\n  };\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Decorator function that can be used to capture a single lifecycle methods of the component.\n */\nexport function TraceMethodDecorator(): MethodDecorator {\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/ban-types\n  return (target: Object, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    descriptor.value = function(...args: any[]): ReturnType<typeof originalMethod> {\n      const now = timestampWithMs();\n      const activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        activeTransaction.startChild({\n          description: `<${target.constructor.name}>`,\n          endTimestamp: now,\n          op: `${ANGULAR_OP}.${String(propertyKey)}`,\n          startTimestamp: now,\n        });\n      }\n      if (originalMethod) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return originalMethod.apply(this, args);\n      }\n    };\n    return descriptor;\n  };\n}\n","import {APP_INITIALIZER, ErrorHandler, NgModule} from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {Router} from \"@angular/router\";\nimport * as Sentry from \"@sentry/angular\";\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [\n    {\n      provide: ErrorHandler,\n      useValue: Sentry.createErrorHandler({\n        showDialog: false,\n      }),\n    },\n    {\n      provide: Sentry.TraceService,\n      deps: [Router],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => () => {},\n      deps: [Sentry.TraceService],\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { getGlobalObject, logger } from '@sentry/utils';\n\nimport { FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS } from '../constants';\nimport { IdleTransaction } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { getActiveTransaction } from '../utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (global && global.document) {\n    global.document.addEventListener('visibilitychange', () => {\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (global.document.hidden && activeTransaction) {\n        logger.log(\n          `[Tracing] Transaction: ${SpanStatus.Cancelled} -> since tab moved to the background, op: ${activeTransaction.op}`,\n        );\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(SpanStatus.Cancelled);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[2]);\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric, ReportHandler } from '../types';\n\nexport const bindReporter = (\n  callback: ReportHandler,\n  metric: Metric,\n  reportAllChanges?: boolean,\n): ((forceReport?: boolean) => void) => {\n  let prevValue: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        metric.delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (metric.delta || prevValue === undefined) {\n          prevValue = metric.value;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Metric } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\n\nexport const initMetric = (name: Metric['name'], value?: number): Metric => {\n  return {\n    name,\n    value: value ?? -1,\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = (): string => {\n  return `v2-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = (type: string, callback: PerformanceEntryHandler): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      // More extensive feature detect needed for Firefox due to:\n      // https://github.com/GoogleChrome/web-vitals/issues/142\n      if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n        return;\n      }\n\n      const po: PerformanceObserver = new PerformanceObserver(l => l.getEntries().map(callback));\n\n      po.observe({ type, buffered: true });\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nexport interface OnHiddenCallback {\n  (event: Event): void;\n}\n\nexport const onHidden = (cb: OnHiddenCallback, once?: boolean): void => {\n  const onHiddenOrPageHide = (event: Event): void => {\n    if (event.type === 'pagehide' || getGlobalObject<Window>().document.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n  addEventListener('visibilitychange', onHiddenOrPageHide, true);\n  // Some browsers have buggy implementations of visibilitychange,\n  // so we use pagehide in addition, just to be safe.\n  addEventListener('pagehide', onHiddenOrPageHide, true);\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): number => {\n  return getGlobalObject<Window>().document.visibilityState === 'hidden' ? 0 : Infinity;\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    firstHiddenTime = initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/largest-contentful-paint/#sec-largest-contentful-paint-interface\nexport interface LargestContentfulPaint extends PerformanceEntry {\n  renderTime: DOMHighResTimeStamp;\n  loadTime: DOMHighResTimeStamp;\n  size: number;\n  id: string;\n  url: string;\n  element?: Element;\n  toJSON(): Record<string, string>;\n}\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\nexport const getLCP = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEntry): void => {\n    // The startTime attribute returns the value of the renderTime if it is not 0,\n    // and the value of the loadTime otherwise.\n    const value = entry.startTime;\n\n    // If the page was hidden prior to paint time of the entry,\n    // ignore it and mark the metric as final, otherwise add the entry.\n    if (value < visibilityWatcher.firstHiddenTime) {\n      metric.value = value;\n      metric.entries.push(entry);\n    }\n\n    if (report) {\n      report();\n    }\n  };\n\n  const po = observe('largest-contentful-paint', entryHandler);\n\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n  }\n};\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Measurements, SpanContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getGlobalObject, htmlTreeAsString, isNodeEnv, logger } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { Transaction } from '../transaction';\nimport { msToSec } from '../utils';\nimport { getCLS, LayoutShift } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP, LargestContentfulPaint } from './web-vitals/getLCP';\nimport { getVisibilityWatcher } from './web-vitals/lib/getVisibilityWatcher';\nimport { NavigatorDeviceMemory, NavigatorNetworkInformation } from './web-vitals/types';\n\nconst global = getGlobalObject<Window>();\n\n/** Class tracking metrics  */\nexport class MetricsInstrumentation {\n  private _measurements: Measurements = {};\n\n  private _performanceCursor: number = 0;\n  private _lcpEntry: LargestContentfulPaint | undefined;\n  private _clsEntry: LayoutShift | undefined;\n\n  public constructor(private _reportAllChanges: boolean = false) {\n    if (!isNodeEnv() && global?.performance && global?.document) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n    }\n  }\n\n  /** Add performance related spans to a transaction */\n  public addPerformanceEntries(transaction: Transaction): void {\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    logger.log('[Tracing] Adding & adjusting spans using Performance API');\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    let entryScriptSrc: string | undefined;\n\n    if (global.document && global.document.scripts) {\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let i = 0; i < global.document.scripts.length; i++) {\n        // We go through all scripts on the page and look for 'data-entry'\n        // We remember the name and measure the time between this script finished loading and\n        // our mark 'sentry-tracing-init'\n        if (global.document.scripts[i].dataset.entry === 'true') {\n          entryScriptSrc = global.document.scripts[i].src;\n          break;\n        }\n      }\n    }\n\n    let entryScriptStartTimestamp: number | undefined;\n    let tracingInitMarkStartTime: number | undefined;\n    let responseStartTimestamp: number | undefined;\n    let requestStartTimestamp: number | undefined;\n\n    global.performance\n      .getEntries()\n      .slice(this._performanceCursor)\n      .forEach((entry: Record<string, any>) => {\n        const startTime = msToSec(entry.startTime as number);\n        const duration = msToSec(entry.duration as number);\n\n        if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n          return;\n        }\n\n        switch (entry.entryType) {\n          case 'navigation': {\n            addNavigationSpans(transaction, entry, timeOrigin);\n            responseStartTimestamp = timeOrigin + msToSec(entry.responseStart as number);\n            requestStartTimestamp = timeOrigin + msToSec(entry.requestStart as number);\n            break;\n          }\n          case 'mark':\n          case 'paint':\n          case 'measure': {\n            const startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            if (tracingInitMarkStartTime === undefined && entry.name === 'sentry-tracing-init') {\n              tracingInitMarkStartTime = startTimestamp;\n            }\n\n            // capture web vitals\n\n            const firstHidden = getVisibilityWatcher();\n            // Only report if the page wasn't hidden prior to the web vital.\n            const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n            if (entry.name === 'first-paint' && shouldRecord) {\n              logger.log('[Measurements] Adding FP');\n              this._measurements['fp'] = { value: entry.startTime };\n              this._measurements['mark.fp'] = { value: startTimestamp };\n            }\n\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              logger.log('[Measurements] Adding FCP');\n              this._measurements['fcp'] = { value: entry.startTime };\n              this._measurements['mark.fcp'] = { value: startTimestamp };\n            }\n\n            break;\n          }\n          case 'resource': {\n            const resourceName = (entry.name as string).replace(global.location.origin, '');\n            const endTimestamp = addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            // We remember the entry script end time to calculate the difference to the first init mark\n            if (entryScriptStartTimestamp === undefined && (entryScriptSrc || '').indexOf(resourceName) > -1) {\n              entryScriptStartTimestamp = endTimestamp;\n            }\n            break;\n          }\n          default:\n          // Ignore other entry types.\n        }\n      });\n\n    if (entryScriptStartTimestamp !== undefined && tracingInitMarkStartTime !== undefined) {\n      _startChild(transaction, {\n        description: 'evaluation',\n        endTimestamp: tracingInitMarkStartTime,\n        op: 'script',\n        startTimestamp: entryScriptStartTimestamp,\n      });\n    }\n\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n\n    this._trackNavigator(transaction);\n\n    // Measurements are only available for pageload transactions\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n      // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n      // start of the response in milliseconds\n      if (typeof responseStartTimestamp === 'number') {\n        logger.log('[Measurements] Adding TTFB');\n        this._measurements['ttfb'] = { value: (responseStartTimestamp - transaction.startTimestamp) * 1000 };\n\n        if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n          // Capture the time spent making the request and receiving the first byte of the response.\n          // This is the time between the start of the request and the start of the response in milliseconds.\n          this._measurements['ttfb.requestTime'] = { value: (responseStartTimestamp - requestStartTimestamp) * 1000 };\n        }\n      }\n\n      ['fcp', 'fp', 'lcp'].forEach(name => {\n        if (!this._measurements[name] || timeOrigin >= transaction.startTimestamp) {\n          return;\n        }\n\n        // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n\n        const oldValue = this._measurements[name].value;\n        const measurementTimestamp = timeOrigin + msToSec(oldValue);\n        // normalizedValue should be in milliseconds\n        const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n\n        const delta = normalizedValue - oldValue;\n        logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n\n        this._measurements[name].value = normalizedValue;\n      });\n\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value,\n        });\n      }\n\n      // If FCP is not recorded we should not record the cls value\n      // according to the new definition of CLS.\n      if (!('fcp' in this._measurements)) {\n        delete this._measurements.cls;\n      }\n\n      transaction.setMeasurements(this._measurements);\n      this._tagMetricInfo(transaction);\n\n      transaction.setTag('sentry_reportAllChanges', this._reportAllChanges);\n    }\n  }\n\n  /** Add LCP / CLS data to transaction to allow debugging */\n  private _tagMetricInfo(transaction: Transaction): void {\n    if (this._lcpEntry) {\n      logger.log('[Measurements] Adding LCP Data');\n      // Capture Properties of the LCP element that contributes to the LCP.\n\n      if (this._lcpEntry.element) {\n        transaction.setTag('lcp.element', htmlTreeAsString(this._lcpEntry.element));\n      }\n\n      if (this._lcpEntry.id) {\n        transaction.setTag('lcp.id', this._lcpEntry.id);\n      }\n\n      if (this._lcpEntry.url) {\n        // Trim URL to the first 200 characters.\n        transaction.setTag('lcp.url', this._lcpEntry.url.trim().slice(0, 200));\n      }\n\n      transaction.setTag('lcp.size', this._lcpEntry.size);\n    }\n\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n    if (this._clsEntry && this._clsEntry.sources) {\n      logger.log('[Measurements] Adding CLS Data');\n      this._clsEntry.sources.forEach((source, index) =>\n        transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n      );\n    }\n  }\n\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n  private _trackCLS(): void {\n    // See:\n    // https://web.dev/evolving-cls/\n    // https://web.dev/cls-web-tooling/\n    getCLS(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      logger.log('[Measurements] Adding CLS');\n      this._measurements['cls'] = { value: metric.value };\n      this._clsEntry = entry as LayoutShift;\n    });\n  }\n\n  /**\n   * Capture the information of the user agent.\n   */\n  private _trackNavigator(transaction: Transaction): void {\n    const navigator = global.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n    if (!navigator) {\n      return;\n    }\n\n    // track network connectivity\n    const connection = navigator.connection;\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = { value: connection.rtt as number };\n      }\n\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = { value: connection.downlink as number };\n      }\n    }\n\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  }\n\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  private _trackLCP(): void {\n    getLCP(metric => {\n      const entry = metric.entries.pop();\n\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime as number);\n      logger.log('[Measurements] Adding LCP');\n      this._measurements['lcp'] = { value: metric.value };\n      this._measurements['mark.lcp'] = { value: timeOrigin + startTime };\n      this._lcpEntry = entry as LargestContentfulPaint;\n    }, this._reportAllChanges);\n  }\n\n  /** Starts tracking the First Input Delay on the current page. */\n  private _trackFID(): void {\n    getFID(metric => {\n      const entry = metric.entries.pop();\n\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime as number);\n      logger.log('[Measurements] Adding FID');\n      this._measurements['fid'] = { value: metric.value };\n      this._measurements['mark.fid'] = { value: timeOrigin + startTime };\n    });\n  }\n}\n\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  addPerformanceNavigationTiming({ transaction, entry, event: 'unloadEvent', timeOrigin });\n  addPerformanceNavigationTiming({ transaction, entry, event: 'redirect', timeOrigin });\n  addPerformanceNavigationTiming({ transaction, entry, event: 'domContentLoadedEvent', timeOrigin });\n  addPerformanceNavigationTiming({ transaction, entry, event: 'loadEvent', timeOrigin });\n  addPerformanceNavigationTiming({ transaction, entry, event: 'connect', timeOrigin });\n  addPerformanceNavigationTiming({\n    transaction,\n    entry,\n    event: 'secureConnection',\n    timeOrigin,\n    eventEnd: 'connectEnd',\n    description: 'TLS/SSL',\n  });\n  addPerformanceNavigationTiming({\n    transaction,\n    entry,\n    event: 'fetch',\n    timeOrigin,\n    eventEnd: 'domainLookupStart',\n    description: 'cache',\n  });\n  addPerformanceNavigationTiming({ transaction, entry, event: 'domainLookup', timeOrigin, description: 'DNS' });\n  addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create measure related spans */\nfunction addMeasureSpans(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n}\n\n/** Create resource-related spans */\nexport function addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number | undefined {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return undefined;\n  }\n\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource',\n    startTimestamp,\n    data,\n  });\n\n  return endTimestamp;\n}\n\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(props: {\n  transaction: Transaction;\n  entry: Record<string, any>;\n  event: string;\n  timeOrigin: number;\n  eventEnd?: string;\n  description?: string;\n}): void {\n  const { transaction, entry, event, timeOrigin, eventEnd, description } = props;\n\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description ?? event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\nfunction addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value: any): boolean {\n  return typeof value === 'number' && isFinite(value);\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\nexport interface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n  sources: Array<LayoutShiftAttribution>;\n  toJSON(): Record<string, unknown>;\n}\n\nexport interface LayoutShiftAttribution {\n  node?: Node;\n  previousRect: DOMRectReadOnly;\n  currentRect: DOMRectReadOnly;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n      // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n      if (\n        sessionValue &&\n        sessionEntries.length !== 0 &&\n        entry.startTime - lastSessionEntry.startTime < 1000 &&\n        entry.startTime - firstSessionEntry.startTime < 5000\n      ) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      report(true);\n    });\n  }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { PerformanceEventTiming, ReportHandler } from './types';\n\nexport const getFID = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  let report: ReturnType<typeof bindReporter>;\n\n  const entryHandler = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const po = observe('first-input', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      po.disconnect();\n    }, true);\n  }\n};\n","import { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { SpanStatus } from '../spanstatus';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n  error?: unknown;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentationOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler({\n      callback: (handlerData: FetchData) => {\n        fetchCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'fetch',\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler({\n      callback: (handlerData: XHRData) => {\n        xhrCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'xhr',\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__span) {\n    const span = spans[handlerData.fetchData.__span];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n      } else if (handlerData.error) {\n        span.setStatus(SpanStatus.InternalError);\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.fetchData.__span];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    let headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = (request as Request).headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = [...headers, ['sentry-trace', span.toTraceparent()]];\n      } else {\n        headers = { ...headers, 'sentry-trace': span.toTraceparent() };\n      }\n    } else {\n      headers = { 'sentry-trace': span.toTraceparent() };\n    }\n    options.headers = headers;\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  if (\n    !hasTracingEnabled() ||\n    handlerData.xhr?.__sentry_own_request__ ||\n    !(handlerData.xhr?.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {\n    const span = spans[handlerData.xhr.__sentry_xhr_span_id__];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.xhr.__sentry_xhr_span_id__];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http.client',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n","import { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'pageload' });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler({\n      callback: ({ to, from }: { to: string; from?: string }) => {\n        /**\n         * This early return is there to account for some cases where a navigation transaction starts right after\n         * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n         * create an uneccessary navigation transaction.\n         *\n         * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n         * only be caused in certain development environments where the usage of a hot module reloader is causing\n         * errors.\n         */\n        if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n          startingUrl = undefined;\n          return;\n        }\n\n        if (from !== to) {\n          startingUrl = undefined;\n          if (activeTransaction) {\n            logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n            // If there's an open transaction on the scope, we need to finish it before creating an new one.\n            activeTransaction.finish();\n          }\n          activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'navigation' });\n        }\n      },\n      type: 'history',\n    });\n  }\n}\n","import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  instrumentOutgoingRequests,\n  RequestInstrumentationOptions,\n} from './request';\nimport { instrumentRoutingWithDefaults } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{ _reportAllChanges: boolean }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'BrowserTracing';\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BrowserTracing.id;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _metrics: MetricsInstrumentation;\n\n  private readonly _emitOptionsWarning: boolean = false;\n\n  /** Store configured idle timeout so that it can be added as a tag to transactions */\n  private _configuredIdleTimeout: BrowserTracingOptions['idleTimeout'] | undefined = undefined;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options) {\n      this._configuredIdleTimeout = _options.idleTimeout;\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        this._emitOptionsWarning = true;\n      }\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n\n    const { _metricOptions } = this.options;\n    this._metrics = new MetricsInstrumentation(_metricOptions && _metricOptions._reportAllChanges);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn(\n        '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n      );\n      logger.warn(\n        `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    instrumentRouting(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    instrumentOutgoingRequests({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, maxTransactionDuration } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = getGlobalObject() as WindowOrWorkerGlobalScope & { location: Location };\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n    );\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n\n    idleTransaction.setTag('idleTimeout', this._configuredIdleTimeout);\n\n    return idleTransaction as Transaction;\n  }\n}\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext(): Partial<TransactionContext> | undefined {\n  const header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const el = getGlobalObject<Window>().document.querySelector(`meta[name=${metaName}]`);\n  return el ? el.getAttribute('content') : null;\n}\n\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration: number, transaction: IdleTransaction, endTimestamp: number): void {\n  const diff = endTimestamp - transaction.startTimestamp;\n  const isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus(SpanStatus.DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n","import { addExtensionMethods } from './hubextensions';\nimport * as Integrations from './integrations';\n\nexport { Integrations };\n\n// This is already exported as part of `Integrations` above (and for the moment will remain so for\n// backwards compatibility), but that interferes with treeshaking, so we also export it separately\n// here.\n//\n// Previously we expected users to import tracing integrations like\n//\n// import { Integrations } from '@sentry/tracing';\n// const instance = new Integrations.BrowserTracing();\n//\n// This makes the integrations unable to be treeshaken though. To address this, we now have\n// this individual export. We now expect users to consume BrowserTracing like so:\n//\n// import { BrowserTracing } from '@sentry/tracing';\n// const instance = new BrowserTracing();\n//\n// For an example of of the new usage of BrowserTracing, see @sentry/nextjs index.client.ts\nexport { BrowserTracing } from './browser';\n\nexport { Span } from './span';\nexport { Transaction } from './transaction';\nexport {\n  // TODO deprecate old name in v7\n  instrumentOutgoingRequests as registerRequestInstrumentation,\n  RequestInstrumentationOptions,\n  defaultRequestInstrumentationOptions,\n} from './browser';\nexport { SpanStatus } from './spanstatus';\nexport { IdleTransaction } from './idletransaction';\nexport { startIdleTransaction } from './hubextensions';\n\n// We are patching the global object with our hub extension methods\naddExtensionMethods();\n\nexport { addExtensionMethods };\n\nexport {\n  extractTraceparentData,\n  getActiveTransaction,\n  hasTracingEnabled,\n  stripUrlQueryAndFragment,\n  TRACEPARENT_REGEXP,\n} from './utils';\n","import { BrowserOptions, init as browserInit, SDK_VERSION } from '@sentry/browser';\n\n/**\n * Inits the Angular SDK\n */\nexport function init(options: BrowserOptions): void {\n  options._metadata = options._metadata || {};\n  options._metadata.sdk = {\n    name: 'sentry.javascript.angular',\n    packages: [\n      {\n        name: 'npm:@sentry/angular',\n        version: SDK_VERSION,\n      },\n    ],\n    version: SDK_VERSION,\n  };\n  browserInit(options);\n}\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  const hub = getCurrentHub();\n  hub.getScope()?.update(options.initialScope);\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport * as Sentry from \"@sentry/angular\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: \"https://7f359e21065040feb72672697a688b84@o1115047.ingest.sentry.io/6146710\",\n  integrations: [\n    new Integrations.BrowserTracing({\n      tracingOrigins: [\"localhost\", \"https://sentry-mocha.vercel.app/\"],\n      routingInstrumentation: Sentry.routingInstrumentation,\n    }),\n  ],\n  release: 'sentry@2.0.0',\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n});\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number;\n  public started: number;\n  public duration?: number = 0;\n  public status: SessionStatus = SessionStatus.Ok;\n  public environment?: string;\n  public ipAddress?: string;\n  public init: boolean = true;\n  public ignoreDuration: boolean = false;\n\n  public constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    // Both timestamp and started are in seconds since the UNIX epoch.\n    const startingTime = timestampInSeconds();\n    this.timestamp = startingTime;\n    this.started = startingTime;\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  public update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (!this.ipAddress && context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!this.did && !context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || timestampInSeconds();\n    if (context.ignoreDuration) {\n      this.ignoreDuration = context.ignoreDuration;\n    }\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.init !== undefined) {\n      this.init = context.init;\n    }\n    if (!this.did && context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (this.ignoreDuration) {\n      this.duration = undefined;\n    } else if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      const duration = this.timestamp - this.started;\n      this.duration = duration >= 0 ? duration : 0;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (!this.ipAddress && context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (!this.userAgent && context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  public close(status?: Exclude<SessionStatus, SessionStatus.Ok>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({ status: SessionStatus.Exited });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  public toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration?: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: this.init,\n      // Make sure that sec is converted to ms for date constructor\n      started: new Date(this.started * 1000).toISOString(),\n      timestamp: new Date(this.timestamp * 1000).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      }),\n    });\n  }\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  SessionContext,\n  SessionStatus,\n  Severity,\n  Span,\n  SpanContext,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, dateTimestampInSeconds, getGlobalObject, isNodeEnv, logger, uuid4 } from '@sentry/utils';\n\nimport { Scope } from './scope';\nimport { Session } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope?: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Hack to prevent bundlers from breaking our usage of the domain package in the cross-platform Hub package */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      domain?: { [key: string]: any };\n    } & {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @hidden\n * @deprecated Can be removed once `Hub.getActiveDomain` is removed.\n */\nexport interface DomainAsCarrier extends Carrier {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  members: { [key: string]: any }[];\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimic the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: exception,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureException', exception, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimic the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: message,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = uuid4();\n    if (event.type !== 'transaction') {\n      this._lastEventId = eventId;\n    }\n\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(context: SpanContext): Span {\n    return this._callExtensionMethod('startSpan', context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    this.getStackTop()\n      ?.scope?.getSession()\n      ?.close();\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    this.getStackTop()?.scope?.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const global = getGlobalObject<{ navigator?: { userAgent?: string } }>();\n    const { userAgent } = global.navigator || {};\n\n    const session = new Session({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === SessionStatus.Ok) {\n        currentSession.update({ status: SessionStatus.Exited });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n\n    return session;\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession && scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const { scope, client } = this.getStackTop();\n    if (client && client[method]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      (client as any)[method](...args, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Returns the active domain, if one exists\n * @deprecated No longer used; remove in v7\n * @returns The domain, or undefined if there is no active domain\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function getActiveDomain(): DomainAsCarrier | undefined {\n  logger.warn('Function `getActiveDomain` is deprecated and will be removed in a future version.');\n\n  const sentry = getMainCarrier().__SENTRY__;\n\n  return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const activeDomain = getMainCarrier().__SENTRY__?.extensions?.domain?.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) return carrier.__SENTRY__.hub;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\nimport { Session } from './session';\n\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({ user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // often, this span will be a transaction, but it's not guaranteed to be\n    const span = this.getSpan() as undefined | (Span & { spanRecorder: { spans: Span[] } });\n\n    // try it the new way first\n    if (span?.transaction) {\n      return span?.transaction;\n    }\n\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if (span?.spanRecorder?.spans[0]) {\n      return span.spanRecorder.spans[0] as Transaction;\n    }\n\n    // neither way found a transaction\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional information about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction?.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          void (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  const global = getGlobalObject<any>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","// Store finish reasons in tuple to save on bundle size\n// Readonly type should enforce that this is not mutated.\nexport const FINISH_REASON_TAG = 'finishReason';\n\nexport const IDLE_TRANSACTION_FINISH_REASONS = ['heartbeatFailed', 'idleTimeout', 'documentHidden'] as const;\n","import { ExtractedNodeRequestData, Primitive, WorkerLocation } from './misc';\nimport { Span, SpanContext } from './span';\n\n/**\n * Interface holding Transaction-specific properties\n */\nexport interface TransactionContext extends SpanContext {\n  /**\n   * Human-readable identifier for the transaction\n   */\n  name: string;\n\n  /**\n   * If true, sets the end timestamp of the transaction to the highest timestamp of child spans, trimming\n   * the duration of the transaction. This is useful to discard extra time in the transaction that is not\n   * accounted for in child spans, like what happens in the idle transaction Tracing integration, where we finish the\n   * transaction after a given \"idle time\" and we don't want this \"idle time\" to be part of the transaction.\n   */\n  trimEnd?: boolean;\n\n  /**\n   * If this transaction has a parent, the parent's sampling decision\n   */\n  parentSampled?: boolean;\n\n  /**\n   * Metadata associated with the transaction, for internal SDK use.\n   */\n  metadata?: TransactionMetadata;\n}\n\n/**\n * Data pulled from a `sentry-trace` header\n */\nexport type TraceparentData = Pick<TransactionContext, 'traceId' | 'parentSpanId' | 'parentSampled'>;\n\n/**\n * Transaction \"Class\", inherits Span only has `setName`\n */\nexport interface Transaction extends TransactionContext, Span {\n  /**\n   * @inheritDoc\n   */\n  spanId: string;\n\n  /**\n   * @inheritDoc\n   */\n  traceId: string;\n\n  /**\n   * @inheritDoc\n   */\n  startTimestamp: number;\n\n  /**\n   * @inheritDoc\n   */\n  tags: { [key: string]: Primitive };\n\n  /**\n   * @inheritDoc\n   */\n  data: { [key: string]: any };\n\n  /**\n   * Metadata about the transaction\n   */\n  metadata: TransactionMetadata;\n\n  /**\n   * Set the name of the transaction\n   */\n  setName(name: string): void;\n\n  /** Returns the current transaction properties as a `TransactionContext` */\n  toContext(): TransactionContext;\n\n  /** Updates the current transaction with a new `TransactionContext` */\n  updateWithContext(transactionContext: TransactionContext): this;\n}\n\n/**\n * Context data passed by the user when starting a transaction, to be used by the tracesSampler method.\n */\nexport interface CustomSamplingContext {\n  [key: string]: any;\n}\n\n/**\n * Data passed to the `tracesSampler` function, which forms the basis for whatever decisions it might make.\n *\n * Adds default data to data provided by the user. See {@link Hub.startTransaction}\n */\nexport interface SamplingContext extends CustomSamplingContext {\n  /**\n   * Context data with which transaction being sampled was created\n   */\n  transactionContext: TransactionContext;\n\n  /**\n   * Sampling decision from the parent transaction, if any.\n   */\n  parentSampled?: boolean;\n\n  /**\n   * Object representing the URL of the current page or worker script. Passed by default when using the `BrowserTracing`\n   * integration.\n   */\n  location?: WorkerLocation;\n\n  /**\n   * Object representing the incoming request to a node server. Passed by default when using the TracingHandler.\n   */\n  request?: ExtractedNodeRequestData;\n}\n\nexport type Measurements = Record<string, { value: number }>;\n\nexport enum TransactionSamplingMethod {\n  Explicit = 'explicitly_set',\n  Sampler = 'client_sampler',\n  Rate = 'client_rate',\n  Inheritance = 'inheritance',\n}\n\nexport interface TransactionMetadata {\n  transactionSampling?: { rate?: number; method?: string };\n\n  /** The two halves (sentry and third-party) of a transaction's tracestate header, used for dynamic sampling */\n  tracestate?: {\n    sentry?: string;\n    thirdparty?: string;\n  };\n\n  /** For transactions tracing server-side request handling, the path of the request being tracked. */\n  requestPath?: string;\n}\n","import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatus } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'error',\n  });\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'unhandledrejection',\n  });\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    logger.log(`[Tracing] Transaction: ${SpanStatus.InternalError} -> Global error occured`);\n    activeTransaction.setStatus(SpanStatus.InternalError);\n  }\n}\n","import { getMainCarrier, Hub } from '@sentry/hub';\nimport {\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n  TransactionSamplingMethod,\n} from '@sentry/types';\nimport { dynamicRequire, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(transaction: T, options: Options, samplingContext: SamplingContext): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: TransactionSamplingMethod.Explicit },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Sampler,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: TransactionSamplingMethod.Inheritance },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: TransactionSamplingMethod.Rate,\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(`[Tracing] Discarding transaction because of invalid sample rate.`);\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    logger.log(\n      `[Tracing] Discarding transaction because ${\n        typeof options.tracesSampler === 'function'\n          ? 'tracesSampler returned 0 or false'\n          : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n      }`,\n    );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    logger.log(\n      `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n        sampleRate,\n      )})`,\n    );\n    return transaction;\n  }\n\n  logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate as any) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\n      `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n        rate,\n      )} of type ${JSON.stringify(typeof rate)}.`,\n    );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const options = this.getClient()?.getOptions() || {};\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments?.maxSpans as number);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const options = hub.getClient()?.getOptions() || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments?.maxSpans as number);\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n","import { Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\nimport { logger, timestampWithMs } from '@sentry/utils';\n\nimport { FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS } from './constants';\nimport { Span, SpanRecorder } from './span';\nimport { SpanStatus } from './spanstatus';\nimport { Transaction } from './transaction';\n\nexport const DEFAULT_IDLE_TIMEOUT = 1000;\nexport const HEARTBEAT_INTERVAL = 5000;\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string = '',\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  /**\n   * If a transaction is created and no activities are added, we want to make sure that\n   * it times out properly. This is cleared and not used when activities are added.\n   */\n  private _initTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub?: Hub,\n    /**\n     * The time to wait in ms until the idle transaction will be finished.\n     * @default 1000\n     */\n    private readonly _idleTimeout: number = DEFAULT_IDLE_TIMEOUT,\n    // If an idle transaction should be put itself on and off the scope automatically.\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n\n    this._initTimeout = setTimeout(() => {\n      if (!this._finished) {\n        this.finish();\n      }\n    }, this._idleTimeout);\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampWithMs()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus(SpanStatus.Cancelled);\n          logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          logger.log(\n            '[Tracing] discarding Span since it happened after Transaction was finished',\n            JSON.stringify(span, undefined, 2),\n          );\n        }\n        return keepSpan;\n      });\n\n      logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    // this._onScope is true if the transaction was previously on the scope.\n    if (this._onScope) {\n      clearActiveTransaction(this._idleHub);\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n    logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const timeout = this._idleTimeout;\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      const end = timestampWithMs() + timeout / 1000;\n\n      setTimeout(() => {\n        if (!this._finished) {\n          this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[1]);\n          this.finish(end);\n        }\n      }, timeout);\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      logger.log(`[Tracing] Transaction finished because of no change for 3 heart beats`);\n      this.setStatus(SpanStatus.DeadlineExceeded);\n      this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[0]);\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    setTimeout(() => {\n      this._beat();\n    }, HEARTBEAT_INTERVAL);\n  }\n}\n\n/**\n * Reset active transaction on scope\n */\nfunction clearActiveTransaction(hub?: Hub): void {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      const transaction = scope.getTransaction();\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}\n","/* eslint-disable max-lines */\nimport { Primitive, Span as SpanInterface, SpanContext, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n\nimport { SpanStatus } from './spanstatus';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatus | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampWithMs();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: Primitive } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n  public child(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    return this.startChild(spanContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatus): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = SpanStatus.fromHttpCode(httpStatus);\n    if (spanStatus !== SpanStatus.UnknownError) {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === SpanStatus.Ok;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    this.data = spanContext.data ?? {};\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = spanContext.spanId ?? this.spanId;\n    this.startTimestamp = spanContext.startTimestamp ?? this.startTimestamp;\n    this.status = spanContext.status;\n    this.tags = spanContext.tags ?? {};\n    this.traceId = spanContext.traceId ?? this.traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n","/** The status of an Span. */\n// eslint-disable-next-line import/export\nexport enum SpanStatus {\n  /** The operation completed successfully. */\n  Ok = 'ok',\n  /** Deadline expired before operation could complete. */\n  DeadlineExceeded = 'deadline_exceeded',\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  Unauthenticated = 'unauthenticated',\n  /** 403 Forbidden */\n  PermissionDenied = 'permission_denied',\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  NotFound = 'not_found',\n  /** 429 Too Many Requests */\n  ResourceExhausted = 'resource_exhausted',\n  /** Client specified an invalid argument. 4xx. */\n  InvalidArgument = 'invalid_argument',\n  /** 501 Not Implemented */\n  Unimplemented = 'unimplemented',\n  /** 503 Service Unavailable */\n  Unavailable = 'unavailable',\n  /** Other/generic 5xx. */\n  InternalError = 'internal_error',\n  /** Unknown. Any non-standard HTTP status code. */\n  UnknownError = 'unknown_error',\n  /** The operation was cancelled (typically by the user). */\n  Cancelled = 'cancelled',\n  /** Already exists (409) */\n  AlreadyExists = 'already_exists',\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  FailedPrecondition = 'failed_precondition',\n  /** The operation was aborted, typically due to a concurrency issue. */\n  Aborted = 'aborted',\n  /** Operation was attempted past the valid range. */\n  OutOfRange = 'out_of_range',\n  /** Unrecoverable data loss or corruption */\n  DataLoss = 'data_loss',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace SpanStatus {\n  /**\n   * Converts a HTTP status code into a {@link SpanStatus}.\n   *\n   * @param httpStatus The HTTP response status code.\n   * @returns The span status or {@link SpanStatus.UnknownError}.\n   */\n  export function fromHttpCode(httpStatus: number): SpanStatus {\n    if (httpStatus < 400 && httpStatus >= 100) {\n      return SpanStatus.Ok;\n    }\n\n    if (httpStatus >= 400 && httpStatus < 500) {\n      switch (httpStatus) {\n        case 401:\n          return SpanStatus.Unauthenticated;\n        case 403:\n          return SpanStatus.PermissionDenied;\n        case 404:\n          return SpanStatus.NotFound;\n        case 409:\n          return SpanStatus.AlreadyExists;\n        case 413:\n          return SpanStatus.FailedPrecondition;\n        case 429:\n          return SpanStatus.ResourceExhausted;\n        default:\n          return SpanStatus.InvalidArgument;\n      }\n    }\n\n    if (httpStatus >= 500 && httpStatus < 600) {\n      switch (httpStatus) {\n        case 501:\n          return SpanStatus.Unimplemented;\n        case 503:\n          return SpanStatus.Unavailable;\n        case 504:\n          return SpanStatus.DeadlineExceeded;\n        default:\n          return SpanStatus.InternalError;\n      }\n    }\n\n    return SpanStatus.UnknownError;\n  }\n}\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport {\n  Event,\n  Measurements,\n  Outcome,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, isInstanceOf, logger } from '@sentry/utils';\n\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public name: string;\n\n  public metadata: TransactionMetadata;\n\n  private _measurements: Measurements = {};\n\n  /**\n   * The reference to the current hub.\n   */\n  private readonly _hub: Hub = (getCurrentHub() as unknown) as Hub;\n\n  private _trimEnd?: boolean;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n\n    if (isInstanceOf(hub, Hub)) {\n      this._hub = hub as Hub;\n    }\n\n    this.name = transactionContext.name || '';\n\n    this.metadata = transactionContext.metadata || {};\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n  }\n\n  /**\n   * JSDoc\n   */\n  public setName(name: string): void {\n    this.name = name;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Set observed measurements for this transaction.\n   * @hidden\n   */\n  public setMeasurements(measurements: Measurements): void {\n    this._measurements = { ...measurements };\n  }\n\n  /**\n   * Set metadata for this transaction.\n   * @hidden\n   */\n  public setMetadata(newMetadata: TransactionMetadata): void {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      this._hub\n        .getClient()\n        ?.getTransport?.()\n        .recordLostEvent?.(Outcome.SampleRate, 'transaction');\n\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const transaction: Event = {\n      contexts: {\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      debug_meta: this.metadata,\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));\n      transaction.measurements = this._measurements;\n    }\n\n    logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name ?? '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n}\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, TraceparentData, Transaction } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n  '([0-9a-f]{32})?' + // trace_id\n  '-?([0-9a-f]{16})?' + // span_id\n  '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(\n  options: Options | undefined = getCurrentHub()\n    .getClient()\n    ?.getOptions(),\n): boolean {\n  return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);\n}\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  return hub?.getScope()?.getTransaction() as T | undefined;\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n","import { User } from './user';\n\n/**\n * @inheritdoc\n */\nexport interface Session extends SessionContext {\n  /** JSDoc */\n  update(context?: SessionContext): void;\n\n  /** JSDoc */\n  close(status?: SessionStatus): void;\n\n  /** JSDoc */\n  toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration?: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  };\n}\n\nexport interface RequestSession {\n  status?: RequestSessionStatus;\n}\n\n/**\n * Session Context\n */\nexport interface SessionContext {\n  sid?: string;\n  did?: string;\n  init?: boolean;\n  // seconds since the UNIX epoch\n  timestamp?: number;\n  // seconds since the UNIX epoch\n  started?: number;\n  duration?: number;\n  status?: SessionStatus;\n  release?: string;\n  environment?: string;\n  userAgent?: string;\n  ipAddress?: string;\n  errors?: number;\n  user?: User | null;\n  ignoreDuration?: boolean;\n}\n\n/**\n * Session Status\n */\nexport enum SessionStatus {\n  /** JSDoc */\n  Ok = 'ok',\n  /** JSDoc */\n  Exited = 'exited',\n  /** JSDoc */\n  Crashed = 'crashed',\n  /** JSDoc */\n  Abnormal = 'abnormal',\n}\n\nexport enum RequestSessionStatus {\n  /** JSDoc */\n  Ok = 'ok',\n  /** JSDoc */\n  Errored = 'errored',\n  /** JSDoc */\n  Crashed = 'crashed',\n}\n\n/** JSDoc */\nexport interface SessionAggregates {\n  attrs?: {\n    environment?: string;\n    release?: string;\n  };\n  aggregates: Array<AggregationCounts>;\n}\n\nexport interface SessionFlusherLike {\n  /**\n   * Increments the Session Status bucket in SessionAggregates Object corresponding to the status of the session\n   * captured\n   */\n  incrementSessionStatusCount(): void;\n\n  /** Submits the aggregates request mode sessions to Sentry */\n  sendSessionAggregates(sessionAggregates: SessionAggregates): void;\n\n  /** Empties Aggregate Buckets and Sends them to Transport Buffer */\n  flush(): void;\n\n  /** Clears setInterval and calls flush */\n  close(): void;\n}\n\nexport interface AggregationCounts {\n  started: string;\n  errored?: number;\n  exited?: number;\n  crashed?: number;\n}\n","import { DsnLike } from './dsn';\nimport { Event } from './event';\nimport { SentryRequestType } from './request';\nimport { Response } from './response';\nimport { SdkMetadata } from './sdkmetadata';\nimport { Session, SessionAggregates } from './session';\n\nexport enum Outcome {\n  BeforeSend = 'before_send',\n  EventProcessor = 'event_processor',\n  NetworkError = 'network_error',\n  QueueOverflow = 'queue_overflow',\n  RateLimitBackoff = 'ratelimit_backoff',\n  SampleRate = 'sample_rate',\n}\n\n/** Transport used sending data to Sentry */\nexport interface Transport {\n  /**\n   * Sends the event to the Store endpoint in Sentry.\n   *\n   * @param event Event that should be sent to Sentry.\n   */\n  sendEvent(event: Event): PromiseLike<Response>;\n\n  /**\n   * Sends the session to the Envelope endpoint in Sentry.\n   *\n   * @param session Session that should be sent to Sentry | Session Aggregates that should be sent to Sentry.\n   */\n  sendSession?(session: Session | SessionAggregates): PromiseLike<Response>;\n\n  /**\n   * Wait for all events to be sent or the timeout to expire, whichever comes first.\n   *\n   * @param timeout Maximum time in ms the transport should wait for events to be flushed. Omitting this parameter will\n   *   cause the transport to wait until all events are sent before resolving the promise.\n   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\n   * still events in the queue when the timeout is reached.\n   */\n  close(timeout?: number): PromiseLike<boolean>;\n\n  /**\n   * Increment the counter for the specific client outcome\n   */\n  recordLostEvent?(type: Outcome, category: SentryRequestType): void;\n}\n\n/** JSDoc */\nexport type TransportClass<T extends Transport> = new (options: TransportOptions) => T;\n\n/** JSDoc */\nexport interface TransportOptions {\n  /** Sentry DSN */\n  dsn: DsnLike;\n  /** Define custom headers */\n  headers?: { [key: string]: string };\n  /** Set a HTTP proxy that should be used for outbound requests. */\n  httpProxy?: string;\n  /** Set a HTTPS proxy that should be used for outbound requests. */\n  httpsProxy?: string;\n  /** HTTPS proxy certificates path */\n  caCerts?: string;\n  /** Fetch API init parameters */\n  fetchParameters?: { [key: string]: string };\n  /** The envelope tunnel to use. */\n  tunnel?: string;\n  /** Send SDK Client Reports. Enabled by default. */\n  sendClientReports?: boolean;\n  /**\n   * Set of metadata about the SDK that can be internally used to enhance envelopes and events,\n   * and provide additional data about every request.\n   * */\n  _metadata?: SdkMetadata;\n}\n","import { getGlobalObject } from './global';\nimport { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttrs?: string[]): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  const global = getGlobalObject<Window>();\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n    ? window // eslint-disable-line no-restricted-globals\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n  const requestKeys: XMLHttpRequest[] = [];\n  const requestValues: Array<any>[] = [];\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            const requestPos = requestKeys.indexOf(xhr);\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              const args = requestValues.splice(requestPos)[0];\n              if (xhr.__sentry_xhr__ && args[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args[0] as XHRSendInput;\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function(original: WrappedFunction): Function {\n          return function(...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      requestKeys.push(this);\n      requestValues.push(args);\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(originalAddEventListener: AddEventListener): AddEventListener {\n      return function(\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n      return function(\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = el.__sentry_instrumentation_handlers__ || {};\n            const handlerForType = handlers[type];\n\n            if (handlerForType) {\n              handlerForType.refCount -= 1;\n              // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n              if (handlerForType.refCount <= 0) {\n                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                handlerForType.handler = undefined;\n                delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n              }\n\n              // If there are no longer any custom handlers of any type on this element, cleanup everything.\n              if (Object.keys(handlers).length === 0) {\n                delete el.__sentry_instrumentation_handlers__;\n              }\n            }\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalRemoveEventListener.call(this, type, listener, options);\n      };\n    });\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function(e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport { Primitive } from '@sentry/types';\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: any): boolean {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: any): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: any): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/**\n * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.\n * Restores wrapping after the callback completes.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const originalConsole = (global as any).console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in (global as any).console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Mechanism, StackFrame } from '@sentry/types';\n\nimport { getGlobalObject } from './global';\nimport { snipLine } from './string';\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // eslint-disable-next-line no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // eslint-disable-next-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  if (!event.exception || !event.exception.values) {\n    return;\n  }\n  const exceptionValue0 = event.exception.values[0];\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = exceptionValue0.mechanism;\n  exceptionValue0.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };\n    exceptionValue0.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\nconst defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\nexport function parseRetryAfterHeader(now: number, header?: string | number | null): number {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if ((exception as any)?.__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    Object.defineProperty(exception, '__sentry_captured__', {\n      value: true,\n    });\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly _hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly _inner: any;\n\n  public constructor() {\n    this._hasWeakSet = typeof WeakSet === 'function';\n    this._inner = this._hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this._hasWeakSet) {\n      if (this._inner.has(obj)) {\n        return true;\n      }\n      this._inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < this._inner.length; i++) {\n      const value = this._inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    this._inner.push(obj);\n    return false;\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this._hasWeakSet) {\n      this._inner.delete(obj);\n    } else {\n      for (let i = 0; i < this._inner.length; i++) {\n        if (this._inner[i] === obj) {\n          this._inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName } from './stacktrace';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\nfunction getWalkSource(\n  value: any,\n): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      [key: string]: any;\n      stack: string | undefined;\n      message: string;\n      name: string;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as SimpleEvent;\n\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    // Accessing event attributes can throw (see https://github.com/getsentry/sentry-javascript/issues/768 and\n    // https://github.com/getsentry/sentry-javascript/issues/838), but accessing `type` hasn't been wrapped in a\n    // try-catch in at least two years and no one's complained, so that's likely not an issue anymore\n    source.type = event.type;\n\n    try {\n      source.target = isElement(event.target)\n        ? htmlTreeAsString(event.target)\n        : Object.prototype.toString.call(event.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(event.currentTarget)\n        ? htmlTreeAsString(event.currentTarget)\n        : Object.prototype.toString.call(event.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event.detail;\n    }\n\n    for (const attr in event) {\n      if (Object.prototype.hasOwnProperty.call(event, attr)) {\n        source[attr] = event[attr];\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/**\n * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,\n * booleans, null, and undefined.\n *\n * @param value The value to stringify\n * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or\n *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,\n *  unchanged.\n */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && value && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  // It's safe to use `window` and `document` here in this manner, as we are asserting using `typeof` first\n  // which won't throw if they are not present.\n\n  // eslint-disable-next-line no-restricted-globals\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${getFunctionName(value)}]`;\n  }\n\n  // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable\n\n  if (typeof value === 'symbol') {\n    return `[${String(value)}]`;\n  }\n\n  if (typeof value === 'bigint') {\n    return `[BigInt: ${String(value)}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // If value implements `toJSON` method, call it and return early\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function normalize(input: any, depth?: number): any {\n  try {\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const obj = val as { [key: string]: any };\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(obj)) {\n      if (typeof obj[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(obj[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return (val as any[]).map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","const defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n","import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const ll = newLine.length;\n  if (ll <= 150) {\n    return newLine;\n  }\n  if (colno > ll) {\n    // eslint-disable-next-line no-param-reassign\n    colno = ll;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, ll);\n  if (end > ll - 5) {\n    end = ll;\n  }\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return (pattern as RegExp).test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime\n * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node\n * 12+).\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n","import { getGlobalObject } from './global';\nimport { logger } from './logger';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === `function`) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 'PENDING',\n  /** Resolved / OK */\n  RESOLVED = 'RESOLVED',\n  /** Rejected / Error */\n  REJECTED = 'REJECTED',\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<{\n    done: boolean;\n    onfulfilled?: ((value: T) => T | PromiseLike<T>) | null;\n    onrejected?: ((reason: any) => any) | null;\n  }> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public static resolve<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n    return new SyncPromise(resolve => {\n      resolve(value);\n    });\n  }\n\n  /** JSDoc */\n  public static reject<T = never>(reason?: any): PromiseLike<T> {\n    return new SyncPromise((_, reject) => {\n      reject(reason);\n    });\n  }\n\n  /** JSDoc */\n  public static all<U = any>(collection: Array<U | PromiseLike<U>>): PromiseLike<U[]> {\n    return new SyncPromise<U[]>((resolve, reject) => {\n      if (!Array.isArray(collection)) {\n        reject(new TypeError(`Promise.all requires an array as input.`));\n        return;\n      }\n\n      if (collection.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      let counter = collection.length;\n      const resolvedCollection: U[] = [];\n\n      collection.forEach((item, index) => {\n        void SyncPromise.resolve(item)\n          .then(value => {\n            resolvedCollection[index] = value;\n            counter -= 1;\n\n            if (counter !== 0) {\n              return;\n            }\n            resolve(resolvedCollection);\n          })\n          .then(null, reject);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._attachHandler({\n        done: false,\n        onfulfilled: result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n            return;\n          }\n          try {\n            resolve(onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onrejected: reason => {\n          if (!onrejected) {\n            reject(reason);\n            return;\n          }\n          try {\n            resolve(onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n      });\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve((val as unknown) as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public toString(): string {\n    return '[object SyncPromise]';\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  // TODO: FIXME\n  /** JSDoc */\n  private readonly _attachHandler = (handler: {\n    /** JSDoc */\n    done: boolean;\n    /** JSDoc */\n    onfulfilled?(value: T): any;\n    /** JSDoc */\n    onrejected?(reason: any): any;\n  }) => {\n    this._handlers = this._handlers.concat(handler);\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler.done) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        if (handler.onfulfilled) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          handler.onfulfilled((this._value as unknown) as any);\n        }\n      }\n\n      if (this._state === States.REJECTED) {\n        if (handler.onrejected) {\n          handler.onrejected(this._value);\n        }\n      }\n\n      handler.done = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","import { getGlobalObject } from './global';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n"],"sourceRoot":"webpack:///","file":"main.4b96aa9d26a8c43d.js"}